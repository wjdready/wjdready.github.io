<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>利用 for 实现一些宏</title>
    <url>/2023/02/04/auto/10/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍利用 for 实现一些宏 <span id="more"></span></p>
<p>for 有一个非常好的特性就是 for 括号分三段: ( 声明部分; 判断表达式;
结尾表达式)</p>
<p>利用这个特性我们可以写一些比较有意思的宏, 比如</p>
<ul>
<li><p>线程锁自动进入和退出 利用 for 循环执行结束后会自动执行结尾表达式,
简化资源锁地使用 </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> into_mutex_env(lock) \</span></span><br><span class="line"><span class="meta">  for(int x = ({mutex_lock(lock); 0}); x &lt; 1; x++, mutex_unlock(lock))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在进入大括号时自动加锁, 退出时自动解锁 */</span></span><br><span class="line">into_mutex_env(somelock) {</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>利用 for 声明部分定义变量然后在大括号中使用, <a class="link" href="https://stackoverflow.com/questions/75338894/how-to-declare-multiple-different-type-variables-in-one-line-in-c-language">参考<i class="fas fa-external-link-alt"></i></a>
因为声明部分的表达式只能定义一种类型的变量, 为了让 for 只执行一次,
这里将指针当作 int 使用 </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ui_style_to_set(ui_style, part_n, part_id) \</span></span><br><span class="line"><span class="meta">    ui_style.styles[part_n].part = part_id;        \</span></span><br><span class="line"><span class="meta">    for (lv_style_t *this = &amp;(ui_style.styles[part_n].style), *p = NULL; (int)p &lt; 1; (int)p++)</span></span><br><span class="line"></span><br><span class="line">ui_style_to_set(styles.msgbox, <span class="number">0</span>, LV_MSGBOX_PART_BG)</span><br><span class="line">{</span><br><span class="line">    lv_style_set_radius(this, LV_STATE_DEFAULT, <span class="number">5</span>);</span><br><span class="line">    lv_style_set_border_width(this, LV_STATE_DEFAULT, <span class="number">0</span>);</span><br><span class="line">    lv_style_set_bg_color(this, LV_STATE_DEFAULT, LV_COLOR_WHITE);</span><br><span class="line">    lv_style_set_text_color(this, LV_STATE_DEFAULT, LV_COLOR_BLACK);</span><br><span class="line">    lv_style_set_shadow_color(this, LV_STATE_DEFAULT, LV_COLOR_BLACK);</span><br><span class="line">    lv_style_set_shadow_width(this, LV_STATE_DEFAULT, <span class="number">10</span>);</span><br><span class="line">    lv_style_set_shadow_ofs_x(this, LV_STATE_DEFAULT, <span class="number">5</span>);</span><br><span class="line">    lv_style_set_shadow_ofs_y(this, LV_STATE_DEFAULT, <span class="number">5</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>用于断言 </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">assert_failed</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"assert failed\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> assert(flag)    \</span></span><br><span class="line"><span class="meta">    for(int i = 0, flag = 0; i &lt; 1; i++, ({<span class="keyword">if</span> (flag != 0); assert_failed();}))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">  </span><br><span class="line">    assert(res) {</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lang/C_Cpp/C宏的使用/利用for实现一些宏/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>C语言</category>
        <category>宏</category>
      </categories>
      <tags>
        <tag>宏</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 开发环境配置</title>
    <url>/2025/03/13/auto/0/ubuntuInit/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 ubuntu 开发环境的配置 <span id="more"></span></p>
<h4 id="纯净版">纯净版</h4>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 vmware tools</span></span><br><span class="line">apt-get install open-vm-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开发必装 Ubuntu24Temp</span></span><br><span class="line">apt-get install net-tools openssh-server chromium-browser vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh 免密登录 .ssh/authorized_keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂在共享文件夹</span></span><br><span class="line">sudo mount -t fuse.vmhgfs-fuse .host:/ /mnt/hgfs -o allow_other</span><br><span class="line"><span class="comment"># 自动挂载 sudo vim /etc/fstab 中加入</span></span><br><span class="line"><span class="comment"># .host:/ /mnt/hgfs fuse.vmhgfs-fuse allow_other,defaults 0 0</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="ubuntu24-开发环境版">Ubuntu24 开发环境版</h4>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在纯净版的基础上</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本工具</span></span><br><span class="line">sudo apt-get install git curl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可编译 linux kernel 的配置,  并支持 arm64 交叉编译</span></span><br><span class="line">sudo apt-get install make gcc flex bison libssl-dev gcc-aarch64-linux-gnu</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============= flutter 开发 =============</span></span><br><span class="line">sudo apt-get install clang cmake ninja-build  pkg-config libgtk-3-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============= TX2 开发 =============</span></span><br><span class="line">sudo apt-get install qemu-user-static</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============= 安卓开发 =============</span></span><br><span class="line">sudo apt-get install openjdk-8-jdk g++-multilib gcc-multilib libxml2-utils m4</span><br><span class="line"><span class="comment"># 下载后移除 /etc/java-8-openjdk/security/java.security 文件里 jdk.tls.disabledAlgorithms 的 TLSv1, TLSv1.1</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libncurses.so.6 /usr/lib/x86_64-linux-gnu/libncurses.so.5</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/lib/x86_64-linux-gnu/libtinfo.so.6 /usr/lib/x86_64-linux-gnu/libtinfo.so.5</span><br><span class="line"><span class="comment"># 下载并编译源码安装 Python2.7</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="遇到的问题和解决">遇到的问题和解决</h2>
<ol type="1">
<li>以太网显示只有 10M/s</li>
</ol>
<p>修改 .vmx 文件, 添加 ethernet0.virtualDev = "e1000"</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./AAA/ubuntuInit.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>C 常见问题</title>
    <url>/2023/01/16/auto/13/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<html><head></head><body><h3 id="判断大小端">判断大小端</h3>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint32_t</span> val = <span class="number">0x55</span>;            <span class="comment">// 0x55 = 00 00 00 55， 55 是低位</span></span><br><span class="line">    <span class="type">uint8_t</span> *p = (<span class="type">uint8_t</span> *)&amp;val;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%02X %02X %02X %02X\n"</span>, p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>], p[<span class="number">3</span>]);</span><br><span class="line">    <span class="comment">// x86 平台: 输出 55 00 00 00 说明低位在低地址, 小端模式</span></span><br><span class="line">    <span class="comment">// ARM 平台: 输出 55 00 00 00 说明低位在低地址, 小端模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 快速判断小端模式 */</span></span><br><span class="line">    <span class="keyword">if</span>(({<span class="keyword">volatile</span> <span class="type">int</span> val = <span class="number">0x55</span>; *(<span class="type">uint8_t</span>*)&amp;val == <span class="number">0x55</span>;}))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="进度条实现">进度条实现</h3>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">33</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">' '</span>, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        buf[i] = <span class="string">'#'</span>;</span><br><span class="line">        <span class="type">float</span> per = i == <span class="number">31</span> ? <span class="number">100.0</span> : (<span class="type">float</span>)i / <span class="number">32.0</span> * <span class="number">100.0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\r [%s] %.0f%% %s "</span>, buf, per, <span class="string">"346 KB/s"</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>也可以通过 <code>.*s</code> 实现:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">33</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">'#'</span>, <span class="keyword">sizeof</span>(buf) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">float</span> per = i == <span class="number">31</span> ? <span class="number">100.0</span> : (<span class="type">float</span>)i / <span class="number">32.0</span> * <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">int</span> left = (per / <span class="number">100.0</span>) * <span class="number">32</span>;</span><br><span class="line">        <span class="type">int</span> right = <span class="number">32</span> - left;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\r[%.*s%*s] %.0f%% %s "</span>, left, buf, right, <span class="string">""</span>, per, <span class="string">"346 KB/s"</span>);</span><br><span class="line">        usleep(<span class="number">100000</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>导出成宏的形式: </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> START_PROGRESS_BAR(pbar, len) \</span></span><br><span class="line"><span class="meta">    char __##pbar[len] = {0};         \</span></span><br><span class="line"><span class="meta">    memset(__##pbar, <span class="string">'#'</span>, sizeof(__##pbar) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROGRESS_BAR_RUNING(pbar, per, fmt, ...) ({                                       \</span></span><br><span class="line"><span class="meta">    float p = per &gt;= 100.0 ? 100.0 : per;                                                 \</span></span><br><span class="line"><span class="meta">    int left = (p / 100.0) * (sizeof(__##pbar) - 1);                                      \</span></span><br><span class="line"><span class="meta">    int right = (sizeof(__##pbar) - 1) - left;                                            \</span></span><br><span class="line"><span class="meta">    printf(<span class="string">"\r[%.*s%*s] %.0f%%"</span> fmt, left, __##pbar, right, <span class="string">""</span>, (float)per, __VA_ARGS__); \</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    START_PROGRESS_BAR(mybar, <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        PROGRESS_BAR_RUNING(mybar, (<span class="type">float</span>)i / <span class="number">31</span> * <span class="number">100.0</span>, <span class="string">" %d KB/s"</span>, <span class="number">105</span>);</span><br><span class="line">        usleep(<span class="number">100000</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="简单项目的多语言功能">简单项目的多语言功能</h3>
<p>language.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"language.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">lang_type_t</span> lang_type = LANG_CN;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lang_type_set</span><span class="params">(<span class="type">lang_type_t</span> type)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (type &lt; <span class="number">0</span> || type &gt; _LANG_MAX)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    lang_type = type;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">lang_type_t</span> <span class="title function_">lang_type_get</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> lang_type;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">language_t</span> lang = {</span><br><span class="line">    .About = {</span><br><span class="line">        <span class="string">"About"</span>,</span><br><span class="line">        <span class="string">"关于"</span></span><br><span class="line">    },</span><br><span class="line">    .Exit = {</span><br><span class="line">        <span class="string">"Exit"</span>, </span><br><span class="line">        <span class="string">"退出"</span></span><br><span class="line">    },</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>language.h</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LANG(lang_item)   \</span></span><br><span class="line"><span class="meta">    ((lang_item).text[lang_type] ?  \</span></span><br><span class="line"><span class="meta">    (lang_item).text[lang_type] : <span class="string">"null"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> {</span></span><br><span class="line">    LANG_EN,</span><br><span class="line">    LANG_CN,</span><br><span class="line">    _LANG_MAX,</span><br><span class="line">}<span class="type">lang_type_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> {</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *text[_LANG_MAX];</span><br><span class="line">} <span class="type">lang_item_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">language_t</span> lang;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">lang_type_t</span> lang_type;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lang_type_set</span><span class="params">(<span class="type">lang_type_t</span> type)</span>;</span><br><span class="line"><span class="type">lang_type_t</span> <span class="title function_">lang_type_get</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则替换更改 item 名称:</span></span><br><span class="line"><span class="comment"> * (LANG\(lang\.)oldname\) --&gt; $1oldname)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  {</span></span><br><span class="line">    <span class="comment">/* 设置信息 */</span></span><br><span class="line">    <span class="type">lang_item_t</span> About;</span><br><span class="line">    <span class="type">lang_item_t</span> Exit;</span><br><span class="line">}<span class="type">language_t</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>使用举例:</p>
<p>main.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"language.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">/* 设置语言类型 */</span></span><br><span class="line">    lang_type_set(LANG_CN);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印语言项 */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, LANG(lang.About));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印所有语言项 */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(lang) / <span class="keyword">sizeof</span>(<span class="type">lang_item_t</span>); i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">lang_item_t</span> *l = (<span class="type">lang_item_t</span> *)(&amp;lang) + i;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, LANG(*l));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lang/C_Cpp/Others/常见问题.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>C</category>
        <category>其他</category>
        <category>常见问题</category>
      </categories>
      <tags>
        <tag>常见问题</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言相关博客模板</title>
    <url>/2023/01/17/auto/11/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 <span id="more"></span></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lang/C_Cpp/C静态库与动态库/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>模板</category>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 __attribute( (section(x)) ) 来对函数进行快速测试</title>
    <url>/2023/02/17/auto/14/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍通过 __attribute( (section(x)) ) 来对函数进行快速测试
<span id="more"></span></p>
<h3 id="通过-__attribute-sectionx-来对函数进行快速测试">通过
__attribute( (section(x)) ) 来对函数进行快速测试</h3>
<p>先从简单代码开始，以下代码通过宏 <code>EXPORT</code>
来帮助我们快速定义一个 myfun_t 变量,
所以在<code>EXPORT(hello);</code>就定义了一个 <code>_hello</code> 变量,
于是我们可以在 main 中进行访问</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">void</span> (*fun)(<span class="type">void</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *desc;</span><br><span class="line">} <span class="type">myfun_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXPORT(x)               \</span></span><br><span class="line"><span class="meta">    static myfun_t _##x = {     \</span></span><br><span class="line"><span class="meta">        .fun = x                \</span></span><br><span class="line"><span class="meta">    }</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello\n"</span>);</span><br><span class="line">}</span><br><span class="line">EXPORT(hello);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    _hello.fun();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>__attribute 宏用来设置编译属性,
<code>__attribute( (section(x)) )</code>
可以指定编译器将变量存放到指定的内存区域, 之后我们就可以使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">extern type_t __start_&lt;section_name&gt;</span><br><span class="line">extern type_t __stop_&lt;section_name&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>来进行访问, <code>__start_&lt;section_name&gt;</code> 代表段的起始,
是一个内置标签, 就像 int a = 12; 中的 a 一样,
它的数据类型取决于我们如何看待它, 和很多变量标签一样, 通过
<code>&amp;</code> 可以访问变量所在的地址, 所以访问段的的起始地址为
<code>&amp;__start_mysection</code></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYSECTION __attribute((used, section(<span class="string">"mysection"</span>)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> mystr[] MYSECTION = <span class="string">"Good"</span>;</span><br><span class="line"><span class="comment">// int myvalue MYSECTION = 125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">char</span> __start_mysection;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, &amp;__start_mysection);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// extern int __start_mysection;</span></span><br><span class="line">    <span class="comment">// printf("%d\n", myvalue);     // 125</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试代码">测试代码</h3>
<p>有了上面的基础,
就可以尝试写快速测试的代码了，一般来说我们希望快速测试一个函数,
编写完后在函数下面通过一个宏定义 TEST_FUNC_ADD
就可以将函数插入到测试代码的行列。</p>
<p>test_command.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"test_command.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __ARMCC_VERSION <span class="comment">/* ARM C Compiler */</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">test_command_t</span> test_command_section$$Base;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">test_command_t</span> test_command_section$$Limit;</span><br><span class="line"><span class="type">test_command_t</span> *test_command_section_begin = &amp;(test_command_section$$Base);</span><br><span class="line"><span class="type">test_command_t</span> *test_command_section_end = &amp;(test_command_section$$Limit);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__GNUC__)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">test_command_t</span> __start_test_command_section;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">test_command_t</span> __stop_test_command_section;</span><br><span class="line"><span class="type">test_command_t</span> *test_command_section_begin = &amp;__start_test_command_section;</span><br><span class="line"><span class="type">test_command_t</span> *test_command_section_end = &amp;__stop_test_command_section;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">"The platform is not supported"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> foreach_command(item)                                                                              \</span></span><br><span class="line"><span class="meta">    for (test_command_t *item = test_command_section_begin; item != test_command_section_end; item++)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 快速定义内部命令, 内部命令什么也不做只是用来显示和提供帮助 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_FUN_ADD_INTERNAL(label, n, d)                                                                 \</span></span><br><span class="line"><span class="meta">    static int _##label(int argc, char **argv)                                                             \</span></span><br><span class="line"><span class="meta">    {                                                                                                      \</span></span><br><span class="line"><span class="meta">        return 0;                                                                                          \</span></span><br><span class="line"><span class="meta">    }                                                                                                      \</span></span><br><span class="line"><span class="meta">    EXPORT_TEST_COMMAND(_##label, n, d)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加内部命令 */</span></span><br><span class="line">TEST_FUN_ADD_INTERNAL(last_result, <span class="string">"r"</span>, <span class="string">"Get last command exec result"</span>);</span><br><span class="line">TEST_FUN_ADD_INTERNAL(all_command, <span class="string">"a"</span>, <span class="string">"Show all supported command"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将给定字符串拆分成参数列表 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">test_command_get_args</span><span class="params">(<span class="type">char</span> *command_string, <span class="type">const</span> <span class="type">char</span> *tokens, <span class="type">int</span> argc_max, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> argc = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *token = strtok(command_string, tokens);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (token != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        argv[argc++] = token;</span><br><span class="line">        <span class="keyword">if</span> (argc &gt;= argc_max)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        token = strtok(<span class="literal">NULL</span>, tokens);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> argc;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 处理给定的输入字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如 echo "Hello"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param input_string 输入字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test_command</span><span class="params">(<span class="type">char</span> *input_string)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> *argv[<span class="number">32</span>] = {<span class="number">0</span>};</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> argc = test_command_get_args(input_string, <span class="string">" \n"</span>, <span class="number">31</span>, argv);</span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"a"</span>) == <span class="number">0</span> || <span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"help"</span>) == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        foreach_command(entry) test_command_printf(<span class="string">"    %-15s\t -- %s\n"</span>, entry-&gt;name, entry-&gt;desc);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印上一次命令执行结果 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">"r"</span>) == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        test_command_printf(<span class="string">"%d\n"</span>, result);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    foreach_command(entry)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(entry-&gt;name, argv[<span class="number">0</span>]) == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            result = entry-&gt;fun(argc, argv);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    test_command_printf(<span class="string">"Command %s not found\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>test_command.h</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*<span class="type">command_func_t</span>)</span><span class="params">(<span class="type">int</span>, <span class="type">char</span> **)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> test_command_printf printf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> (*fun)(<span class="type">int</span>, <span class="type">char</span> **);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *desc;</span><br><span class="line">    <span class="type">char</span> _tmp[<span class="number">8</span>]; <span class="comment">/* 32 位对齐 */</span></span><br><span class="line">} <span class="type">test_command_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_COMMAND_FUNC_DEFINE(f) int f(int argc, char **argv)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECTION __attribute((used, section(<span class="string">"test_command_section"</span>)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 导出一个标准的测量命令</span></span><br><span class="line"><span class="comment"> *      一个标准的命令应该是形如 int command(int argc, char *argv[]);</span></span><br><span class="line"><span class="comment"> *      它能接收命令行参数, 并作出相应的处理, 同时还有返回值 int</span></span><br><span class="line"><span class="comment"> * 例如:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * static int my_test_command(int argc, char *argv[])</span></span><br><span class="line"><span class="comment"> * {</span></span><br><span class="line"><span class="comment"> *     printf("command %s, args number: %d\n", argv[0], argc);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     return 0;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> * EXPORT_TEST_COMMAND(my_test_command, "mytest", "打印命令参数");</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 一般来说, 我们可以通过定义一个标准测试命令, 并处理输入的参数来对某一个上下文定义的函数进行测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXPORT_TEST_COMMAND(f, n, d)                                                             \</span></span><br><span class="line"><span class="meta">    static test_command_t _##f SECTION = {                                                       \</span></span><br><span class="line"><span class="meta">        .fun = f,                                                                                \</span></span><br><span class="line"><span class="meta">        .name = n,                                                                               \</span></span><br><span class="line"><span class="meta">        .desc = d,                                                                               \</span></span><br><span class="line"><span class="meta">    }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 将一个已有的函数添加到测量命令里</span></span><br><span class="line"><span class="comment"> *  即对一个已有的函数进行快速测试, 需要显式提供被测函数的参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如: 现有一个函数 add(int a, int b);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      那么其导出到测试命令的写法为:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      TEST_FUN_ADD(add, "add_test", "对函数 add() 进行测试, 参数为 (1,2)", 1, 2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      其中, 1, 2 是我们希望对函数进行测试的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_FUN_ADD(f, n, d, ...)                                                               \</span></span><br><span class="line"><span class="meta">    static int _##f(int argc, char **argv)                                                       \</span></span><br><span class="line"><span class="meta">    {                                                                                            \</span></span><br><span class="line"><span class="meta">        f(__VA_ARGS__);                                                                          \</span></span><br><span class="line"><span class="meta">        return 0;                                                                                \</span></span><br><span class="line"><span class="meta">    }                                                                                            \</span></span><br><span class="line"><span class="meta">    EXPORT_TEST_COMMAND(_##f, n, d)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* -- function prototypes -- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 处理给定的输入字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如 echo "Hello"</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param input_string 输入字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">test_command</span><span class="params">(<span class="type">char</span> *input_string)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -- END OF function prototypes -- */</span></span><br></pre></td></tr></tbody></table></figure>
<p>main.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"test_command.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> input_string[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n#sh "</span>);</span><br><span class="line">        gets(input_string);</span><br><span class="line">    </span><br><span class="line">        test_command(input_string);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* __TEST_COMMAND__START__ */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"test_command.h"</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ret1</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">EXPORT_TEST_COMMAND(ret1, <span class="string">"ret1"</span>, <span class="string">"return 2"</span>);</span><br><span class="line"><span class="comment">/* __TEST_COMMAND__END__ */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* __TEST_COMMAND__START__ */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"test_command.h"</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">ret2</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">EXPORT_TEST_COMMAND(ret2, <span class="string">"ret2"</span>, <span class="string">"return 2"</span>);</span><br><span class="line"><span class="comment">/* __TEST_COMMAND__END__ */</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>makefile</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># [MyProject]</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	gcc main.c test_command.c</span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	./a.exe</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	@rm ./a.exe 2&gt; /dev/null || true </span><br><span class="line"></span><br><span class="line"><span class="section">globalclean:</span></span><br><span class="line">	make clean</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://stackoverflow.com/questions/3633896/append-items-to-an-array-with-a-macro-in-c">参考文献<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lang/C_Cpp/通过attribute_section快速测试/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>C/C++</category>
        <category>宏</category>
      </categories>
      <tags>
        <tag>宏</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 文件批量操作模板</title>
    <url>/2023/02/15/auto/15/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍一个常用的 Python 文件批量操作模板,
用于快速处理日常办公文件操作问题</p>
<span id="more"></span>
<p>直接看代码</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#!python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件批量操作模板</span></span><br><span class="line"><span class="comment"># 导出 exe: pyinstaller --onefile --nowindowed temp.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doProcessFile</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="built_in">print</span>(filepath)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理给定路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">processPath</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 文件直接执行</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">        doProcessFile(path)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 目录，则递归处理</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            filepath = os.path.join(root, file)</span><br><span class="line">            doProcessFile(filepath)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 通过在程序内输入文件或文件夹路径来执行</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"输入文件或目录\n或将文件或目录拖入并按回车键执行\n"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输入模式死循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(sys.argv) &lt;= <span class="number">1</span>:</span><br><span class="line">        path = <span class="built_in">input</span>()</span><br><span class="line">        processPath(path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'\nDONE'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 否则通过命令行参数输入或拖入文件或文件夹到可执行程序来执行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sys.argv)):</span><br><span class="line">        processPath(sys.argv[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'\nDONE'</span>)</span><br><span class="line">    <span class="built_in">input</span>()</span><br></pre></td></tr></tbody></table></figure>
<p>程序中包含几个输入模式: 1.
通过在命令行中调用该程序并输入文件或文件夹参数 2. 将脚本打包成 exe 后,
通过将要处理的文件或文件夹拖到程序图标即可执行 3. 打开程序进入等待输入,
然后在输入框中输入, 或者直接将文件或文件夹拖进输入框中按回车执行</p>
<h3 id="使用模板">使用模板</h3>
<p>使用该模板也非常简单, 其中只要对 <code>doProcessFile</code>
更改一下即可, 例如: * 批量更改文件编码 </p><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 更改文件编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doProcessFile</span>(<span class="params">filepath</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">'r'</span>, encoding = <span class="string">'gbk'</span>) <span class="keyword">as</span> fr:</span><br><span class="line">            doc = fr.read()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">'w'</span>, encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> fw:</span><br><span class="line">            fw.write(doc)</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        <span class="built_in">print</span>(filepath + <span class="string">" 不是 GBK 编码"</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li>批量更改文件名 <figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 更改文件名, 将 jpg 改成 png</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doProcessFile</span>(<span class="params">filepath</span>):</span><br><span class="line">    name, <span class="built_in">type</span> = os.path.splitext(filepath)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">".jpg"</span>:</span><br><span class="line">        os.rename(filepath, name + <span class="string">".png"</span>)</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lang/Python/一些工具脚本/文件批量操作模板/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Python</category>
        <category>小工具</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>批量操作</tag>
      </tags>
  </entry>
  <entry>
    <title>GCC常见选项</title>
    <url>/2023/01/17/auto/12/%E5%B8%B8%E8%A7%81%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 <span id="more"></span></p>
<h2 id="gcc常见选项">GCC常见选项</h2>
<p><a class="link" href="https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html">所有选项<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><p>-Wl,option 用于将特定的选项传给链接器</p>
<p>例如当我链接程序时，我们希望将-t标志传递给链接器，以便它跟踪链接器处理的输
入文件的名称</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">gcc -Wl,-t main.c</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># C:\ProgramFiles\msys64\tmp\ccAp52pH.o</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h2 id="clang-常见选项">Clang 常见选项</h2>
<ul>
<li>-fdiagnostics-absolute-paths 输出错误或警告时,
打印错误出现的文件位置和完整路径</li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lang/C_Cpp/gcc_clang/常见选项.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>C_Cpp</category>
        <category>GCC</category>
      </categories>
      <tags>
        <tag>编译器</tag>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>01介绍</title>
    <url>/2023/08/04/auto/16/01%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍ARM 和 CortexM3 <span id="more"></span></p>
<h1 id="arm-处理器命名">1. ARM 处理器命名：</h1>
<ol type="1">
<li><p>早期的命名方法是在数字后面添加字母后缓，用来进一步明细该处理器支持的特性。
&gt; 例如：ARM7TDMI 来说，T: Thumb 指令集，D：支持 JTAG 调试，M
指快速乘法器，则对应一个嵌入式 ICE 模块。</p></li>
<li><p>后来，这 4 项基本功能成了任何新产品的标配，便不再使用这 4
个字母后缓。而是采用数字加字母的命名方法：</p>
<ul>
<li>数字 1：表示产品系列</li>
<li>数字 2：表示性能级别。较小的数字通常表示低功耗和低性能，而较大的 数
字表示高性能级别</li>
<li>字母后缀：用于指示具体的配置和特性
<ul>
<li>T：表示支持 Thumb 指令集，使用 16 位指令来提高代码密度</li>
<li>F：表示支持浮点运算单元（FPU）</li>
<li>E：表示支持嵌入式特性 &gt; 例如 ARM920T，9: 9 代表产品系列，20:
处理器的性能级别和种类。数字越大，代表着更高性能的处理器版本。T: Thumb
指令集。</li>
</ul></li>
</ul></li>
<li><p>再后来，新的特性不断加入，于是形成了新一套命名法，这套命名法也是一直在使用的。
以 Cortex 作为主名，根据应用领域分为
Cortex-M，Cortex-A，Cortex-R。后面字越大代表性能和功能较新和更高级别的处理器架构。</p></li>
</ol>
<figure>
<img src="/2023/08/04/auto/16/01%E4%BB%8B%E7%BB%8D/ARM处理器名字.PNG" alt="ARM 命名">
<figcaption aria-hidden="true">ARM 命名</figcaption>
</figure>
<h1 id="指令集的发展">2. 指令集的发展</h1>
<p>由于历史原因（从 ARM7TDMI 开始），ARM
处理器一直支持两种形式上相对独立的指令集，它们分别是：</p>
<ul>
<li>32 位的 ARM 指令集。可以实现 ARM 架构下所有功能。对应处理器状态：ARM
状态</li>
<li>16 位的 Thumb 指令集。是 ARM
指令集的一个子集，能带来更高的代码密度。对应处理器状态：Thumb 状态</li>
</ul>
<p>这两种指令集也对应了两种处理器执行状态。在程序的执行过程中，处理器可以动态地在两种执行状态之中切换。</p>
<figure>
<img src="/2023/08/04/auto/16/01%E4%BB%8B%E7%BB%8D/指令集发展.PNG" alt="指令集发展">
<figcaption aria-hidden="true">指令集发展</figcaption>
</figure>
<p>Thumb 指令集仅仅把常用的 ARM 指令压缩成 16
位的指令编码方式。在指令的执行阶段，16 位的指令被重新解码，完成对等的 32
位指令所实现的功能。</p>
<p>与全部用 ARM 指令集的方式相比，使用 Thumb
指令可以在代码密度方面改善大约
30%。但是，这种改进是以代码的效率为代价的。尽管每个 Thumb
指令都有相对应的 ARM 指令，但是，相同的功能，需要更多的 Thumb
指令才能完成。</p>
<p>因此，当指令预取需要的时间没有区别时，ARM 指令相对 Thumb
指令具有更好的性能。</p>
<p>Thumb-2 指令集在现有的 Thumb 指令的基础上做了如下的扩充：</p>
<ul>
<li>增加了一些新的 16 位 Thumb 指令来改进程序的执行流程</li>
<li>增加了一些新的 32 位 Thumb 指令以实现一些 ARM 指令的专有功能 32 位的
ARM 指令也得到了扩充</li>
<li>增加了一些新的指令来改善代码性能和数据处理的效率给 Thumb 指令集增加
32 位指令就解决了之前 Thumb
指令集不能访问协处理器、特权指令和特殊功能指令的局限</li>
<li>新的 Thumb 指令集现在可以实现所有的功能，这样就不需要在 ARM/Thumb
状态之间反复切换了，代码密度和性能得到的显著的提高</li>
</ul>
<p>参考 论 ARMv7 Thumb-2 指令集的性能（含 Thumb 指令集介绍）【转载】</p>
<figure>
<img src="/2023/08/04/auto/16/01%E4%BB%8B%E7%BB%8D/指令集之间的关系.PNG" alt="指令集之间的关系">
<figcaption aria-hidden="true">指令集之间的关系</figcaption>
</figure>
<p>可以看到 Cortex-M3 只支持 Thumb-2 指令集，并且只实现了 Thumb‐2
的一个子集。</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/CortexM3权威指南/01介绍/01介绍.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>CortexM3权威指南</category>
      </categories>
      <tags>
        <tag>ARM</tag>
      </tags>
  </entry>
  <entry>
    <title>03CortexM3基础</title>
    <url>/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 CortexM3 的基础知识</p>
<span id="more"></span>
<h1 id="简介">1. 简介</h1>
<p>Cortex-M3 是 32 位处理器内核</p>
<p>哈弗结构，指令和数据拥有独立的数据和地址总线
（独立编址）。这样一来数据访问不再占用指令的总线，从而提升了性能</p>
<p>不过指令总线和数据总线共享同一个存储空间，寻址空间不变，为 <span class="math inline">\(2^{32} = 4GB\)</span></p>
<p>比较复杂的应用可能需要更多的存储系统功能，为此 CM3 提供一个可选的
MPU，而且在需要的情况下也可以使用外部的 cache。另外在 CM3
中，小端模式和大端模式都是支持的。</p>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/简化图.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<h1 id="寄存器组">2. 寄存器组</h1>
<p>Cortex-M3 处理器拥有 R0-R15 的寄存器组。其中 R13 作为堆栈指针
SP。</p>
<p>SP 有两个，但在同一时刻只能有一个可以看到，这也就是所谓的 banked
寄存器。</p>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/寄存器组.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<h2 id="r0---r12-通用寄存器">R0 - R12: 通用寄存器</h2>
<p>R0-R12
都是32位通用寄存器，用于数据操作。但是注意：绝大多数16位Thumb指令只能访间R0-R7，少部分可访问
R8-R12。而32位Thumb-2指令可以访问所有寄存器。</p>
<h2 id="banked-r13-两个堆栈指针">Banked R13: 两个堆栈指针</h2>
<p>Cortex-M3拥有两个堆栈指针，然而它们是banked，因此任一时刻只能使用其中的一个。当引用R13（或写作SP）时，引用到的是当前正在使用的那一个，另一个必须用特殊的指令来访问（MRS,MSR指令）。
*
主堆栈指针（MSP）：复位后默认使用的堆栈指针，用于操作系统内核以及异常处理例程（包括中断服务例程）
* 进程堆栈指针（PSP）：由用户的应用程序代码使用</p>
<p>堆栈指针的最低两位永远是 0，这意味着堆栈总是4字节对齐的。</p>
<blockquote>
<p>在ARM编程领域中，凡是打断程序顺序执行的事件，都被称为异常（exception）。除了外部中断外，当有指令执行了“非法操作”，或者访问被禁的内存区间，因各种错误产生的fault，以及不可屏蔽中断发生时，都会打断程序的执行，这些情况统称为异常。在不严格的上下文中，异常与中断也可以混用：另外，程序代码也可以主动请求进入异常状态的（常用于系统调用）</p>
</blockquote>
<p>push 操作: sp--, 然后保存操作数 pop 操作: 先取出值，然后 sp++</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">push {r0}   ; 等价于  *(--r13) = R0</span><br><span class="line">pop {r0}    ; 等价于 r13 = *r13++</span><br><span class="line"></span><br><span class="line">也就说初始化一般让 sp 处于高内存地址，随着push的进行, 往低地址栈满</span><br><span class="line"></span><br><span class="line">      | Low  |                  | Low  |    </span><br><span class="line">      |      |                  |      | </span><br><span class="line">      |      |  [push]  sp -&gt;   |      | </span><br><span class="line">sp -&gt; | High |                  | High | </span><br></pre></td></tr></tbody></table></figure>
<p>栈的使用</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">; 子程序举例</span><br><span class="line">.syntax unified          ; 注意 thumb 不支持操作 r8 以上寄存器, 因此使用 .syntax unified 表示支持 ARM, thumb 混合编程</span><br><span class="line">push {r0-r7, r12, r14}   ; 保存寄存器列表, 调试发现入栈顺序似乎是从后往前 r14, r12, r7-r0</span><br><span class="line">...                      ; 执行处理</span><br><span class="line">pop {r0-r7, r12, r14}    ; 恢复到寄存器列表, 出栈顺序自然是和入栈顺序相反的 r0-r7, r12, r14</span><br><span class="line">bx r14                   ; 函数返回, 或写作 bx lr</span><br></pre></td></tr></tbody></table></figure>
<h2 id="r14-连接寄存器-lr">R14: 连接寄存器 (LR)</h2>
<p>当呼叫一个子程序时，由R14存储返回地址。</p>
<blockquote>
<p>不像大多数共它处理器，ARM为了减少访问内存的次数（防问内存的操作往往要3个以上指令周期，带
MMU 和 cache 的就更加不确定了），把返回地址直接存储在寄存器中。</p>
<p>这样足以使很多只有 1
级子程序调用的代码无需访问内存（堆栈内存），从而提高了子程序调用的效率。如果多于1级，则需要把前一级的R14值压到堆栈里。[具体示例
src/入栈和出栈测试.s]</p>
<p>在ARM上编程时，应尽量只使用寄存器保存中间结果，迫不得以时才访问内存。</p>
</blockquote>
<p>历史原因, LR 的 LSB 是可读可写的的, 因为以前使用该 LSB 作为 ARM 和
Thumb 状态的标识和切换, 而现在有 BLX
指令可以转跳后自动切换，同时通过状态寄存器检查当前处理处于 ARM 还是
Thumb 状态</p>
<h2 id="r15-程序计数寄存器-pc">R15: 程序计数寄存器 (PC)</h2>
<p>指向当前的程序地址。如果修改它的值，就能改变程序的执行流</p>
<p>因为 CM3 内部使用了指令流水线，读 PC 时返回的值是当前指令的地址 + 4.
比如说：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">0x1000: mov r0, pc  ; r0 = 0x1004</span><br></pre></td></tr></tbody></table></figure>
<p>如果向PC中写数据，就会引起一次程序的分支（但是不更新LR寄存器）。</p>
<p>CM3中的指令至少是半字对齐的，所以PC的LSB总是读回0。然而，在分支时，无论是直接写PC的值还是使用分支指令，都必须保证加载到PC的数值是奇数（即LSB=1），用以表明这是在
Thumb
状态下执行。倘若写了0，则视为企图转入ARM模式，CM3将产生一个fut异常。</p>
<p>[具体示例 src/操作pc指针.s]</p>
<h2 id="特殊功能寄存器">特殊功能寄存器</h2>
<p><a class="link" href="https://blog.csdn.net/weixin_47447179/article/details/122884198">参考<i class="fas fa-external-link-alt"></i></a></p>
<p>Cortex-M3中的特殊功能寄存器包括：</p>
<ul>
<li>程序状态寄存器组（PSRs或日xPSR）</li>
<li>中断屏蔽寄存器组（PRIMASK, FAULTMASK, BASEPRI)</li>
<li>控制寄存器（CONTROL）</li>
</ul>
<p>它们只能被专用的 MSR/MRS
指令访问，而且它们也没有与之相关联的访问地址</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mrs r0, BASEPRI</span><br><span class="line">mrs BASEPRI, r0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="程序状态寄存器">程序状态寄存器</h3>
<p>在内部被分为三个子状态寄存器:</p>
<ul>
<li>应用程序 PSR (APSR)</li>
<li>中断号 PSR (IPSR)</li>
<li>执行 PSR (EPSR)</li>
</ul>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/程序状态寄存器.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<p>单独访问，也可2个或3个 (这时直接 xPSR 或 PSR) 组合访问</p>
<table>
<thead>
<tr>
<th>位</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>N</td>
<td>负标志</td>
</tr>
<tr>
<td>Z</td>
<td>零标志</td>
</tr>
<tr>
<td>C</td>
<td>进位(或非借位)标志</td>
</tr>
<tr>
<td>V</td>
<td>溢出标志</td>
</tr>
<tr>
<td>Q</td>
<td>饱和标志</td>
</tr>
<tr>
<td>ICI/IT</td>
<td>中断继续指令(ICI)位, IF-THEN指令状态位用于条件执行</td>
</tr>
<tr>
<td>T</td>
<td>Thumb 状态, 总是 1, 清除此位会引起错误异常</td>
</tr>
<tr>
<td>异常编号</td>
<td>表示处理器正在处理的异常 (只读)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>无法使用MRS（读出为0）或MSR直接访问EPSR。IPSR为只读寄存器。</p>
</blockquote>
<h3 id="中断屏蔽寄存器组">中断屏蔽寄存器组</h3>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 92%">
</colgroup>
<thead>
<tr>
<th>名字</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>PRIMASK</td>
<td>1位宽寄存器。置位后关闭NMI（不可屏蔽中断和HardFault外的所有可屏蔽异常/中断</td>
</tr>
<tr>
<td>FAULTMASK</td>
<td>1位宽寄存器。置位后只有NMI可以响应（相比于PRIMASK，可屏蔽的中断/异常多了HardFault）。</td>
</tr>
<tr>
<td>BASEPRI</td>
<td>根据优先级屏蔽中断/异常，该寄存器最多有9位（由设计实现的优先级位数决定）。该寄存器定义了被屏蔽优先级的阈值。</td>
</tr>
<tr>
<td></td>
<td>当它被设置为某个值后，所有优先级号大于等于此值的中断都被关（注意：优先级号越大，优先级越低）；若设置成0，则不关断任何中断。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：FAULTMASK和BASEPRI寄存器在ARMv6-M中不存在(如Cortex-M0)。</p>
<p>只有特权状态才可以操作三个寄存器（非特权状态下的写操作会被忽略，读操作返回0）。三个寄存器默认值为0，即屏蔽（禁止异常/中断）不起作用。</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">MRS    R0, BASEPRI</span><br><span class="line">MSR    BASEPRI, R0</span><br><span class="line"></span><br><span class="line">; 可通过CSP（修改处理器状态）指令快速设置中断/异常的开关：</span><br><span class="line">CPSID    I    ;PRIMASK=1，关中断</span><br><span class="line">CPSIE    I    ;PRIMASK=0，开中断</span><br><span class="line">CPSID    F    ;FAULTMASK=1，关异常    </span><br><span class="line">CPSIE    F    ;FAULTMASK=0，开异常</span><br></pre></td></tr></tbody></table></figure>
<h3 id="控制寄存器">控制寄存器</h3>
<p>控制寄存器有两个用途，其一用于定义特权级别，其二用于选择当前使用哪个堆栈指针。由两个比特来行使这两个职能。</p>
<table>
<colgroup>
<col style="width: 25%">
<col style="width: 74%">
</colgroup>
<thead>
<tr>
<th>位</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONTROL[0] (nPRIV)</td>
<td>用于定义线程模式中的特权等级：</td>
</tr>
<tr>
<td></td>
<td>0 (默认) 处于线程模式模式中的特权等级</td>
</tr>
<tr>
<td></td>
<td>1 处于线程模式模式中的非特权等级</td>
</tr>
<tr>
<td>CONTROL[1] (SPSEL)</td>
<td>0（默认）：线程模式使用主栈指针（MSP）</td>
</tr>
<tr>
<td></td>
<td>1：线程模式使用进程栈指针</td>
</tr>
<tr>
<td></td>
<td>handler 模式下只允许使用 MSP, 该位始终为0，且无法写入</td>
</tr>
</tbody>
</table>
<blockquote>
<p>该寄存器复位后默认为0</p>
<p>只有特权状态才能修改（写操作）CONTROI寄存器。（读操作则不需要特权状态）</p>
</blockquote>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">MRS    R0, CONTROL            ;将CONTROL寄存器的值写入R0</span><br><span class="line">MSR    CONTROL, R0            ;将R0的值写入CONTROL寄存器</span><br></pre></td></tr></tbody></table></figure>
<h1 id="操作模式和特权级别">3. 操作模式和特权级别</h1>
<ul>
<li>两种模式: handler 模式 和 thread
模式，用于区别普通应用程序的代码和异常服务例程的代码</li>
<li>两级特权级别:
特权级和用户级，提供了存储器访问的保护机制，使得普通的用户程序代码不能意外地，甚至是恶意地执行涉及到要害的操作。</li>
</ul>
<p>在CM3运行主应用程序时（线程模式），既可以使用特权级，也可以使用用户级：但是异常服务例程必须在特权级下执行。</p>
<p>复位后，处理器默认进入线程模式，特权极访问。在特权级下，程序可以访问所有范围的存储器（如果有MPU，还要在MPU规定的禁地之外），并且可以执行所有指令。</p>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/操作模式转换.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<p>在线程模式+用户级下，对系统控制空间（SCS）的访问将被阻止一一该空间包含了配置寄存器组以及调试组件的寄存器组。</p>
<p>除此之外，还禁止使用MRS/MSR访问刚才讲到的，除了APSRR之外的特殊功能寄存器。</p>
<p>如果以身试法，则对于访问特殊功能寄存器的，访问操作被忽略：而对于访问SCS空间的，将fault同候。</p>
<p>在特权级下的代码可以通过置位CONTROL[0]来进入用户级。而不管是任何原因产生了任何异常，处理器都将以特权级来运行其服务例程，异常返回后，系统将回到产生异常时所处的级别。</p>
<p>用户级下的代码不能再试图修改CONTROL[0]来回到特权级。它必须通过一个
SVC
异常，由那个异常handler来修改CONTROL[0]，才能在返回到线程模式后拿到特权级。</p>
<blockquote>
<p>在异常服务中，通过读取PSP的值，OS就能够获取用户应用程序使用的堆栈，进一步地就知道了在发生异常时，被压入寄存器的内容，而且还可以把其它寄存器进一步压栈（使用SSTMDB和LDMIA的书写形式）。</p>
<p>OS还可以修改PSP，用于实现多任务中的任务上下文切换。</p>
</blockquote>
<h1 id="内建的嵌套向量中断控制器">4. 内建的嵌套向量中断控制器</h1>
<p>嵌套向量中断控制器（Nested Vectored Interrupt
Controller）提供如下的功能：</p>
<ul>
<li>可嵌套中断支持 (高优先级中断可打断低优先级中断)</li>
<li>向量中断支持 (中断来时自动根据中断号，从向量表中加载执行 ISR)</li>
<li>动态优先级调整支持 (在 ISR 中更改了自身优先级, 要等离开 ISR了才生效,
故不会自己打断自己)</li>
<li>中断延迟大大缩短 (引入新特性来缩短中断嵌套时 ISR 间的延迟)</li>
<li>中断可屏蔽 (既可以屏蔽优先级低于某个阈值的中断/异常
(BASEPRI寄存器)，也可以全体封杀 (PRIMASK和FAULTMASK))</li>
</ul>
<h1 id="存储器映射">5. 存储器映射</h1>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/存储器映射.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<h1 id="总线接口">6. 总线接口</h1>
<p>Cortex-M3内部有若干个总线接口，以使CM3能同时取址和访内（访问内存），它们是：</p>
<ul>
<li>指令存储区总线（I-Code 和 D-Code）</li>
<li>系统总线 (AHB-Lite)</li>
<li>私有外设总线 (诸如APB等的其它低速总线, 挂在 AHB)</li>
</ul>
<p>有两条代码存储区总线负责对代码存储区的访问，分别是I-Code总线和D-Code总线。前者用于取指，后者用于查表等操作，它们按最佳执行速度进行优化。</p>
<p>系统总线用于访问内存和外设，覆盖的区域包括SRAM，片上外设，片外RAM，片外扩展设备，以及系统级存储区的部分空间。</p>
<p>私有外设总线负责一部分私有外设的访问，主要就是访问调试组件。它们也在系统级存储区。</p>
<h1 id="存储器保护单元">7. 存储器保护单元</h1>
<p>可以对特权级访问和用户级访问分别施加不同的访问限制。当检测到犯规（violated）时，MPU就会产生一个fault异常，可以由fult异常的服务例程米分析该错误，并且在可能时改正它。</p>
<p>最常见的就是由操作系统使用MPU，以使特权级代码的数据，包括操作系统本身的数据不被其它用户程序弄坏。</p>
<p>MPU在保护内存时是按区管理的,它可以把某些内存 region
设置成只读，从而避免了那里的内容意外被更改。</p>
<p>还可以在多任务系统中把不同任务之间的数据区隔离。</p>
<h1 id="指令集">8. 指令集</h1>
<p>Cortex-M3只使用Thumb-2指令集。这是个了不起的突破，因为它允许32位指令和16位指令水乳交融，代码密度与处理性能两手抓，两手都硬。而且虽然它很强大，却依然易于使用。</p>
<p>在过去，做AM开发必须处理好两个状态。这两个状态是井水不犯河水的，它们是：32位的ARM状态和16位的Thumb状态。</p>
<p>当处理器在ARM状态下时，所有的指令均是32位的（哪怕只是个NOP指令），此时性能相当高。而在Thumb状态下，所有的指令均是16位的，代码密度提高了倍。</p>
<p>不过，thumb状态下的指令功能只是ARM下的一个子集，结果可能需要更多条的指令去完成相同的工作，导致处理性能下降。</p>
<p>为了取长补短，很多应用程序都混合使用ARM和Thumb代码段。然而，这种混合使用是有额外开销（overhead）的，时间上的和空间上的都有，主要发生在状态切换之时。</p>
<p>另一方面，ARM代码和Thumb代码需要以不同的方式编译，这也增加了软件开发管理的复杂度。</p>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/状态切换示意图.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<p>如图通过 BLX 指令，转跳到 ARM 代码部分同时切换处理器为 ARM 状态,
处理完后后返回继续以 Thumb 状态执行。</p>
<p>伴随着Thumb-2指令集的横空出世，终于可以在单一的操作模式下搞定所有处理了，再也没有来回切换的事来烦你了。</p>
<p>事实上，Cortex-M3内核干脆都不支持ARM指令，中断也在Thumb态下处理（以前的ARM总是在ARM状态下处理所有的中断和异常）。</p>
<p>这可不是小便宜，它使CM3在好几个方面都比传统的ARM处理器更先进：</p>
<ul>
<li>消灭了状态切换的额外开销，节省了both执行时间和指令空间。</li>
<li>不再需要把源代码文件分成按ARM编译的和按Thumb编译的，软件开发的管理大大减负。</li>
<li>无需再反复地求证和测试：究竞该在何时何地切换到何种状态下，我的程序才最有效率。开发软件容易多了。</li>
</ul>
<p>不少有趣和强大的指令为Cortex-M3注入了新鲜的青春血液，下面给出几个例子：</p>
<ul>
<li>UBFX,BFI,BFC：位段提取，位段插入，位段清零。支持C位段，也简化了外设寄存器操作。</li>
<li>CLZ,RBIT：
计算前导零指令和位反转指令。二者组合使用能实现一些特技UDIV,SDIV：
无符号除法和带符号除法指令。</li>
<li>SEV,WFE,WFI：发送事件，等待事件以及等待中断指令。用于实现多处理器之间的任务同步，还可以进入不同的休眠模式。</li>
<li>MSR,MRS：通向禁地一访问特殊功能寄存器。</li>
</ul>
<h1 id="中断和异常">9. 中断和异常</h1>
<figure>
<img src="/2023/08/04/auto/17/03CortexM3%E5%9F%BA%E7%A1%80/异常表.PNG" alt="alt">
<figcaption aria-hidden="true">alt</figcaption>
</figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/CortexM3权威指南/03CortexM3基础/03CortexM3基础.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>CortexM3权威指南</category>
      </categories>
      <tags>
        <tag>ARM</tag>
      </tags>
  </entry>
  <entry>
    <title>02Verilog语法的基本概念</title>
    <url>/2023/04/29/auto/19/02Verilog%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍Verilog语法的基本概念 <span id="more"></span></p>
<h1 id="verilog语法的基本概念">02Verilog语法的基本概念</h1>
<p>下面介绍几个简单的 Verilog HDL 程序， 从中了解 Verilog
模块的特性。</p>
<h2 id="二选一多路选择器">1. 二选一多路选择器</h2>
<h3 id="通过判断语句实现-行为级">1.1 通过判断语句实现 (行为级)</h3>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> muxtwo(out, a, b, sl);</span><br><span class="line">    <span class="keyword">input</span> a, b, sl;</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line">    <span class="keyword">reg</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (sl <span class="keyword">or</span> a <span class="keyword">or</span> b) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (! sl) out = a;</span><br><span class="line">        <span class="keyword">else</span> out = b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<p>其原理图如下:</p>
<figure>
<img src="/2023/04/29/auto/19/02Verilog%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/mux1.PNG" alt="mux1">
<figcaption aria-hidden="true">mux1</figcaption>
</figure>
<p>当控制信号 sl 为低电平时，输出与输入 a 相同，否则与 b 相同。</p>
<p><code>always @ (sl or a or b)</code> 表示只要 sl 或 a 或 b
其中有一个发生变化时就执行下面的语句。</p>
<h3 id="通过布尔表达式实现">1.2 通过布尔表达式实现</h3>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> muxtwo(out, a, b, sl);</span><br><span class="line">    <span class="keyword">input</span> a, b, sl;</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> nsl, sela, selb;   <span class="comment">// 定义内部连接线</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">assign</span> nsl = ~sl;</span><br><span class="line">    <span class="keyword">assign</span> sela = a &amp; nsl;</span><br><span class="line">    <span class="keyword">assign</span> selb = b &amp; sl;</span><br><span class="line">    <span class="keyword">assign</span> out = sela | selb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<p>原理图如下:</p>
<figure>
<img src="/2023/04/29/auto/19/02Verilog%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/mux2.PNG" alt="mux2">
<figcaption aria-hidden="true">mux2</figcaption>
</figure>
<h3 id="通过与或非基本模块实现-门级">1.3 通过与或非基本模块实现
(门级)</h3>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> muxtwo(out, a, b, sl);</span><br><span class="line">    <span class="keyword">input</span> a, b, sl;</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">not</span> u1(nsl, sl);</span><br><span class="line">    <span class="keyword">and</span> #<span class="number">1</span> u2(sela, a, nsl);</span><br><span class="line">    <span class="keyword">and</span> #<span class="number">1</span> u3(selb, b, sl);</span><br><span class="line">    <span class="keyword">or</span>  #<span class="number">2</span> (out, sela, selb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<p>原理图如下:</p>
<figure>
<img src="/2023/04/29/auto/19/02Verilog%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/mux3.PNG" alt="mux3">
<figcaption aria-hidden="true">mux3</figcaption>
</figure>
<p>通过使用 verilog 内置的与或非门模块来实现，其中 <code>#n</code>
表示门输入到输出的延迟为 n 个单位.</p>
<p>通过工具将 1.1 和 1.2 的形式自动转换为 1.3 的门级形式的模块称为综合
(synthesis).</p>
<p>1.3
模块很容易与某种工艺的基本元件对应起来，再通过布局布线工具自动地转换为某种具体工艺的电路布线结构。</p>
<h2 id="通过连续赋值实现一个-3-位加法器">2. 通过连续赋值实现一个 3
位加法器</h2>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> adder(cout, sum, a, b, cin);</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] a, b;</span><br><span class="line">    <span class="keyword">input</span> cin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">output</span> cout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> {cout, sum} = a + b + cin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>{ } 可实现位拼接，将进位放在高位很自然地就实现了进位</p>
</blockquote>
<p>testbench</p>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] a, b;</span><br><span class="line">    <span class="keyword">reg</span> cin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] sum;</span><br><span class="line">    <span class="keyword">wire</span> cout;</span><br><span class="line"></span><br><span class="line">    adder DUT(cout, sum, a, b, cin);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="built_in">$dumpfile</span>(<span class="string">"wave.vcd"</span>);</span><br><span class="line">        <span class="built_in">$dumpvars</span>;</span><br><span class="line"></span><br><span class="line">        #<span class="number">500</span>;</span><br><span class="line">        <span class="built_in">$finish</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        a   = <span class="number">7</span>;</span><br><span class="line">        b   = <span class="number">0</span>;</span><br><span class="line">        cin = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">forever</span> <span class="keyword">begin</span></span><br><span class="line">            #<span class="number">5</span>;</span><br><span class="line">            a = a - <span class="number">3</span>;</span><br><span class="line">            b = b + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>两个 initial 并行运行, 其中一个 initial 声明输出波形文件，然后延时
500 个单位时间后终止仿真 另一个 initial
先给输入信号初值，然后进入死循环每隔 5 个单位时间改变 a, b 的值</p>
</blockquote>
<h2 id="通过连续赋值实现一个比较器">3. 通过连续赋值实现一个比较器</h2>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> compare(equal, a, b);</span><br><span class="line">    <span class="keyword">input</span> a, b;</span><br><span class="line">    <span class="keyword">output</span> equal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> equal = a == b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="三态门选择器">4. 三态门选择器</h2>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> trist2(out, in, enable);</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line">    <span class="keyword">input</span> in, enable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bufif1</span> mybuf(out, in, enable);</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<p>通过调用 Verilog 语言提供的原语库中现存的三态驱动元件 bufif1
来实现逻辑功能。这种引用现成元件或模块的方法叫做实例化或实例引用。</p>
<figure>
<img src="/2023/04/29/auto/19/02Verilog%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/trist.PNG" alt="trist">
<figcaption aria-hidden="true">trist</figcaption>
</figure>
<p>当然也可以自己定义一个三态门然后在其他模块中实例化:</p>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mytri(out, in, enable);</span><br><span class="line">    <span class="keyword">output</span> out;</span><br><span class="line">    <span class="keyword">input</span> in, enable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> out = enable ? in : <span class="number">'bz</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>'bz</code> 表示高阻态</p>
</blockquote>
<h1 id="verilog-用于模块的测试">Verilog 用于模块的测试</h1>
<p>下面是一个对上面例子中 muxtwo 模块的测试代码:</p>
<figure class="highlight v"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> test ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> a, b, sl;</span><br><span class="line">    <span class="keyword">reg</span> clock;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">wire</span> out;</span><br><span class="line"></span><br><span class="line">    muxtwo m(out, a, b, sl);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">initial</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="built_in">$dumpfile</span>(<span class="string">"wave.vcd"</span>);</span><br><span class="line">        <span class="built_in">$dumpvars</span>;</span><br><span class="line"></span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">        b = <span class="number">0</span>;</span><br><span class="line">        sl = <span class="number">0</span>;</span><br><span class="line">        clock = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 50000 单位时间后停止仿真</span></span><br><span class="line">        #<span class="number">50000</span> <span class="built_in">$finish</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产生一个不断重复地周期为 100 个时钟信号的 clock</span></span><br><span class="line">    <span class="comment">// 也可以简写成 always #50 clock = ~clock;</span></span><br><span class="line">    <span class="keyword">always</span> <span class="keyword">begin</span></span><br><span class="line">        #<span class="number">50</span>;</span><br><span class="line">        clock = ~clock;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成随机 0, 1 信号</span></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clock) <span class="keyword">begin</span></span><br><span class="line">        #<span class="number">1</span> a = <span class="built_in">$random</span> % <span class="number">2</span>;</span><br><span class="line">        #<span class="number">3</span> b = <span class="built_in">$random</span> % <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> #<span class="number">10000</span> sl = !sl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></tbody></table></figure>
<p>其中 muxtwo
可以是行为模块，也可以是布尔逻辑表达式或门级结构模块。</p>
<p>模块 test 可以对 muxtwo
模块进行逐步深人的完整测试。这种测试可以在功能（即行为）级上进行，也可以在逻辑网表（逻辑布尔表达式）和门级结构级上进行。它们分别称为前（RTL）仿真、逻辑网表仿真和门级仿真。</p>
<p>如果门级结构模块与具体的工艺技术对应起来，并加上布局布线引人的延退模型，此时进行的仿真称为布线后仿真，这种仿真与实际电路情况非常接近。可以通过运行仿真器，并观察输人/输出波形图来分析设计的电路模块的运行是否正确。</p>
<h6 id="个人总结">个人总结</h6>
<p>对于端口和赋值的变量类型的总结:</p>
<p>模块本身的端口，输入必须是 wire 类型, 输出可以是 wire/reg 类型</p>
<p>调用模块时，连到输入端口可以是 wire/reg 类型，但是连到输出端口必须是
wire 类型</p>
<p>assign 左值必须是 wire 类型, 右值可以是 wire/reg</p>
<p>always 中左值必须是 reg 类型, 右值可以是 wire/reg</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/Verilog数字系统设计教程/02Verilog语法的基本概念/02Verilog语法的基本概念.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>Verilog数字系统设计教程</category>
      </categories>
      <tags>
        <tag>Verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>信号与系统</title>
    <url>/2023/10/22/auto/20/01%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍信号与系统 <span id="more"></span></p>
<h1 id="连续时间和离散时间信号">1. 连续时间和离散时间信号</h1>
<h2 id="举例与数学表示">1.1 举例与数学表示</h2>
<p>研究以时间作为自变量的信号，可分为两类: 离散时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 和连续时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span></p>
<p>一个离散时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>
可以表示一个其自变量变化本来就是离散的现象。另一方面，有些很重要的离散时间信号则是通过对连续时间信号的采样而得到的。</p>
<h2 id="信号能量与功率">1.2 信号能量与功率</h2>
<p>在很多应用中，所考虑的信号是直接与在某一物理系统中具有功率和能量的一些物理量有关。</p>
<p>通过考察电阻瞬时功率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.814ex;" xmlns="http://www.w3.org/2000/svg" width="23.652ex" height="2.771ex" role="img" focusable="false" viewBox="0 -864.9 10454.4 1224.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1253,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1919.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2975.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(3460.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3849.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4210.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(4599.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4944.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5333.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5694.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6361.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(7417.1,0)"><g data-mml-node="mn" transform="translate(311.6,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><rect width="736.7" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(8393.8,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9315.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9704.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10065.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> ，对任何连续时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 或离散时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 采用类似的功率和能量的术语。这时在
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="10.46ex" height="1.778ex" role="img" focusable="false" viewBox="0 -636 4623.2 786"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1075.3,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(2131.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2769.9,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="msub" transform="translate(3825.7,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span>
内的总能量对于一个连续时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
来说就定义为</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.268ex;" xmlns="http://www.w3.org/2000/svg" width="12.243ex" height="5.731ex" role="img" focusable="false" viewBox="0 -1530.7 5411.6 2533.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1046.4,1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="TeXAtom" transform="translate(589,-896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1827,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2105,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2677,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3066,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3427,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(3816,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(4530.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5050.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></p>
<p>这里 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="2.552ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 1128 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(850,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></span> 记作 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></span> （可能为复数）的模。其平均功率除以
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="6.375ex" height="1.756ex" role="img" focusable="false" viewBox="0 -626 2817.6 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1019.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2020,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></span> 就可得到。</p>
<p>相类似，在 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="11.541ex" height="1.778ex" role="img" focusable="false" viewBox="0 -636 5101.2 786"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1314.3,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(2370.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3008.9,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="msub" transform="translate(4064.7,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span> 内的离散时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>
的总能量就是</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.842ex;" xmlns="http://www.w3.org/2000/svg" width="10.395ex" height="6.416ex" role="img" focusable="false" viewBox="0 -1579.6 4594.6 2835.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo" transform="translate(131.7,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(1378,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="TeXAtom" transform="translate(487.2,1167.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1874,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(2152,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2724,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3002,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3602,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="msup" transform="translate(3880,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>将其除以 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="11.353ex" height="1.846ex" role="img" focusable="false" viewBox="0 -666 5018 816"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1258.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2259,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3517.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4518,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>
就可以得到该区间内的平均功率。</p>
<p>当我们关心无穷区间内信号的能量和功率时，上述式子可写为</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.159ex;" xmlns="http://www.w3.org/2000/svg" width="41.915ex" height="5.704ex" role="img" focusable="false" viewBox="0 -1566.8 18526.4 2521.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(1805.9,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(94.5,783) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></g><g data-mml-node="munder" transform="translate(2861.7,0)"><g data-mml-node="mo" transform="translate(261.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-645.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1704,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5051.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(6107.2,0)"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1046.4,1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(589,-896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7960.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(8238.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(8810.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(9199.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(9560.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(9949.8,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(10664.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(11184.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11823.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msubsup" transform="translate(12878.9,0)"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1046.4,1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(589,-896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(14941.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(15219.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(15791.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(16180.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(16541.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(16930.8,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(17645.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(18165.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.846ex;" xmlns="http://www.w3.org/2000/svg" width="40.112ex" height="6.767ex" role="img" focusable="false" viewBox="0 -1733 17729.4 2990.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(1805.9,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(94.5,783) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></g><g data-mml-node="munder" transform="translate(2861.7,0)"><g data-mml-node="mo" transform="translate(326.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-650) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1888,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5181.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(6237.3,0)"><g data-mml-node="mo" transform="translate(354.2,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1100) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(487.2,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(8556.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(8834.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(9406.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(9684.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10284.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="msup" transform="translate(10562.4,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(11554.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(12610.6,0)"><g data-mml-node="mo" transform="translate(393.8,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1050) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(487.2,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15008.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(15286.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(15858.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(16136.8,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(16736.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="msup" transform="translate(17014.8,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>注意，对某些信号的积分或求和可能不收敛，譬如若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 或 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>
在全部时间内都为某一非零的常数值就是这样。这样的信号具有无限的能量，而
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.737ex" height="1.895ex" role="img" focusable="false" viewBox="0 -680 3861.7 837.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1805.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2861.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span>
的信号具有有限的能量。</p>
<p>关于在无限区间内的平均功率，分别定义为</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.159ex;" xmlns="http://www.w3.org/2000/svg" width="30ex" height="5.704ex" role="img" focusable="false" viewBox="0 -1566.8 13260.1 2521.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(1709.9,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(94.5,783) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></g><g data-mml-node="munder" transform="translate(2765.7,0)"><g data-mml-node="mo" transform="translate(261.5,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-645.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1704,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4955.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(6011.2,0)"><g data-mml-node="mn" transform="translate(572,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><rect width="1404" height="60" x="120" y="220"></rect></g><g data-mml-node="msubsup" transform="translate(7821.9,0)"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1046.4,1088.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(589,-896.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(9675.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(9953.5,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(10525.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10914.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11275.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msup" transform="translate(11664.5,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(12379.1,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(12899.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.846ex;" xmlns="http://www.w3.org/2000/svg" width="33.923ex" height="6.767ex" role="img" focusable="false" viewBox="0 -1733 14994.1 2990.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="REL" transform="translate(1805.9,0)"><g data-mml-node="mover"><g data-mml-node="TeXAtom" data-mjx-texclass="OP"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(94.5,783) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"></path></g></g></g></g><g data-mml-node="munder" transform="translate(2861.7,0)"><g data-mml-node="mo" transform="translate(326.6,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-650) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(888,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1888,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5181.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(6237.3,0)"><g data-mml-node="mn" transform="translate(1525.2,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1610.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2610.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="3310.4" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(9954.5,0)"><g data-mml-node="mo" transform="translate(354.2,0)"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-1100) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1378,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(487.2,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12273.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(12551.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(13123.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(13401.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14001.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="msup" transform="translate(14279.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mn" transform="translate(311,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></span></p>
<p>利用这些定义就可区分三种重要的信号:</p>
<ol type="1">
<li>信号具有有限总能量，即 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.737ex" height="1.895ex" role="img" focusable="false" viewBox="0 -680 3861.7 837.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1805.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2861.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span> 这种信号的平均功率必须为零，因为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.737ex" height="1.895ex" role="img" focusable="false" viewBox="0 -680 3861.7 837.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1805.9,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2861.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span>，这时显然 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="21.879ex" height="2.89ex" role="img" focusable="false" viewBox="0 -932.4 9670.4 1277.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1709.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munder" transform="translate(2765.7,0)"><g data-mml-node="mo"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1422,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1704,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g><g data-mml-node="mfrac" transform="translate(6316.3,0)"><g data-mml-node="msub" transform="translate(220,451.6) scale(0.707)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mrow" transform="translate(334.6,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><rect width="1280.5" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8114.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9170.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>。一个典型的例子是信号在 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="9.113ex" height="1.819ex" role="img" focusable="false" viewBox="0 -666 4028.1 804"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(777.8,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mi" transform="translate(1833.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2472.3,0)"><path data-c="2A7D" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM94 170Q102 172 104 172Q110 171 254 103T535 -30T678 -98Q694 -106 694 -118Q694 -136 676 -138H670L382 -2Q92 135 90 137Q83 142 83 154Q84 164 94 170Z"></path></g><g data-mml-node="mn" transform="translate(3528.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 内其值为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>, 而在此之外为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，这时 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="16ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 7072 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1805.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2861.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3361.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3806.3,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(5516.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6572,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span></li>
<li>平均功率 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.24ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1432.1 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></g></svg></mjx-container></span> 有限的信号
显然，如果 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="7.388ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 3265.7 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1709.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(2765.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 就必然有
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.737ex" height="1.895ex" role="img" focusable="false" viewBox="0 -680 3861.7 837.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1805.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2861.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span>。例如常数信号
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.058ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3561.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2005.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3061.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container></span> 就具有无限能量，但平均功率
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="8.52ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 3765.7 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g><g data-mml-node="mo" transform="translate(1709.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2765.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span></li>
<li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.24ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1432.1 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="3.457ex" height="1.895ex" role="img" focusable="false" viewBox="0 -680 1528.1 837.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></g></svg></mjx-container></span> 都不是有限的</li>
</ol>
<h1 id="自变量的变换">2. 自变量的变换</h1>
<h2 id="自变量变换举例">2.1 自变量变换举例</h2>
<p>本节只涉及自变量简单的变换，也就说时间轴的变换。</p>
<p>对于某一个已知信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，通过自变量变换以求得一个形式如
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.365ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4139.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mi" transform="translate(1601,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2184.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3184.4,0)"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(3750.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
的信号。这样一种由自变量变换所得到的信号除了有一个线性的扩展（若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.603ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 2918.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(807,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1362.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(2418.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>）或压缩 (<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="6.603ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 2918.6 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(807,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1362.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(2418.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>)，时间上的反转（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2362.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>）及移位（<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="5.429ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 2399.6 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g><g data-mml-node="mo" transform="translate(843.8,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(1899.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>）外，仍旧保持有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 的形状。</p>
<p>例如对信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 进行如下变换</p>
<ol type="1">
<li>时移， <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.417ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3720.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1544.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(2544.4,0)"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(394,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g><g data-mml-node="mo" transform="translate(3331.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
可理解为将信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 延迟 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="1.804ex" height="1.791ex" role="img" focusable="false" viewBox="0 -626 797.6 791.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mn" transform="translate(394,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span> 到达</li>
<li>时间反转，以 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.965ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2194.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(638.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1694.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 轴反转 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.129ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2267 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(850,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1628,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1989,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 可理解为将信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 的倒放</li>
<li>尺度变换， <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.002ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2211 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(961,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(1461,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1822,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
可理解为将信号两倍速播放</li>
</ol>
<h2 id="周期信号">2.2 周期信号</h2>
<p>一个连续时间的周期信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
具有这样的性质，即存在一个正值 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span>，对全部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span> 来说，有</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 31.561ex;"><svg style="vertical-align: -0.566ex; min-width: 31.561ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3341 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3044.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3616.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4005.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4588.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5589,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(6293,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:2.2.1"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>换句话说，当一个信号时移 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span>
后其值不变，这时就说 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
是一个周期信号，周期为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 。</p>
<p>如果 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 是周期的，周期为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span>，那么对全部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span> 和任意整数 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 来说就有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.104ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 7560 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3044.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3616.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4005.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4588.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5589,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6467,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(7171,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，由此 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 对于周期 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="13.831ex" height="1.971ex" role="img" focusable="false" viewBox="0 -677 6113.3 871"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(1204,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1648.7,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(2148.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(2852.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3297.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(3797.3,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(4501.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(4946,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5390.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5835.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container></span> 等等都是周期的。
对于使式子 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.412ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(2445,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 成立的最小正值
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 称为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 的<strong>基波周期 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.309ex" height="1.906ex" role="img" focusable="false" viewBox="0 -677 1020.6 842.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span></strong> 。</p>
<p>当 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
为一常数的情况下，基波周期无定义，因为这时对任意 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 来说 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 都是周期的（所以不存在最小的正值
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span>）。</p>
<h5 id="离散时间信号">离散时间信号</h5>
<p>在离散时间下可类似地定义出周期信号：如果一个离散时间信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 时移一个 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span> 后其值不变，即对全部 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container></span> 值有</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 32.054ex;"><svg style="vertical-align: -0.566ex; min-width: 32.054ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3450 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2005.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3061.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3633.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3911.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4733.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5734,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(6622,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:2.2.2"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>则 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 是周期的，周期为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span>
为某一个正整数。</p>
<p>若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.412ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(2445,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 式成立，那么 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span> 对于周期 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="15.08ex" height="1.984ex" role="img" focusable="false" viewBox="0 -683 6665.3 877"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1388,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1832.7,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(2332.7,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3220.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3665.3,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mi" transform="translate(4165.3,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(5053.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5498,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(5942.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6387.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g></g></g></svg></mjx-container></span> 也都是周期的，其中使
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.412ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(2445,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
式成立的最小正值就是它的<strong>基波周期 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.804ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 1239.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(836,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span></strong> 。</p>
<h2 id="奇偶性">2.3 奇偶性</h2>
<p>信号的另一种有用的性质是在时间反转之下有关信号的对称性问题。</p>
<p>如果一个信号 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 或 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.91ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1728 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span>，以原点为轴反转后不变，就称其为偶信号。即</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 28.963ex;"><svg style="vertical-align: -0.566ex; min-width: 28.963ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="2766.8 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3044.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3616.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(4005.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4783.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5144.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:2.3.1"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 29.04ex;"><svg style="vertical-align: -0.566ex; min-width: 29.04ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="2783.8 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2005.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3061.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3633.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(3911.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4689.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5289.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:2.3.2"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>如果有</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 30.723ex;"><svg style="vertical-align: -0.566ex; min-width: 30.723ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3155.8 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3044.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3822.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4394.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(4783.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5561.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5922.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:2.3.3"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 30.8ex;"><svg style="vertical-align: -0.566ex; min-width: 30.8ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="3172.8 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(850,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2005.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3061.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3839.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4411.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(4689.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5467.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6067.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:2.3.4"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>就称该信号为奇信号。一个奇信号在 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.965ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2194.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(638.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1694.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 或 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2433.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 必须为
0，因为根据定义 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.148ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5811.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(961,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1461,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2127.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3183.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3961.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4533.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(4922.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(5422.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>，而
<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.334ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3683.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(961,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(1461,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2127.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3183.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 时才满足。</p>
<p>任何信号都能分解为奇偶信号之和</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="27.649ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 12221 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3044.6,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(3808.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(4293.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(4793.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5365.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5754.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(6115.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6504.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(7226.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8227,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(8990,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(9510,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(10010,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(10582,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10971,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11332,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11721,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container></span></p>
<p>其中，偶信号、奇信号分别为</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="27.629ex" height="4.588ex" role="img" focusable="false" viewBox="0 -1342 12212 2028"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1249,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(1749,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2321,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2710,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3071,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3460,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(4237.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5293.6,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6233.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(6511.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7083.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7472.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7833.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8444.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9445,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(10017,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(10406,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(11184,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11545,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11934,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="27.706ex" height="4.588ex" role="img" focusable="false" viewBox="0 -1342 12246 2028"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(1283,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mi" transform="translate(1783,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2355,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2744,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(3105,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3494,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="mo" transform="translate(4271.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5327.6,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6267.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(6545.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7117.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7506.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7867.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8478.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9479,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(10051,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(10440,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(11218,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(11579,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11968,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></span></p>
<h1 id="指数信号与正弦信号">3. 指数信号与正弦信号</h1>
<p>下面探讨一些典型信号，这些典型信号经常作为构造其他信号的基本信号单元，包括复指数信号（正弦信号）、单位脉冲与单位阶跃信号。</p>
<h2 id="连续时间复指数信号与正弦信号">3.1
连续时间复指数信号与正弦信号</h2>
<p>连续时间复指数信号具有如下形式</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 27.717ex;"><svg style="vertical-align: -0.685ex; min-width: 27.717ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.501ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -802.8)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 802.8) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="2491.4 -802.8 1 1105.6"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,-52.8)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3044.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="msup" transform="translate(3804.6,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -802.8 1 1105.6"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:3.1.0" transform="translate(0,697.2)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>其中，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.719ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 760 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span>
一般为复数，根据这两个参数值的不同，复指数信号具有不同的特征。</p>
<h5 id="实指数信号">实指数信号</h5>
<p>若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.719ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 760 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span> 都是实数，这时 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 就称为实指数信号。此时</p>
<ol type="1">
<li>若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2362.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，则 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 随 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span>
的增加而指数增长。这类信号可用来描述原子弹爆炸或复杂化学反应等很多不同的物理过程。</li>
<li>若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2362.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，则 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 随 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span>
的增加而指数衰减。这类信号可用来描述放射性衰变、RC电路以及有阻尼的机械系统的响应等各种现象。</li>
<li>对于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.345ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2362.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span>，则 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 就为一常数。</li>
</ol>
<h5 id="周期指数和正弦信号">周期指数和正弦信号</h5>
<p>第二种重要的复指数信号是将 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.197ex" height="1.02ex" role="img" focusable="false" viewBox="0 -441 529 451"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g></g></svg></mjx-container></span>
限制为纯虚函数，特别是考虑如下信号</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 27.654ex;"><svg style="vertical-align: -0.713ex; min-width: 27.654ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.557ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -815.2)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 815.2) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="2477.6 -815.2 1 1130.4"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,-65.2)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3044.6,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -815.2 1 1130.4"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:3.1.1" transform="translate(0,684.8)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>该信号的一个重要性质是它是周期信号。证明如下</p>
<blockquote>
<p>如果存在一个 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 使 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="15.278ex" height="2.207ex" role="img" focusable="false" viewBox="0 -893.3 6752.8 975.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2188.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3244.1,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1564.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1953.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2314.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3092.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(3796.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container></span> 成立，则 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.871ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 就是周期的 为此 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="20.149ex" height="2.207ex" role="img" focusable="false" viewBox="0 -893.3 8905.9 975.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1564.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1953.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2314.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3092.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(3796.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3786.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(4842.2,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="msup" transform="translate(6752.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></g></svg></mjx-container></span>
则必须有 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.02ex" height="2.09ex" role="img" focusable="false" viewBox="0 -841.7 3986.7 923.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2430.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3486.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.781ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6975.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1430.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2486.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2986.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3430.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4002.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4391.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4752.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5419.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(6475.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span>， 这时对任何 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 值都是周期的； 若 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="6.756ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 2986.1 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1430.3,0)"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g><g data-mml-node="mn" transform="translate(2486.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></span> 则使 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="9.02ex" height="2.09ex" role="img" focusable="false" viewBox="0 -841.7 3986.7 923.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2430.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3486.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span> 成立的最小正 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.593ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 704 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></svg></mjx-container></span> 值，即基波周期 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.309ex" height="1.906ex" role="img" focusable="false" viewBox="0 -677 1020.6 842.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container></span> 应为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.236ex;" xmlns="http://www.w3.org/2000/svg" width="8.904ex" height="3.193ex" role="img" focusable="false" viewBox="0 -864.9 3935.8 1411.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mn" transform="translate(617,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1298.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2354.1,0)"><g data-mml-node="mrow" transform="translate(412.5,394) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-370) scale(0.707)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1336.6,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="1341.7" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span> 可见 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.323ex" height="1.904ex" role="img" focusable="false" viewBox="0 -830.4 1910.6 841.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1564.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span> 和 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.567ex" height="1.904ex" role="img" focusable="false" viewBox="0 -830.4 2460.7 841.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(1190,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(2342.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container></span>
都是具有同一基波周期的周期信号</p>
</blockquote>
<p>和周期复指数信号密切有关的一种信号是正弦信号</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 37.252ex;"><svg style="vertical-align: -0.566ex; min-width: 37.252ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="2.262ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -750)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(3634,0) translate(-3634,0)"><g transform="translate(0 750) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="4598.8 -750 1 1000"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(961,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1988.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3044.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(3794.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(4227.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4712.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(5181.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5570.6,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(6629.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7212.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8212.6,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(8808.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="2834 -750 1 1000"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:3.1.2"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(389,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(889,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1167,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1667,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1945,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(2445,0)"></path></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p>
<p>利用欧拉关系，复指数信号可以用与其相同基波周期的正弦信号来表示，即</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.462ex;" xmlns="http://www.w3.org/2000/svg" width="23.648ex" height="2.453ex" role="img" focusable="false" viewBox="0 -880.4 10452.2 1084.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="msub" transform="translate(412,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1470.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2121.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3177.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3610.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4095.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="msub" transform="translate(4564.7,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(5623.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(6206.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7206.7,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(7618.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(8087.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8432.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(9032.7,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(10091.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container></span></p>
<p>而 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.412ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2834 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1667,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(278,0)"></path></g><g data-mml-node="mo" transform="translate(2445,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span>
式的正弦信号也能用相同基波周期的复指数信号来表示，即</p>
<p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="41.563ex" height="4.701ex" role="img" focusable="false" viewBox="0 -1392 18370.7 2078"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(1183,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1668,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2137,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2526,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(3584.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4167.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5168,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(5764,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6430.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(7486.6,0)"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(345,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="950" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(8676.6,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(412,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(801,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(1859.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2220.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2998.6,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(3594.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12264.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(13264.8,0)"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mn" transform="translate(345,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="950" height="60" x="120" y="220"></rect></g><g data-mml-node="msup" transform="translate(14454.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mo" transform="translate(1190,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1579,0)"><g data-mml-node="mi"><path data-c="1D714" d="M495 384Q495 406 514 424T555 443Q574 443 589 425T604 364Q604 334 592 278T555 155T483 38T377 -11Q297 -11 267 66Q266 68 260 61Q201 -11 125 -11Q15 -11 15 139Q15 230 56 325T123 434Q135 441 147 436Q160 429 160 418Q160 406 140 379T94 306T62 208Q61 202 61 187Q61 124 85 100T143 76Q201 76 245 129L253 137V156Q258 297 317 297Q348 297 348 261Q348 243 338 213T318 158L308 135Q309 133 310 129T318 115T334 97T358 83T393 76Q456 76 501 148T546 274Q546 305 533 325T508 357T495 384Z"></path></g><g data-mml-node="mn" transform="translate(655,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(2637.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2998.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3776.6,0)"><path data-c="1D719" d="M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z"></path></g><g data-mml-node="mo" transform="translate(4372.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container></span></p>
<h1 id="单位冲激与单位阶跃函数">4. 单位冲激与单位阶跃函数</h1>
<h1 id="连续时间和离散时间系统">5. 连续时间和离散时间系统</h1>
<h1 id="基本系统性质">6. 基本系统性质</h1>
<h4 id="参考">参考</h4>
<ul>
<li>https://zhuanlan.zhihu.com/p/104219270?utm_id=0</li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/信号与系统/01信号与系统/01信号与系统.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>信号与系统</category>
      </categories>
      <tags>
        <tag>信号与系统</tag>
      </tags>
  </entry>
  <entry>
    <title>02编译和链接</title>
    <url>/2023/03/02/auto/23/02%E7%BC%96%E8%AF%91%E5%92%8C%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍编译器是如何编译和链接程序的 <span id="more"></span></p>
<h4 id="预编译">1. 预编译:</h4>
<pre><code>gcc -E hello.c -o hello.i</code></pre>
<p>主要工作如下:</p>
<ul>
<li>删除所有 <code>#define</code> 展开所有宏定义</li>
<li>处理所有条件编译, 比如 <code>#if</code>, <code>#elif</code>,
<code>#else</code>, <code>#endif</code></li>
<li>处理 <code>#include</code>,
递归地将被包含地文件插入到该指令位置</li>
<li>删除所有注释</li>
<li>添加行号和文件名标识以便调试和编译出错显示</li>
<li>保留所有 <code>#pragram</code> 编译指令</li>
</ul>
<p>当我们无法确定宏定义或头文件是否正确时可直接查看预编译输出得到结果</p>
<h4 id="编译">2. 编译</h4>
<pre><code>gcc -S hello.i -o hello.s
gcc -S hello.c -o hello.s</code></pre>
<p>编译分为</p>
<ul>
<li>词法分析, 通过一个扫描器 (Scanner) 输出一个个有意义的记号 (Tokens),
利用一个叫 lex 程序可简单地实现该功能</li>
<li>语法分析, 对扫描器产生地记号进行语法分析, 生成语法树,
其实现可参考数据结构与算法里的二叉树部分</li>
<li>语义分析, 对语法树每个节点进行语义分析, 对类型做隐式转换等</li>
<li>中间代码生成, 该中间代码与机器代码无关, 至此编译器前端工作完成,
后续由编译器后端完成代码的处理和优化</li>
<li>目标代码生成与优化, 该部分由编译器后端完成, 包括代码生成器和优化器,
现代 CPU 的复杂, 导致编译器指令生成过程愈加复杂</li>
</ul>
<h4 id="汇编">3. 汇编</h4>
<pre><code>as hello.s -o hello.o
gcc -c hello.s -o hello.o</code></pre>
<p>当然也可以直接使用 gcc 从 C 源文件直接到目标文件</p>
<pre><code>gcc -c hello.c -o hello.o</code></pre>
<h4 id="链接">4. 链接</h4>
<p>每一个独立的 .c 文件都将被编译生成一个独立的 .o 目标文件,
这些目标文件可以被看做是一个个独立的模块, 这些模块之间的通信有两种:</p>
<ul>
<li>一种是模块间的函数调用</li>
<li>另一种是模块间的变量访问</li>
</ul>
<p>这两种方式都可归结为模块间符号 (Symbol) 的引用,
而链接的主要工作就是把各个模块之间相互引用部分都处理好,
使得各个模块之间能够正确地衔接.</p>
<p>链接过程主要包括<strong>地址和空间分配</strong>,
<strong>符号决议</strong>. 和<strong>重定位</strong>等步骤.</p>
<p>例如:</p>
<pre><code>ld -static crt1.o crti.o crtbeginT.o hello.o -start-group -lgcc -lc -end-group crtend.o crtn.o </code></pre>
<p>除了我们自己编写地 hello.o 目标文件外, 还需链接运行时库
<code>crt*.o</code> 和 C 标准库 <code>libc.a</code> 等才能运行,
这些库其实也是一组目标文件,
人们为了方便将它们打包存放到了连接器能查找的环境变量中</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/程序员的自我修养/02编译和链接.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>编译</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>04 函数</title>
    <url>/2023/03/12/auto/18/04%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 JavaScript 函数 <span id="more"></span></p>
<p>JavaScript
设计得最出色的就是它的函数的实现。它几乎接近于完美。但是，想必你也能预料到，JavaScript
的函数也存在瑕症。</p>
<p>函数包含一组语句，它们是 JavaScript
的基础模块单元，用于代码复用、信息隐藏和组合调用。</p>
<p>函数用于指定对象的行为。一般来说，所谓编程，就是将一组需求分解成一组函数与数据结构的技能。</p>
<h1 id="函数对象">函数对象</h1>
<p>JavaScript 中的函数就是对象。</p>
<p>对象是 “名/值”
对的集合并拥有一个连到原型对象的隐藏连接。对象字面量产生的对象连接到
Object.prototype。函数对象连接到 Function.prototype （该原型本身连接到
Object.prototype)，每个函数在创建时会附加两个隐藏属性：函数的上下文和实现函数行为的代码。</p>
<p>每个函数对象在创建时也随配有一个 prototype 属性。它的值是一个拥有
construetor 属性且值为该函数的对象。这和隐藏连接到 Function.prototype
完全不同。这个令人费解的构造过程的意义将会在下个章节中揭示。</p>
<p>因为函数是对象，所以它们可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。而且，因为函数是对象，所以函数可以拥有方法。</p>
<p>函数的与众不同之处在于它们可以被调用。</p>
<blockquote>
<p>注：JavaScript 创建一个函数对象时，会给该对象设置一个 “call” 属性。当
JavaScript 调用一个函数时，可理解为调用此函数的 “调用” 属性。</p>
</blockquote>
<h1 id="函数字面量">函数字面量</h1>
<p>函数对象通过函数字面量来创建：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个名为 add 的变量，并用来把两个数字相加的函数赋值给它</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">a, b</span>) {</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>函数字面量包括 4 个部分。</p>
<ul>
<li><p>第 1 个部分是保留字 function。</p></li>
<li><p>第 2
个部分是函数名，它可以被省略。函数可以用它的名字来递归地调用自己。此名字也能被调试器和开发工具用来识别函数。如果没有给函数命名，比如上面这个例子，它被称为匿名函数（anonymous）。</p></li>
<li><p>第 3
个部分是包围在圆括号中的一组参数。多个参数用逗号分隔。这些参数的名称将被定义为函数中的变量。它们不像普通的变量那样将被初始化为
undefined，而是在该函数被调用时初始化为实际提供的参数的值。</p></li>
<li><p>第 4
个部分是包围在花括号中的一组语句。这些语句是函数的主体，它们在函数被调用时执行。</p></li>
</ul>
<p>函数字面量可以出现在任何允许表达式出现的地方。函数也可以被定义在其他函数中。一个内部函数除了可以访问自己的参数和变量，同时它也能自由访问把它嵌套在其中的父函数的参数与变量。</p>
<p>通过函数字面量创建的函数对象包含一个连到外部上下文的连接。这被称为<strong>闭包</strong>（closure）。它是
JavaScript 强大表现力的来源。</p>
<h1 id="调用">调用</h1>
<p>调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。</p>
<p>调用运算符是跟在任何产生一个函数值的表达式之后的一对圆括号。圆括号内可包含零个或多个用逗号隔开的表达式。每个表达式产生一个参数值。每个参数值被赋予函数声明时定义的形式参数名。当实际参数（arguments）的个数与形式参数（parameters）的个数不匹配时，不会导致运行时错误。</p>
<p>如果实际参数值过多了，超出的参数值会被忽略。如果实际参数值过少，缺失的值会被替换为
undefined。对参数值不会进行类型检查：任何类型的值都可以被传递给任何参数。</p>
<p>除了声明时定义的形式参数，每个函数还接收两个附加的参数：this 和
arguments （注：函数对象的 apply 方法就是接收这两个参数）。参数 this
在面向对象编程中非常重要，它的值取决于调用的模式。</p>
<p>在 JavaScript 中一共有 4
种调用模式：<strong>方法调用模式</strong>、<strong>函数调用模式</strong>、<strong>构造器调用模式</strong>和
<strong>apply 调用模式</strong>。这些模式在如何初始化关键参数 this
上存在差异。</p>
<blockquote>
<p>注：即调用时 this
参数的值应该怎么取：三个自动（隐式赋值），一个手动（主动调用 call
方法提供 this 参数）。</p>
</blockquote>
<h4 id="方法调用模式">1) 方法调用模式</h4>
<p>当一个函数被保存为对象的一个属性时，我们称它为一个方法。如果调用表达式包含一个提取属性的动作（即包含一个
<code>.</code> 点表达式或 <code>[subscript]</code>
下标表达式），那么它就是被当做一个方法来调用。当一个方法被调用时，this
被绑定到该对象。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 myObject 对象，他有一个 value 属性和一个 increment 方法</span></span><br><span class="line"><span class="comment">// increment 方法接受一个可选的参数。如果参数不是数字，那么默认使用数字 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = {</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params">inc</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> += <span class="keyword">typeof</span> inc === <span class="string">'number'</span> ? inc : <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(myObject.<span class="property">value</span>)    <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">increment</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(myObject.<span class="property">value</span>)    <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure>
<p>方法可以使用 this
访问自己所属的对象，所以它能从对象中取值或对对象进行修改。</p>
<p>this 到对象的绑定发生在调用的时候。这个 “超级” 延迟的绑定（very late
binding）使得函数可以对 this 高度复用。通过 this
可取得它们所属对象的上下文的方法称为公共方法（public method）。</p>
<h4 id="函数调用模式">2) 函数调用模式</h4>
<p>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">var sum = add(<span class="number">3</span>,<span class="number">4</span>)；                 <span class="comment">//sum 的值为 7</span></span><br></pre></td></tr></tbody></table></figure>
<p>以此模式调用函数时，this 被绑定到全局对象。</p>
<p>这是语言设计上的一个错误。倘若语言设计正确，那么当内部函数被调用时，this
应该仍然绑定到外部函数的 this
变量。这个设计错误的后果就是方法不能利用内部函数来帮助它工作，因为内部函数的
this 被绑定了错误的值，所以不能共享该方法对对象的访问权。</p>
<p>幸运的是，有一个很容易的解决方案：如果该方法定义一个变量并给它赋值为
this，那么内部函数就可以通过该变量访问到
this。按照约定，我把该变量命名为 that：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 给 myObject 增加一个 double 方法</span></span><br><span class="line">myObject.<span class="property">double</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;                <span class="comment">// 解决方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> helper = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        that.<span class="property">value</span> = <span class="title function_">add</span>(that.<span class="property">value</span>, that.<span class="property">value</span>);</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="title function_">helper</span>();                       <span class="comment">// 以函数的形式调用 helper</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myObject.<span class="title function_">double</span>();</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(myObject.<span class="property">value</span>);   <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="构造器调用模式">3) 构造器调用模式</h4>
<p>JavaScript
是一门基于原型继承的语言。这意味着对象可以直接从其他对象继承属性。该语言是无类型的。</p>
<p>这偏离了当今编程语言的主流风格。当今大多数语言都是基于类的语言。尽管原型继承极富表现力，但它并未被广泛理解。</p>
<p>JavaScript
本身对它原型的本质也缺乏信心，所以它提供了一套和基于类的语言类似的对象构建语法。有类型化语言编程经验的程序员们很少有愿意接受原型继承的，并且认为借鉴类型化语言的语法模糊了这门语言真实的原型本质。真是两边都不讨好。</p>
<p>如果在一个函数前面带上 new
来调用，那么背地里将会<strong>创建一个新对象，this
会被绑定到该新对象上，同时该新对象会连接到该函数的 prototype
成员</strong>。</p>
<p>new 前缀也会改变 return
语句的行为。我们将会在后面看到更多的相关内容。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个名为 Quo 的构造器函数。它构造一个带有 status 属性的对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Quo</span> = <span class="keyword">function</span> (<span class="params">string</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = string;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 Quo 的所有实例提供一个名为 get_status 的公共方法</span></span><br><span class="line"><span class="title class_">Quo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_status</span> = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">status</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个 Quo 实例</span></span><br><span class="line"><span class="comment">// 注：这相当于</span></span><br><span class="line"><span class="comment">// var this = {};                       // 创建新对象，this 绑定到该新对象 {}</span></span><br><span class="line"><span class="comment">// this.prototype = Quo.prototype;      // 连接到 Quo 的 prototype 成员</span></span><br><span class="line"><span class="comment">// this.status = "confused              // 然后执行函数内容，而这时 this 已经指向新建的那个对象了</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="keyword">new</span> <span class="title class_">Quo</span>(<span class="string">"confused"</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(myQuo.<span class="title function_">get_status</span>());   <span class="comment">// 打印显示 "confused"</span></span><br></pre></td></tr></tbody></table></figure>
<p>一个函数，如果创建的目的就是希望结合 new
前级来调用，那它就被称为构造器函数。按照约定，它们保存在以大写格式命名的变量里。</p>
<p>如果调用构造器函数时没有在前面加上
new，可能会发生非常精糕的事情，既没有编译时警告，也没有运行时警告，所以大写约定非常重要。</p>
<p>我不推荐使用这种形式的构造器函数。在下一章中我们会看到更好的替代方式。</p>
<h4 id="apply-调用模式">4) apply 调用模式</h4>
<p>因为 JavaScript
是一门函数式的面向对象编程语言，所以函数可以拥有方法。</p>
<p>apply 方法让我们构建一个参数数组传递给调用函数。它也允许我们选择 this
的值。apply 方法接收两个参数，第 1 个是要绑定给 this 的值，第 2
个就是一个参数数组。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 示例 1. 构造一个包含两个数字的数组，并将它们相加</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = add.<span class="title function_">apply</span>(<span class="literal">null</span>, array);   <span class="comment">// sum 值为 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 2. 构造一个包含 status 成员的对象</span></span><br><span class="line"><span class="keyword">var</span> statusObject = {</span><br><span class="line">    <span class="attr">status</span>: <span class="string">"A-OK"</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// statusObject 并没有继承自 Quo.prototype，但我们可以在 statusObject 上调用</span></span><br><span class="line"><span class="comment">// get_status 方法，尽管 statusObject 并没有一个名为 get_status 的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// status 值为 'A-OK'</span></span><br><span class="line"><span class="keyword">var</span> = status = <span class="title class_">Quo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_status</span>.<span class="title function_">apply</span>(statusObject);   </span><br></pre></td></tr></tbody></table></figure>
<h1 id="参数">参数</h1>
<p>当函数被调用时，会得到一个“免费”配送的参数，那就是 arguments
数组。函数可以通过此参数访问所有它被调用时传递给它的参数列表，包括那些没有被分配给函数声明时定义的形式参数的多余参数。这使得编写一个无须指定参数个数的函数成为可能：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个将大量的值相加的函数</span></span><br><span class="line"><span class="comment">// 注意该函数内部定义的变量 sum 不会与函数外部定义的 sum 产生冲突</span></span><br><span class="line"><span class="comment">// 该函数只会看到内部的那个变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i += <span class="number">1</span>) {</span><br><span class="line">        sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="title function_">sum</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">23</span>, <span class="number">42</span>))     <span class="comment">// 108</span></span><br></pre></td></tr></tbody></table></figure>
<p>这不是一个特别有用的模式。在第 6
章中，我们将会看到如何给数组添加一个相似的方法来达到同样的效果。</p>
<p>因为语言的一个设计错误，arguments 并不是一个真正的数组。它只是一个
“类似数组（array-like）” 的对象。</p>
<p>arguments 拥有一个 length
属性，但它没有任何数组的方法。我们将在本章结尾看到这个设计错误导致的后果。</p>
<h1 id="返回">返回</h1>
<p>当一个函数被调用时，它从第一个语句开始执行，并在遇到关闭函数体的
<code>}</code> 时结束。然后函数把控制权交还给调用该函数的程序。</p>
<p>return 语句可用来使函数提前返回。当 return
被执行时，函数立即返回而不再执行余下的语句。</p>
<p>一个函数总是会返回一个值。如果没有指定返回值，则返回 undefined。</p>
<p>如果函数调用时在前面加上了 new 前缀，且返回值不是一个对象，则返回
this（该新对象）。</p>
<p><strong>注：实例如下</strong> </p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func.<span class="property">val</span> = <span class="string">"val"</span></span><br><span class="line">func.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">val_in_proto</span> = <span class="string">"val in proto"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">func</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);          <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">val</span>)              <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">val_in_proto</span>);    <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b);          <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">val</span>)              <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">val_in_proto</span>);    <span class="comment">// val in proto</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<blockquote>
<p>new 前缀修饰函数调用，导致隐式创建了一个新对象，this
参数被绑定到该新对象上，同时该新对象会连接到该函数的 prototype
成员。</p>
<p>并且因为返回值不是 object, 因此返回的是该新建的对象，这改变了 return
的行为。若返回值是对象，则 return
行为不会被改变，它会正常返回给定的那个对象。</p>
</blockquote>
<h1 id="异常">异常</h1>
<p>JavaScript
提供了一套异常处理机制。异常是干扰程序的正常流程的不寻常（但并非完全是出乎意料的）的事故。当发现这样的事故时，你的程序应该抛出一个异常：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">a, b</span>) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> a !== <span class="string">'number'</span> || <span class="keyword">typeof</span> b !== <span class="string">'number'</span>) {</span><br><span class="line">        <span class="keyword">throw</span> {</span><br><span class="line">            <span class="attr">name</span>: <span class="string">'TypeError'</span>;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">'add needs number'</span></span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>throw 语句中断函数的执行。它应该抛出一个 exception
对象，该对象包含一个用来识别异常类型的 name 属性和一个描述性的 message
属性。你也可以添加其他的属性。 该 exception 对象将被传递到一个 try
语句的 catch 从句：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个 try_it 函数，以不正确的方式调用之前的 add 函数。</span></span><br><span class="line"><span class="keyword">var</span> try_it = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="title function_">add</span>(<span class="string">"seven"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span> (e) {</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">writeln</span>(e.<span class="property">name</span> + <span class="string">': '</span> + e.<span class="property">message</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">try_it</span>();</span><br></pre></td></tr></tbody></table></figure>
<p>如果在 try 代码块内抛出了一个异常，控制权就会跳转到它的 catch
从句。</p>
<p>一个 try 语句只会有一个捕获所有异常的 catch
代码块。如果你的处理手段取决于异常的类型，那么异常处理器必须检查异常对象的
name 属性来确定异常的类型。</p>
<h1 id="扩充类型的功能">扩充类型的功能</h1>
<p>JavaScript 允许给语言的基本类型扩充功能。通过给 Object.prototype
添加方法，可以让该方法对所有对象都可用。这样的方式对函数、数组、字符串、数字、正则表达式和布尔值同样适用。</p>
<p>举例来说，我们可以通过给 Function.prototype
增加方法来使得该方法对所有函数可用：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span> = <span class="keyword">function</span> (<span class="params">name, func</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>[name] = func;    <span class="comment">// 注：这里的 this 指向的是特定的函数对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>通过给 Function.prototype 增加一个 method
方法，我们下次给对象增加方法的时候就不必键入 prototype
这几个字符，省掉了一点麻烦。</p>
<p>JavaSeript
没有专门的整数类型，但有时候确实只需要提取数字中的整数部分。JavaSeript
本身提供的取整方法有些丑陋。我们可以通过给 Number·prototype 增加一个
integer 方法来改善它。它会根据数字的正负来判断是使用 Math.ceiling 还是
Math.floor。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">method</span>(<span class="string">'integer'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// 注：根据前面介绍的，函数被调用时 this 参数有四种赋值情况，</span></span><br><span class="line">    <span class="comment">// 在这里，该匿名函数注册到 Number 原型后，最终被 num 通过 num.integer 调用</span></span><br><span class="line">    <span class="comment">// 也就说是通过对象调用的，因此其指向就是对象本身，因此这里 this 即数字本身</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>[<span class="variable language_">this</span> &lt; <span class="number">0</span> ? <span class="string">'ceil'</span> : <span class="string">'floor'</span>](<span class="variable language_">this</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((-<span class="number">10</span> / <span class="number">3</span>).<span class="title function_">integer</span>());  <span class="comment">// -3</span></span><br></pre></td></tr></tbody></table></figure>
<p>JavaScript
缺少一个移除字符串首尾空白的方法。这个小疏忽很容易弥补：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">method</span>(<span class="string">'trim'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">"\""</span> + <span class="string">"  neat  "</span>.<span class="title function_">trim</span>() + <span class="string">"\""</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>我们的 trim
方法使用了一个正则表达式。我们将在后面看到更多关于正则表达式的内容。</p>
<p>通过给基本类型增加方法，我们可以极大地提高语言的表现力。因为
JavaScript
原型继承的动态本质，新的方法立刻被赋予到所有的对象实例上，哪怕对象实例是在方法被增加之前就创建好了。</p>
<p>基本类型的原型是公用结构，所以在类库混用时务必小心。一个保险的做法就是只在确定没有该方法时才添加它。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span> = <span class="keyword">function</span> (<span class="params">name, func</span>) {</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>[name]) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>[name] = func;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>另一个要注意的就是 <code>for in</code>
语句用在原型上时表现很槽糕。我们在前面已经看到了几个减轻这个问题的影响的办法：我们可以使用
hasOwnProperty
方法筛选出继承而来的属性，或者我们可以查找特定的类型。</p>
<h1 id="递归">递归</h1>
<p>递归函数就是会直接或间接地调用自身的一种函数。递归是一种强大的编程技术，它把一个问题分解为一组相似的子问题，每一个都用一个寻常解去解决。一般来说，一个递归函数调用自身去解决它的子问题。</p>
<p>递归函数可以非常高效地操作树形结构，比如浏览器端的文档对象模型（DOM）。每次递归调用时处理指定的树的一小段。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义 walk_the_DOM 函数，它从某个指定的节点开始，按 HTML 源码中的顺序</span></span><br><span class="line"><span class="comment">// 访问该树的每个节点。它会调用一个函数，并依次传递每个节点给它。</span></span><br><span class="line"><span class="comment">// walk_the_DOM 调用自身去处理每一个子节点</span></span><br><span class="line"><span class="keyword">var</span> work_the_DOM = <span class="keyword">function</span> <span class="title function_">walk</span>(<span class="params">node, func</span>) {</span><br><span class="line">    <span class="title function_">func</span>(node);</span><br><span class="line">    node = node.<span class="property">firstChild</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) {</span><br><span class="line">        <span class="title function_">walk</span>(node, func);</span><br><span class="line">        node = node.<span class="property">nextSibling</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 getElementsByAttribute 函数。它以一个属性名称字符串</span></span><br><span class="line"><span class="comment">// 和一个可选的匹配值作为参数。</span></span><br><span class="line"><span class="comment">// 它调用 walk_theDOM，传递一个用来查找节点属性名的函数作为参数。</span></span><br><span class="line"><span class="comment">// 匹配的节点会系加到一个结果数组中。</span></span><br><span class="line"><span class="keyword">var</span> getElementsByAttribute = <span class="keyword">function</span> (<span class="params">att, value</span>) {</span><br><span class="line">    <span class="keyword">var</span> retult = [];</span><br><span class="line"></span><br><span class="line">    <span class="title function_">work_the_DOM</span>(<span class="variable language_">document</span>.<span class="property">body</span>, <span class="keyword">function</span> (<span class="params">node</span>) {</span><br><span class="line">        <span class="keyword">var</span> actual = node.<span class="property">nodeType</span> === <span class="number">1</span> &amp;&amp; </span><br><span class="line">            node.<span class="title function_">getElementsByAttribute</span>(att);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> actual == <span class="string">'string'</span> &amp;&amp;</span><br><span class="line">            (actual === value || <span class="keyword">typeof</span> value !== <span class="string">'string'</span>)) {</span><br><span class="line">            retult.<span class="title function_">push</span>(node);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>一些语言提供了尾递归优化。这意味着如果一个函数返回自身递归调用的结果，那么调用的过程会被替换为一个循环，它可以显著提高速度。遗的是，JavaScript
当前并没有提供尾递归优化。深度递归的函数可能会因为堆栈溢出而运行失败。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 构建一个带尾递归的函数，因为它会返回自身调用的结果，所以是尾递归</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript 当前没有对这种形式的递归做出优化</span></span><br><span class="line"><span class="keyword">var</span> factorial = <span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">i, a</span>) {</span><br><span class="line">    a = a || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">factorial</span>(i - <span class="number">1</span>, a * i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="title function_">factorial</span>(<span class="number">4</span>));     <span class="comment">// 24</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="作用域">作用域</h1>
<p>在编程语言中，作用城控制着变量与参数的可见性及生命周期。对程序员来说这是一项重要的服务，因为它减少了名称冲突，并且提供了自动内存管理。</p>
<p>大多数类 C
语言语法的语言都拥有块级作用域。在一个代码块中（括在一对花括号中的一组语句）定义的所有变量在代码块的外部是不可见的。定义在代码块中的变量在代码块执行结束后会被释放掉。这是件好事。</p>
<p>精糕的是，尽管 JavaScript 的代码块语法貌似支持块级作用域，但实际上
JavaScript 并不支持。这个混淆之处可能成为错误之源。</p>
<p>JavaScript
<strong>确实有函数作用域</strong>。那意味着定义在函数中的参数和变量在函数外部是不可见的，而在一个函数内部任何位置定义的变量，在该函数内部任何地方都可见。</p>
<p>很多现代语言都推荐尽可能延迟声明变量。而用在 JavaScript
上的话却会成为糟糕的建议，因为它<strong>缺少块级作用域</strong>。所以，最好的做法是在函数体的顶部声明函数中可能用到的所有变量。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>, b = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bar = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="comment">// 在函数作用域中重新定义 a，外层 a 不会被覆盖</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在函数作用域中定义的全新变量函数返回后不可访问</span></span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在函数作用域中可访问外部变量</span></span><br><span class="line">        b = <span class="number">12</span>;</span><br><span class="line">    };</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">bar</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="string">" "</span> + b);       <span class="comment">// 3 12</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> c);          <span class="comment">// undefined</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)  {</span><br><span class="line">        <span class="comment">// 由于缺少块级作用域，在前面定义的变量 a 将被覆盖</span></span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在块级作用域中定义的全新变量将在整个函数共享，即出了块级作用域变量依旧存在</span></span><br><span class="line">        <span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ES6 引入的 let 解决了块级作用域变量的覆盖和共享问题</span></span><br><span class="line">        <span class="keyword">let</span> d = <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">let</span> e = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + <span class="string">" "</span> + b + <span class="string">" "</span> + d);       <span class="comment">// 6 12 7</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> c);                    <span class="comment">// number</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> e);                    <span class="comment">// undefined</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注：对于没有声明就直接赋值的变量，默认为全局变量，不论这个变量在哪被使用，比如
<code>f = 12;</code></p>
</blockquote>
<h1 id="闭包">闭包</h1>
<p>作用域的好处是内部函数可以访问定义它们的外部函数的参数和变量（除了
this 和 arguments）。这太美妙了。</p>
<p>我们的 getElementsByAttribute 函数可以工作，是因为它声明了一个
results 变量，而传递给 walk_the_DOM 的内部函数也可以访问 results
变量。</p>
<p>一个更有趣的情形是内部函数拥有比它的外部函数更长的生命周期。</p>
<blockquote>
<p>注：例如假设只是注册了一个匿名函数后立刻返回了，而匿名函数引用了外部函数的变量，这时外部函数已经结束返回了，而该匿名函数后来才被调用，那么它引用的那个其内存没被释放，变量还能访问</p>
</blockquote>
<p>之前，我们构造了一个 myObject 对象，它拥有一个 value 属性和一个
increment 方法。假定我们希望保护该值不会被非法更改。</p>
<p>和以对象字面量形式去初始化 myobject
不同，我们通过调用一个函数的形式去初始化
myObject，该函数会返回一个对象字面量。</p>
<p>函数里定义了一个 value 变量。该变量对 increment 和 getValue
方法总是可用的，但函数的作用域使得它对其他的程序来说是不可见的。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = (<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">increment</span>: <span class="keyword">function</span> (<span class="params">inc</span>) {</span><br><span class="line">            value += <span class="keyword">typeof</span> inc === <span class="string">'number'</span> ? inc : <span class="number">1</span>;</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">getValue</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}());</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>前面说过，函数字面量就是一个表达式，该表达式的值为一个函数对象。</p>
<p>这里使用匿名的方式定义了一个函数字面量，然后利用括号将整个函数定义作为表达式整体，即
<code>（表达式）()</code>，而该表达式返回一个函数对象，因此可以直接使用
<code>()</code>
来对匿名函数对象进行调用。从而将函数中的返回的对象直接赋值给
myObject</p>
</blockquote>
<p>我们并没有把一个函数赋值给 myObject。.
我们是把调用该函数后返回的结果赋值给它。注意最后一行的
<code>()</code>。该函数返回一个包含两个方法的对象，并且这些方法继续享有访问
value 变量的特权。</p>
<p>本章之前的 Quo 构造器产生一个带有 status 属性和 get_status
方法的对象。但那看起来并不是十分有趣。为什么要用一个 getter
方法去访问你本可以直接访问到的属性呢？如果 status
是私有属性，它才是更有意义的。所以，让我们定义另一种形式的 quo
函数来做此事：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个名为 quo 的构造器函数</span></span><br><span class="line"><span class="comment">// 它构造出带有 get_status 方法和 status 私有属性的一个对象</span></span><br><span class="line"><span class="keyword">var</span> quo = <span class="keyword">function</span> (<span class="params">status</span>) {</span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">get_status</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个 quo 实例</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="title function_">quo</span>(<span class="string">"amazed"</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myQuo.<span class="title function_">get_status</span>());</span><br></pre></td></tr></tbody></table></figure>
<p>这个 quo 函数被设计成无须在前面加上 new
来使用，所以名字也没有首字母大写。</p>
<p>当我们调用 quo 时，它返回包含 get_status
方法的一个<strong>新对象</strong>。该对象的一个引用保存在 myQuo 中。即使
quo 已经返回了，但 get_status 方法仍然享有访问 quo 对象的 status
属性的特权。</p>
<p>get_status
方法并不是访问该参数的一个副本，它访问的就是该参数本身。这是可能的，因为该函数可以访问它被创建时所处的上下文环境。这被称为<strong>闭包</strong>。</p>
<p>让我们来看一个更有用的例子：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数，它设置一个 DOM 节点为黄色，然后把它渐变为白色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fade = <span class="keyword">function</span> (<span class="params">node</span>) {</span><br><span class="line">    <span class="keyword">var</span> level = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> setp = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">var</span> hex = level.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">        node.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">'#FFFF'</span> + hex + hex;</span><br><span class="line">        <span class="keyword">if</span>(level &lt; <span class="number">15</span>) {</span><br><span class="line">            level += <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(setp, <span class="number">100</span>);</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    <span class="built_in">setTimeout</span>(setp, <span class="number">100</span>);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="title function_">fade</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br></pre></td></tr></tbody></table></figure>
我们调用 fade，把 document.body 作为参数传递给它（HTML

<p>标签所创建的节点）。</p>
<p>fade 函数设置 level 为 l。它定义了一个 step 函数，接着调用
setTimeout，并传递 step 函数和一个时间（100 毫秒）给它。然后它返回，fade
函数结束。</p>
<p>在大约十分之一秒后，step 函数被调用。它把 fade 函数的 level
变量转化为 16 位字符。</p>
<p>接着，它修改 fade 函数得到的节点的背景颜色。然后查看 fade 函数的
level 变量。如果背景色尚未变成白色，那么它增大 fade 函数的 level
变量，接着用 setTimeout 预定让它自己再次运行。</p>
<p>step 函数很快再次被调用。但这次，fade 函数的 level 变量值变成 2。</p>
<p><strong>fade 函数在之前已经返回了，但只要 fade
的内部函数需要，它的变量就会持续保留</strong>。</p>
<p>为了避免下面的问题，理解内部函数能访问外部函数的实际变量而无须复制是很重要的：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 糟糕的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个函数，用错误的方式给一个数组中的节点设置事件处理程序</span></span><br><span class="line"><span class="comment">// 当点击一个节点时，按照预期，应该弹出一个对话框显示节点的序号，</span></span><br><span class="line"><span class="comment">// 但它总是会显示节点的数目。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add_the_handlers = <span class="keyword">function</span> (<span class="params">nodes</span>) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i++) {</span><br><span class="line">        nodes[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">            <span class="title function_">alert</span>(i);</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buttons = (<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> buttons = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"input"</span>);</span><br><span class="line">        btn.<span class="property">type</span> = <span class="string">"button"</span>;</span><br><span class="line">        btn.<span class="property">value</span> = <span class="string">"Button "</span> + i;</span><br><span class="line">        buttons.<span class="title function_">push</span>(btn);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(btn);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> buttons;</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="title function_">add_the_handlers</span>(buttons);</span><br></pre></td></tr></tbody></table></figure>
<p>add_the_handlers
函数的本意是想传递给每个事件处理器一个唯一值（i）。但它未能达到目的，因为事件处理器函数绑定了变量
i 本身，而不是函数在构造时的变量 i 的值。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 改良后的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个函数，用正确的方式给数组中的节点设置事件处理程序</span></span><br><span class="line"><span class="comment">// 点击一个节点，将会弹出一个对话框显示节点的序号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add_the_handlers = <span class="keyword">function</span> (<span class="params">nodes</span>)  {</span><br><span class="line">    <span class="keyword">var</span> helper = <span class="keyword">function</span> (<span class="params">i</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">            <span class="title function_">alert</span>(i);</span><br><span class="line">        };</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i += <span class="number">1</span>) {</span><br><span class="line">        nodes[i].<span class="property">onclick</span> = <span class="title function_">helper</span>(i);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>避免在循环中创建函数，它可能只会带来无谓的计算，还会引起混滑，正如上面那个槽糕的例子。我们可以先在循环之外创建一个辅助函数，让这个辅助函数再返回一个绑定了当前
1 值的函数，这样就不会导致混滑了。</p>
<h6 id="以下是个人理解">以下是个人理解</h6>
<p>第一种方法中只是定义一个匿名函数字面量，并没有实际执行函数。i
没有参与语句执行过程，因此这时字面量中仅仅是对 i 的引用，没有直接取得 i
的值。</p>
<p>倘若赋值过程执行了函数，情况就会不同： </p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add_the_handlers = <span class="keyword">function</span> (<span class="params">nodes</span>) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i++) {</span><br><span class="line">        nodes[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">i</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">                <span class="title function_">alert</span>(i);</span><br><span class="line">            };</span><br><span class="line">        } (i);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>同样是匿名函数，但这次匿名函数不仅仅只是定义，而是定义的同时执行了语句，i
的值被传进去，参与了语句执行过程，这时发生了赋值操作，因此这时 alert(i);
得到的 i 值实际上是匿名函数的参数 i, 这个 i 是复制自每一次循环中的 i
值。</p>
<p>第二种方法只是把上面匿名函数实名化，其原理是一致的。</p>
<p>若把匿名函数中的 i 去掉，这时因为 i
并没有参与语句执行过程，匿名函数中返回的函数也只是字面量定义，没有实际执行。所以点击后
i 值是同一个。</p>
<p>但是若在函数中定义一个变量，并对 i 进行取值操作情况又会有所不同：
</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add_the_handlers = <span class="keyword">function</span> (<span class="params">nodes</span>) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i++) {</span><br><span class="line">        nodes[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">var</span> m = i;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">e</span>) {</span><br><span class="line">                <span class="title function_">alert</span>(m);</span><br><span class="line">            };</span><br><span class="line">        } ();</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>这次因为在赋值过程中 i 参与了执行，m 取得了 i
的当前值并保留在自身函数作用域中，返回的匿名函数字面量定义中再对 m
进行引用，但这次所有 m 值都不同，点击时每次显示的值也就不同了。</p>
<h1 id="回调">回调</h1>
<p>函数使得对不连续事件的处理变得更容易。例如，假定有这么一个序列，由由用户交互行为触发，向服务器发送请求，最终显示服务器的响应。最自然的写法可能会是这样的：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">request = <span class="title function_">prepare_the_request</span>();</span><br><span class="line">response = <span class="title function_">send_request_synchronously</span>(request);</span><br><span class="line"><span class="title function_">display</span>(response);</span><br></pre></td></tr></tbody></table></figure>
<p>这种方式的问题在于，网络上的同步请求会导致客户端进人假死状态。如果网络传输或服务器很慢，响应会慢到让人不可接受。</p>
<p>更好的方式是发起异步请求，提供一个当服务器的响应到达时随即触发的回调函数。异步函数立即返回，这样客户端就不会被阻塞。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">request = <span class="title function_">prepare_the_request</span>();</span><br><span class="line"><span class="title function_">send_request_asynchronously</span>(request, <span class="keyword">function</span> (<span class="params">response</span>) {</span><br><span class="line">    <span class="title function_">display</span>(response);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<p>我们传递一个函数作为参数给 send_request_asynchronously
函数，一且接收到响应，它就会被调用。</p>
<h1 id="模块">模块</h1>
<p>我们可以使用函数和闭包来构造模块。模块是一个提供接口却隐藏状态与实现的函数或对象。通过使用函数产生模块，我们几乎可以完全拼弃全局变量的使用，从而缓解这个
JavaScript 的最为槽糕的特性之一所带来的影响。</p>
<p>举例来说，假定我们想要给 string 增加一个 deentityify
方法。它的任务是寻找字符串中的 HTML
字符实体并把它们替换为对应的字符。这就需要在一个对象中保存字符实体的名字和它们对应的字符。但我们该在哪里保存这个对象呢？</p>
<p>我们可以把它放到一个全局变量中，但全局变量是魔鬼。我们可以把它定义在该函数的内部，但是那会带来运行时的损耗，因为每次执行该函数的时候该字面量都会被求值一次。理想的方式是把它放入一个闭包，而且也许还能提供一个增加更多字符实体的扩展方法：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">method</span>(<span class="string">'deentityify'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> entity = {</span><br><span class="line">        <span class="attr">quot</span>: <span class="string">'"'</span>,</span><br><span class="line">        lt  : <span class="string">'&lt;'</span>,</span><br><span class="line">        gt  : <span class="string">'&gt;'</span>,</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回 deentityify 方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="comment">// 这才是 deentityify 方法。它调用字符串的 replace 方法，</span></span><br><span class="line">        <span class="comment">// 查找 &amp; 开头和 ; 结束的子字符串。如果这些字符可以在字符实体表中找到，</span></span><br><span class="line">        <span class="comment">// 那么就将该字符实体替换为映射表中的值。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(<span class="regexp">/&amp;([^&amp;;]+);/g</span>, <span class="keyword">function</span> (<span class="params">a, b</span>) {</span><br><span class="line">            <span class="keyword">var</span> r = entity[b];</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> r == <span class="string">'string'</span> ? : r : a;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}());</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">'&amp;lt;&amp;quot;&amp;gt;'</span>.<span class="title function_">deentityify</span>());  <span class="comment">// &lt;"&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>请注意最后一行。我们用 ()
运算法立刻调用我们刚刚构造出来的函数。这个调用所创建并返回的函数才是
deentityify 方法。</p>
<p>模块模式利用了函数作用域和闭包来创建被绑定对象与私有成员的关联，在这个例子中，只有
deentityify 方法有权访问字符实体表这个数据对象。</p>
<p><strong>模块模式的一般形式是</strong>：一个定义了私有变量和函数的函数，利用闭包创建可以访问私有变量和函数的特权函数，最后返回这个特权函数，或者把它们保存到一个可访问到的地方。</p>
<p>使用模块模式就可以摒弃全局变量的使用。它促进了信息隐藏和其他优秀的设计实践。对于应用程序的封装，或者构造其他单例
5 对象，模块模式非常有效。</p>
<p>模块模式也可以用来产生安全的对象。假定我们想要构造一个用来产生序列号的对象：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> serial_maker = <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个用来产生唯一字符串的对象。</span></span><br><span class="line">    <span class="comment">// 唯一字符串由两部分组成：前级+序列号。</span></span><br><span class="line">    <span class="comment">// 该对象包含一个设置前级的方法，一个设置序列号的方法</span></span><br><span class="line">    <span class="comment">// 和一个产生唯一字符串的 gensym 方法。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prefix = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> {</span><br><span class="line">        <span class="attr">set_prefix</span>: <span class="keyword">function</span> (<span class="params">p</span>) {</span><br><span class="line">            prefix = <span class="title class_">String</span>(p);</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">set_seq</span>: <span class="keyword">function</span> (<span class="params">s</span>) {</span><br><span class="line">            seq = s;</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">gensym</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">var</span> result = prefix + seq;</span><br><span class="line">            seq += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> seqer = <span class="title function_">serial_maker</span>();</span><br><span class="line">seqer.<span class="title function_">set_prefix</span>(<span class="string">'Q'</span>);</span><br><span class="line">seqer.<span class="title function_">set_seq</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> unique = seqer.<span class="title function_">gensym</span>();        <span class="comment">// unique 是 "Q1000"</span></span><br></pre></td></tr></tbody></table></figure>
<p>seger 包含的方法都没有用到 this 或 that，因此没有办法损害
seqer.。除非调用对应的方法，否则没法改变 prefi×或 seg 的值。seqer
对象是可变的，所以它的方法可能会被替换掉，但替换后的方法依然不能访问私有成员。seqer
就是一组函数的集合，而且那些函数被授予特权，拥有使用或修改私有状态的能力。</p>
<p>如果我们把 seqer.gensym
作为一个值传递给第三方函数，那个函数能用它产生唯一字符串，但却不能通过它来改变
prefix 或 seg 的值。</p>
<h1 id="级联">级联</h1>
<p>有一些方法没有返回值。例如，一些设置或修改对象的某个状态却不返回任何值的方法就是典型的例子。如果我们让这些方法返回
this 而不是
undefined，就可以启用级联。在一个级联中，我们可以在单独一条语句中依次调用同一个对象的很多方法。一个启用级联的
Ajax 类库可能允许我们以这样的形式去编码：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">getElement</span>(<span class="string">'myBoxDiv'</span>)</span><br><span class="line">    .<span class="title function_">move</span>(<span class="number">350</span>, <span class="number">150</span>)</span><br><span class="line">    .<span class="title function_">width</span>(<span class="number">100</span>)</span><br><span class="line">    .<span class="title function_">height</span>(<span class="number">100</span>)</span><br><span class="line">    .<span class="title function_">color</span>(<span class="string">'red'</span>)</span><br><span class="line">    .<span class="title function_">border</span>(<span class="string">'10px outset'</span>)</span><br><span class="line">    .<span class="title function_">padding</span>(<span class="string">'4px'</span>)</span><br><span class="line">    .<span class="title function_">appendText</span>(<span class="string">"Please stand by"</span>)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">'mousedown'</span>, <span class="keyword">function</span> (<span class="params">m</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">startDrag</span>(m, <span class="variable language_">this</span>.<span class="title function_">getNinth</span>(m));</span><br><span class="line">    })</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">'mousemove'</span>, <span class="string">'drag'</span>)</span><br><span class="line">    .<span class="title function_">on</span>(<span class="string">'mouseup'</span>, <span class="string">'stopDrag'</span>)</span><br><span class="line">    .<span class="title function_">later</span>(<span class="number">2000</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">this</span></span><br><span class="line">            .<span class="title function_">color</span>(<span class="string">'yellow'</span>)</span><br><span class="line">            .<span class="title function_">setHTML</span>(<span class="string">"What hath God wraught?"</span>)</span><br><span class="line">            .<span class="title function_">s11de</span>(<span class="number">400</span>, <span class="number">40</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    })</span><br><span class="line">    .<span class="title function_">tip</span>(<span class="string">'This box is resizeable'</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，getElement 函数产生一个对应于 id="myBoxDiv" 的 DOM
元素且给其注入了其他功能的对象。该方法允许我们移动元素，修改它的尺寸和样式，并添加行为。这些方法每一个都返回该对象，所以每次调用返回的结果可以被下一次调用所用。</p>
<p>级联技术可以产生出极富表现力的接口。它也能给那波构造"全能"接口的热潮降降温，一个接口没必要一次做太多事情。</p>
<h1 id="柯里化-局部套用">柯里化 （局部套用）</h1>
<p>函数也是值，从而我们可以用有趣的方式去操作函数值。柯里化允许我们把函数与传递给它的参数相结合，产生出一个新的函数。
</p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add1 = add.<span class="title function_">curry</span>(<span class="number">1</span>); </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="title function_">add1</span>(<span class="number">6</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>add1 是把 1 传递给 add 函数的 curry 方法后创建的一个函数。add1
函数把传递给它的参数的值加 1。JavaScript 并没有 curry 方法，但我们可以给
Function.prototype 扩展此功能：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="title function_">method</span>(<span class="string">'curry'</span>,<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> args = <span class="variable language_">arguments</span>, that = <span class="variable language_">this</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">return</span> that.<span class="title function_">apply</span>(<span class="literal">null</span>, args.<span class="title function_">concat</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">    };</span><br><span class="line">});     <span class="comment">//有些事好像看起来不太对头…</span></span><br></pre></td></tr></tbody></table></figure>
<p>curry
方法通过创建一个保存着原始函数和要被套用的参数的闭包来工作。它返回另一个函数，该函数被调用时，会返回调用原始函数的结果，并传递调用
curry 时的参数加上当前调用的参数。它使用 Array 的 concat
方法连接两个参数数组。</p>
<p>糟糕的是，就像我们先前看到的那样，arguments
数组并非一个真正的数组，所以它并没有 concat
方法。要避开这个问题，我们必须在两个 arguments 数组上都应用数组的 slice
方法。这样产生出拥有 concat 方法的常规数组。 </p><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="title function_">method</span>(<span class="string">'curry'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>, </span><br><span class="line">        args = slice.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>), </span><br><span class="line">        that = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">return</span> that.<span class="title function_">apply</span>(<span class="literal">null</span>, args.<span class="title function_">concat</span>(slice.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>)));</span><br><span class="line">        };</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) {</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add1 = add.<span class="title function_">curry</span>(<span class="number">1</span>); </span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="title function_">add1</span>(<span class="number">6</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="记忆">记忆</h1>
<p>函数可以将先前操作的结果记录在某个对象里，从而避免无谓的重复运算。这种优化被称为记忆。JavaScriptt
的对象和数组要实现这种优化是非常方便的。</p>
<p>比如说，我们想要一个递归函数来计算 Fibonacci 数列。一个 Fibonacci
数字是之前两个 Fibonacci 数字之和。最前面的两个数字是 0 和 1.</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="keyword">function</span> (<span class="params">n</span>) {</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n -<span class="number">2</span>);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i += <span class="number">1</span>) {</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">'// '</span> + i + <span class="string">': '</span> + <span class="title function_">fibonacci</span>(i));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这样是可以工作的，但它做了很多无谓的工作。fibonacci 函数被调用了 453
次。我们调用了 11 次，而它自身调用了 442
次去计算可能已被刚计算过的值。如果我们让该函数具备记忆功能，就可以显著地减少运算量。</p>
<p>我们在一个名为 memo
的数组里保存我们的存储结果，存储结果可以隐藏在闭包中。当函数被调用时，这个函数首先检查结果是否已存在，如果已经存在，就立即返回这个结果。</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">var</span> memo = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">fib</span> (n) {</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'number'</span>) {</span><br><span class="line">            result = <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    };</span><br><span class="line">}();</span><br></pre></td></tr></tbody></table></figure>
<p>这个函数返回同样的结果，但它只被调用了 29 次。我们调用了它 11
次，它调用了自己 18 次去取得之前存储的结果。</p>
<p>我们可以把这种技术推而广之，编写一个函数来帮助我们构造带记忆功能的函数。memoizer
函数取得一个初始的 memo 数组和 formula 函数。它返回一个管理 meno
存储和在需要时调用 formula 函数的 recur 函数。我们把这个 recur
函数和它的参数传递给 formula 函数：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> memoizer = <span class="keyword">function</span> (<span class="params">memo, formula</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">recur</span>(<span class="params">n</span>) {</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> result !== <span class="string">'number'</span>) {</span><br><span class="line">            result = <span class="title function_">formula</span>(recur, n);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibonacci = <span class="title function_">memoizer</span>([<span class="number">0</span>, <span class="number">1</span>], <span class="keyword">function</span> (<span class="params">recur, n</span>) {</span><br><span class="line">    <span class="keyword">return</span> recur (n - <span class="number">1</span>) + recur (n - <span class="number">2</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<p>通过设计这种产生另一个函数的函数，极大地减少了我们的工作量。例如，要产生一个可记忆的阶乘函数，我们只需提供基本的阶乘公式即可：</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = <span class="title function_">memoizer</span>([<span class="number">1</span>, <span class="number">1</span>], <span class="keyword">function</span> (<span class="params">recur, n</span>) {</span><br><span class="line">    <span class="keyword">return</span> n * recur (n - <span class="number">1</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注: 调用函数 memoizer
传了一个匿名数组，该匿名数组在返回的闭包中被引用，生命周期也会变长</p>
</blockquote>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/JavaScript语言精粹/04函数/04函数.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>JavaScript 语言精粹</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>03目标文件里有什么</title>
    <url>/2023/03/02/auto/24/03%E7%9B%AE%E6%A0%87%E6%96%87%E4%BB%B6%E9%87%8C%E6%9C%89%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍编译器生成的目标文件里有什么内容</p>
<span id="more"></span>
<h3 id="目标文件格式">1. 目标文件格式</h3>
<p>目标文件就是源代码编译后但未进行链接的那些中间文件</p>
<p>目标文件与可执行文件、动态库链接库文件、静态链接库文件的内容结构很相似,
因此他们使用相同的文件格式, 例如</p>
<ul>
<li>Windows 的 PE-COFF (Portbale Executable) 格式</li>
<li>Linux 的 ELF (Executable Linkable Format)</li>
</ul>
<p>这两种文件格式都是 COFF (Common file format) 格式的变种.</p>
<blockquote>
<p>目标文件与可执行文件格式的小历史</p>
<p>目标文件与可执行文件格式跟操作系统和编译器密切相关，所以不同的系统平台下会有不同的格式，但这些格式又大同小异，目标文件格式与可执行文件格式的历史几乎是操作系统的发展史。</p>
<p>COFF是由Unix System V Release
3首先提出并且使用的格式规范，后来微软公司基于COFF格式，制定了PE格式标准，并将其用于当时的Windows
NT系统。System V Release 4
在COFF的基础上引入了ELF格式，目前流行的Linux系统也以ELF作为基本可执行文件格式。这也就是为什么目前PE和ELF如此相似的主要原因，因为它们都是源于同一种可执行文件格式COFF。</p>
<p>Unix最早的可执行文件格式为a.out格式，它的设计非常地简单，以至于后来共享库这个概念出现的时候，a.out格式就变得捉襟见肘了。于是人们重新设计了COFF格式来解决这些问题，这个设计非常通用，以至于COFF的继承者到目前还在被广泛地使用。</p>
<p>COFF的主要贡献是在目标文件里面引入了“段”的机制，不同的目标文件可以拥有不同数量及不同类型的“段”。另外，它还定义了调试数据格式。</p>
</blockquote>
<p>对于系统使用的 ELF 格式可归为以下4种类型</p>
<table width="299">
<tbody><tr>
<td>
<b>ELF文件类型</b>
</td>
<td>
<b>说明</b>
</td>
<td>
<b>实例</b>
</td>
</tr>
<tr>
<td>
可重定位文件
</td>
<td>
包含代码和数据, 可以被用来链接成可执行文件或共享目标文件,
静态链接库也可以归为这一类(静态链接库只是把很多目标文件捆绑在一起形成一个文件,
可理解为包含有很多目标文件的文件包)
</td>
<td>
如 Linux 的 .o 文件或 Windows 的 .obj 文件
</td>
</tr>
<tr>
<td>
可执行文件
</td>
<td>
包含了可直接执行的程序, 其代表就是ELF可执行文件, 他们一般没有扩展名
</td>
<td>
比如/bin/bash或Windows 的 .exe
</td>
</tr>
<tr>
<td>
共享目标文件
</td>
<td>
包含代码和数据,
可在以下两种情况下使用。一种是链接器可使用这种文件跟其他可重定位或共享目标文件链接,
产生新的目标文件。第二种是动态链接器可以将这几种共享目标文件与可执行文件结合,
作为进程映像的一部分来运行。
</td>
<td>
比如Linux的.so或Windows 的 .dll
</td>
</tr>
<tr>
<td>
核心转储文件
</td>
<td>
当进程意外终止时,
系统可将该进程的地址空间及终止时的信息转储到核心转储文件
</td>
<td>
比如Linux的 core dump
</td>
</tr>
</tbody></table>
<!-- #### 1. 使用 file 命令查看文件格式 -->
<h3 id="目标文件是什么样子">2. 目标文件是什么样子</h3>
<p>目标文件除指令和数据外还包括链接时所必须的一些信息, 如符号表,
调试信息, 字符串等. 目标文件将这些信息按不同属性以 "节" (Section)
的形式存储 (有时也叫段 Segment).</p>
<p>通常</p>
<ul>
<li>指令被放在<strong>代码段 (Code Section)</strong>, 其常见的段名有
<code>.code</code> 或 <code>.text</code></li>
<li>初始化不为 0 的全局或静态变量放在<strong>数据段 (Data
Section)</strong>, 段名为 <code>.data</code></li>
<li>未初始化或初始化为0的全局或静态变量放在 <strong>.bss (Block Started
by Symbol) 段</strong></li>
</ul>
<p>局部变量不需要在目标文件中声明段,
因为它们的本质其实是随程序执行过程中动态获取和释放的栈内存.
生命周期一般很短.</p>
<p>下面是一个例子 demo.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> gvar_init = <span class="number">84</span>;     <span class="comment">// 全局已初始化变量   --&gt; .data 段</span></span><br><span class="line"><span class="type">int</span> gvar_init_0 = <span class="number">0</span>;    <span class="comment">// 全局初始化为0变量  --&gt; .bss 段</span></span><br><span class="line"><span class="type">int</span> gvar_uninit;        <span class="comment">// 全局未初始化变量   --&gt; .bss 段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码段 --&gt; .text 段</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> svar_init = <span class="number">12</span>;     <span class="comment">// 静态已初始化变量   --&gt; .data 段</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> svar_init_0 = <span class="number">0</span>;    <span class="comment">// 静态初始化为0变量  --&gt; .bss 段</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> svar_uninit;        <span class="comment">// 静态未初始化变量   --&gt; .bss 段</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放在栈中</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码段 --&gt; .text 段</span></span><br><span class="line">    func(gvar_init + svar_init + a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对于未初始化的全局或静态变量,
因为程序加载器在将程序加载到内存时会将它们初始化为 0, 因此那些初始化为 0
的全局或静态变量本质上和未初始化的是一样的, 因此它们都被分到 bss
段中.</p>
<p>另外 bss 段其实只是用来给它们预留个位置而已, 它并没有内容,
因此它在文件中也不占据空间.</p>
<blockquote>
<p>BSS历史</p>
<p>BSS (Block Started by Symbol) 这个词最初是UA-SAP汇编器（United
Aircraft Symbolic Assembly
Program）中的一个伪指令，用于为符号预留一块内存空间。该汇编器由美国联合航空公司于20世纪50年代中期为BM704大型机所开发。</p>
<p>后来BSS这个词被作为关键字引入到了IBM709和7090/94机型上的标准汇编器FAP（Fortran
Assembly
Program），用于定义符号并且为该符号预留给定数量的未初始化空间。</p>
</blockquote>
<p>数据和指令分开带来的好处</p>
<ul>
<li>可设置两个区域的读写权限, 从而防止指令有意或无意地改写代码区</li>
<li>CPU 的 Cache 具有空间局部性, 分开的代码和数据有利于 Cache
命中率</li>
<li>当系统运行该程序的多个副本时, 可以直接复用只读的代码区,
节省空间</li>
</ul>
<h4 id="深入elf文件格式">3. 深入ELF文件格式</h4>
<p>对于前一节 demo.c 我们进行编译</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">gcc -c demo.c -o demo.o</span><br></pre></td></tr></tbody></table></figure>
<p>得到一个 882 字节的目标文件</p>
<h5 id="objdump-命令">objdump 命令</h5>
<p>objdump 工具可查看目标文件的内部结构</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">objdump -h demo.o</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA               LMA               File off  Algn</span><br><span class="line">  0 .text         00000070  0000000000000000  0000000000000000  0000012c  2**4</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE</span><br><span class="line">  1 .data         00000010  0000000000000000  0000000000000000  0000019c  2**4</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">  2 .bss          00000010  0000000000000000  0000000000000000  00000000  2**4</span><br><span class="line">                  ALLOC</span><br><span class="line">  3 .rdata        00000010  0000000000000000  0000000000000000  000001ac  2**4</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br><span class="line">  4 .xdata        00000018  0000000000000000  0000000000000000  000001bc  2**2</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br><span class="line">  5 .pdata        00000018  0000000000000000  0000000000000000  000001d4  2**2</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA</span><br><span class="line">  6 .rdata$zzz    00000030  0000000000000000  0000000000000000  000001ec  2**4</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br></pre></td></tr></tbody></table></figure>
<p>-h 作用是 Display the contents of the section headers,
打印各个段的基本信息</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/程序员的自我修养/03目标文件里有什么.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>编译</tag>
        <tag>链接</tag>
      </tags>
  </entry>
  <entry>
    <title>01USB概述及协议基础</title>
    <url>/2023/03/02/auto/21/01USB%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍USB的基本概念和基础知识 <span id="more"></span></p>
<h3 id="usb">USB</h3>
<p><a class="link" href="https://www.usbzh.com/">USB 中文网<i class="fas fa-external-link-alt"></i></a> 有很多资料,
很实用哦.</p>
<p>USB 是通用串行总线 (Universal Serial Bus) 的缩写.</p>
<table>
<colgroup>
<col style="width: 72%">
<col style="width: 27%">
</colgroup>
<thead>
<tr>
<th>版本</th>
<th>理论最高速度</th>
</tr>
</thead>
<tbody>
<tr>
<td>USB 1.0 Low Speed</td>
<td>1.5Mb/s 或 0.1875MB/s</td>
</tr>
<tr>
<td>USB 1.0 Full Speed</td>
<td>12Mb/s 或 1.5MB/s</td>
</tr>
<tr>
<td>USB 1.1 (即 USB 1.0 Full Speed)</td>
<td>12Mb/s 或 1.5MB/s</td>
</tr>
<tr>
<td>USB 2.0 Full Speed（即USB 1.1）</td>
<td>12Mb/s 或 1.5MB/s</td>
</tr>
<tr>
<td>USB 2.0 High Speed</td>
<td>480Mb/s 或 60MB/s</td>
</tr>
<tr>
<td>USB 3.0</td>
<td>5Gb/s 或 600MB/s</td>
</tr>
<tr>
<td>USB 3.1 Gen 1 （即USB 3.0）</td>
<td>5Gb/s 或 600MB/s</td>
</tr>
<tr>
<td>USB 3.1 Gen 2</td>
<td>10Gb/s 或 1250MB/s</td>
</tr>
<tr>
<td>USB 3.2 Gen 1（即USB 3.1 Gen 1）</td>
<td>5Gb/s 或 600MB/s</td>
</tr>
<tr>
<td>USB 3.2 Gen 2（即USB 3.1 Gen 2）</td>
<td>10Gb/s 或 1250MB/s</td>
</tr>
<tr>
<td>USB 3.2 Gen 2×2（即USB 3.1 Gen 2双通道，仅限Type-C接口）</td>
<td>20Gb/s或2500MB/s</td>
</tr>
<tr>
<td>USB 4 （仅限Type-C接口）</td>
<td>40Gb/s 或 5000MB/s</td>
</tr>
<tr>
<td>雷电1代 (Thunderbolt 1)</td>
<td>10Gb/s 或 1250MB/s</td>
</tr>
<tr>
<td>雷电2代（Thunderbolt 2）</td>
<td>20Gb/s或2500MB/s</td>
</tr>
<tr>
<td>雷电3代（Thunderbolt 3）</td>
<td>40Gb/s 或 5000MB/s</td>
</tr>
</tbody>
</table>
<h3 id="usb-拓扑结构">USB 拓扑结构</h3>
<p>USB 是一种主从结构的系统, 主机叫做 Host, 从机叫做 Device
(也叫做设备).</p>
<p>主机一般有一个或多个<code>主控制器(host controller)</code> 和
<code>根集线器(root hub)</code>. 主控制器主要负责数据处理,
而根集线器则提供主机和设备之间的接口和通路.</p>
<p>有一类特殊的 USB 设备 -- USB 集线器 (USB hub), 它可以在原有的 USB
口上扩展出更多的 USB 口, 但是需要注意的是:
<strong>集线器只能扩展出更多接口的USB口，而不能扩展出更多的带宽。带宽是共享同一个USB主控制器的。</strong>
因此当有多个不同的 USB 设备都需要较大的数据带宽时,
可以考虑将它们分别连接到不同的主控制器的根集线器上以避免带宽不足.</p>
<p>级连的 USB 集线器的层数也是有限制的, USB1.1 规定最多级连4层, USB 2.0
规定最多级连6层. 理论上， 一个 USB 主控制器最多可接 127 个设备,
因为协议规定每个 USB 设备具有一个 7bit 的地址 (取值范围 0 ~ 127， 而 0
是保留给未是初始化设备使用的)</p>
<p>一个完整的 USB 数据传输过程如下:</p>
<p>先由 USB 主控制器发出命令和数据, 通过集线器发给 USB 设备,
设备对接收到的数据进行处理, 再通过集线器发送给主机. 在标准的 PC 中, USB
主控制器是直接挂接在 PCI 总线上的.</p>
<p>在 Windows 中, 各个 USB 功能的驱动程序负责产生和管理 USB 功能设备
(FDO), 这就是我们最终看到的实际设备。</p>
<h3 id="usb-电气特性">USB 电气特性</h3>
<p>标准的 USB 为 4 线:
<code>VBUS</code>、<code>D+</code>、<code>D-</code> 以及
<code>GND</code>.</p>
<p>USB 的主从模式的结构也就意味着,
从机与从机、主机与主机之间不能直接互连和交换数据. 由此出现了 USB OTG (On
The Go), 即让同一个设备, 在不同的场合下可以在主机和从机之间切换.</p>
<blockquote>
<p>USB OTG 的接头 (比如 USB MINI 头) 比普通的 4 线 USB 多了一条 ID
标识线, 用来表明它是主机还是设备.</p>
</blockquote>
<p>USB 使用的是 NRZI 编码方式, 一般芯片内置, 具体过程略.</p>
<p>USB 协议规定 (USB 3.0之前) 设备未配置前, 可以从 VBUS 上最多获取 100mA
的电流, 配置后最多获取 500mA.</p>
<p>USB 各种接头规格参考这篇<a class="link" href="https://zhuanlan.zhihu.com/p/447595295">文章<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="usb-插入检测机制">USB 插入检测机制</h3>
<p>USB 集线器每个端口的 D+ 和 D- 分别接 15kΩ 的下拉电阻, 而设备端在 D+
或 D- 接 1.5kΩ 的上拉电阻. 当设备插入时,
集线器端口的数据线由默认的低电平转为高电平, 集线器检测到这个状态后,
它就报告给上一层集线器最终传递给主机, 从而识别设备插入.</p>
<p>对于低速设备, 上拉电阻接在 D-, 对于全速或高速, 上拉电阻接在 D+,
高速先被识别为全速, 再由集线器和设备相互确认后切换到高速模式. 另外,
因为高速模式是电流传输模式, 这时要将 D+ 上的上拉电阻断开.</p>
<blockquote>
<p>一个实验, 用 10k 电阻接在 USB 5V 和 D+ 或 D-, Windows
会提示发现新硬件, 但是无法识别设备. 这时因为 D+ 或 D- 被拉高,
集线器认为有设备插入了, 它就报告给主机, 但是主机请求获取数据却没有响应,
就会得到一个无法识别的 USB 设备. 这时设备管理器里面显示一个未知设备,
并且其 <code>VID</code> 和 <code>PID</code> 都是 0.</p>
<p><code>VID</code> 和 <code>PID</code> 是设备在设备描述符中规定的,
在调试时如果发现 VID 和 PID 都为 0, 那么很可能设备什么都没返回.</p>
</blockquote>
<p>一些 USB 芯片内部已经集成了一个 1.5kΩ 的上拉电阻，
并且还具有软连接功能, 可通过软件来实现上拉电阻的连接和断开,
这样就可以做到通过软件断开或重连 USB , 而 USB口 实际一直在插着供电.</p>
<h3 id="usb-的描述符及其之间的关系">USB 的描述符及其之间的关系</h3>
<p>主机通过描述符来识别和处理设备, 描述符中记录了设备类型, 厂商 ID
和产品 ID (通常依赖它们来加载对应的驱动程序)、端点情况、版本号等.</p>
<p>USB 1.1 协议定义的标准描述符有:</p>
<ul>
<li>设备描述符 (Device Descriptor)</li>
<li>配置描述符 (Configuration Descriptor)</li>
<li>接口描述符 (Interface Descriptor)</li>
<li>端点描述符 (End-point Descriptor)</li>
<li>字符串描述符 (String Descriptor)</li>
</ul>
<p>USB 2.0 又新增了 2 个标准描述符:</p>
<ul>
<li>设备限定符描述符 (Device Qualifier Descriptor)</li>
<li>其他速度配置描述符 (Other Speed Configuration Descriptor)</li>
</ul>
<p>另外还有一些特殊的描述符, 例如类特殊描述符 (如 HID
描述符和音频接口描述符), 厂商自定义的描述符等.</p>
<h4 id="描述符的内容">1. 描述符的内容</h4>
<p>一个USB设备只有一个设备描述符。设备描述符里决定了该设备有多少种配置，每种配置都有一个配置描述符；而在每个配置描述符中又定义了该配置里有多少个接口，每个接口都有一个接口描述符；在接口描述符里又定义了该接口有多少个端点，每个端点都有一个端点描述符；端点描述符定义了端点的大小、类型等。如果有类特殊描述符，它跟在相应的接口描述符之后。</p>
<p>由此可以看出，USB的描述符之间的关系是一层一层的，最上一层是设备描述符，接下来是配置描述符，再下来是接口描述符，最下面是端点描述符。</p>
<p>下面是每种类型描述符的主要内容:</p>
<ul>
<li><strong>设备描述符</strong>：USB协议版本号、设备类型、端点0的最大包大小、厂商ID（VID）和产品ID（PID）、设备版本号、厂商字符串索引、产品字符串索引、设备序列号索引、可能的配置数等。</li>
<li><strong>配置描述符</strong>：配置所包含的接口数、配置的编号、供电方式、是否支持远程唤醒、电流需求量等。</li>
<li><strong>接口描述符</strong>：接口的编号、接口的端点数、接口所使用的类、子类、协议等。</li>
<li><strong>端点描述符</strong>：端点号及方向、端点的传输类型、最大包长度、查寻时间间隔等。</li>
<li><strong>字符串描述符</strong>:
主要是提供共一些方便人们阅读的信息，它不是必需的。</li>
</ul>
<p>在主机获取描述符时，首先获取设备描述符，接着再获取配置描述符，然后根据配置描述符中的配置集合的总长度，一次将配置描述符、接口描述符、类特殊描述符（如果有）、端点描述符一次读回。</p>
<p>对于字符串描述符，是单独获取的。主机通过发送获取字符串描述符的请求以及描述符的索引号、语言ID来获取对应的字符串描述符。</p>
<h4 id="描述符与设备的关系">2. 描述符与设备的关系</h4>
<p>每个接到集线器上的 USB 设备都分配有一个独立的地址, USB
主机通过该地址来访问设备 (类似于计算机网络中的 IP 地址),
而在设备内部有可能还会分出多个通信端点 (类似于计算机网络中的端口),
每个端点都有自己的端点号. 要向设备发送或读取数据,
就需要像计算机网络那样, 同时给出设备地址和端点号.</p>
<p>与计算机网络不同的是, USB设备种类众多,
每种设备的端点数量和通信方式都不同, 为了更方便地管理这些零散的端点, USB
协议抽象出了配置和接口的概念. 它是这样管理的:</p>
<h6 id="设备和接口对端点的管理">设备和接口对端点的管理</h6>
<p>一个设备可以有多个配置, 但是同一时刻只能有一个配置有效,
当我们需要不同的功能时, 只要选择不同的配置即可.</p>
<p>每个配置下可以有多个接口, 每个接口有一些端点, 它被定义为一种功能,
例如U盘、USB声卡、USB串口等. 根据功能的不同接口下的端点数也不同.
并且多个接口可以同时有效, 这种情况一般被称为<strong>复合设备</strong>,
例如一个 USB 设备同时具有声卡和串口功能, 声卡功能用来传输音频,
而串口则用来对声卡设备进行控制.</p>
<p>总结如下：由端点构成一个接口（或者反过来说，接口是端点的集合），由接口又构成一个配置（反过来说，配置是接口的集合），再由配置构成一个设备（设备是配置的集合）</p>
<h3 id="usb-域包事务及传输">USB 域，包，事务及传输</h3>
<p>USB 是串行总线, 使用 LSB
方式传输。在USB系统中，主机处于主导地位，所以把从设备到主机的数据叫做输入，从主机到设备的数据叫做输出。</p>
<p>虽说包是 USB 传输的基本单位, 但为了方便解释包的各个部分, USB
协议又定义了域的概念, 域是包的组成成分, 由域组成包,
多个包按照一定的顺序排列组成一个事务 (Transaction),
将不同的事务进行组合成形成一次传输 (Transfer)。 #### 0. 概览</p>
<p>域通常来说有八个</p>
<table>
<thead>
<tr>
<th>SYNC</th>
<th>PID</th>
<th>ADDR</th>
<th>ENDP</th>
<th>FRAME</th>
<th>DATA</th>
<th>CRC</th>
<th>EOP</th>
</tr>
</thead>
<tbody>
</tbody>
</table>
<p>多个域组成包，USB 的包分为四大类</p>
<ul>
<li>token：令牌包</li>
<li>data：数据包</li>
<li>handshake：握手包</li>
<li>special：特殊包</li>
</ul>
<p>多个包组成不同的事务，事务通常有三个</p>
<ul>
<li>setup 事务</li>
<li>out 事务</li>
<li>in 事务</li>
</ul>
<p>多个事务组成传输，共有四类传输</p>
<ul>
<li>批量传输：bulk transaction</li>
<li>控制传输：control transaction</li>
<li>中断传输：interrupt transaction</li>
<li>等时传输：isochronous transaction</li>
</ul>
<h4 id="域">1. 域</h4>
<p>USB 通常有八个域，即同步域 (SYNC)、包标识 (PID)、地址域
(ADDR)、端点域 (ENDP)、帧号域 (FRAME)、数据域 (DATA)，校验域
(CRC)，包结束 (EOP)</p>
<table>
<colgroup>
<col style="width: 15%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 10%">
<col style="width: 21%">
<col style="width: 15%">
<col style="width: 5%">
</colgroup>
<thead>
<tr>
<th>SYNC</th>
<th>PID</th>
<th>ADDR</th>
<th>ENDP</th>
<th>FRAME</th>
<th>DATA</th>
<th>CRC</th>
<th>EOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>8/32 bits</td>
<td>8 bits</td>
<td>7 bits</td>
<td>4 bits</td>
<td>11 bis</td>
<td>0-1024 bytes</td>
<td>5/16 bits</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>注意，并不是每个 USB
包都包含上述的八个域，也就是说有些包只包含其中的⼏个域。但它们都有以下共同特点:</p>
<ul>
<li>以<strong>同步域</strong>开始</li>
<li>紧跟着一个<strong>标识域</strong></li>
<li>最终以<strong>结束域</strong></li>
</ul>
<h5 id="sync">1) SYNC</h5>
<p>同步域主要是通知对⽅数据传输开始，并提供同步时钟。对于低速设备和全速设备，同步域使⽤的是
00000001（⼆进制数）；对于⾼速设备使⽤的是 00000000 00000000 00000000
00000001。</p>
<h5 id="pid">2) PID</h5>
<p>包标识主要⽤于标识包的类型，由 8 位组成：低 4 位是 PID 编码，⾼ 4
位是校验字段，是对低 4 位取反得到，USB 中各种包是通过 PID 字段来区分</p>
<h5 id="addr">3) ADDR</h5>
<p>由于接⼊ USB
总线的设备可能有多个，因此需要引⼊地址域，以便于区分当前通信的设备是哪个设备。地址域包含
7 个数据位，最多可以指定 128 个地址，地址 0 ⽤作缺省地址，不分配给 USB
设备。对于 USB 总线上的每个设备，地址唯⼀</p>
<h5 id="endp">4) ENDP：</h5>
<p>端点域⽤于指定 USB 总线上某个设备的⼀个端点号，包含 4 个数据位；全速
/ ⾼速设备最多可以含有 16 个端点，低速设备最多含有 3 个端点。所有 USB
设备都必须含有⼀个端点号为 0
的端点，⽤于主机与设备间交换基本信息。除端点 0 外，其余的端点都是具体
USB 设备所特有的。地址域和端点域组合，明确了主机与设备间通信的通道。</p>
<h5 id="frame">5) FRAME</h5>
<p>帧号字段⽤于指出当前帧的帧号，它仅在每帧 / 微帧开始的 SOF
令牌包中被发送，其数据位⻓度为 11 位，每传输⼀帧，主机就将其加
1。全速设备每毫米产生一个帧，高速设备每 125us 产生一个微帧，即每毫秒 8
个微帧</p>
<h5 id="data">6) DATA</h5>
<p>数据字段包含主机和 USB 设备间需要传输的数据，以字节为单位，最⼤⻓度为
1024，⽽实际⻓度取决于传输的具体情况。</p>
<h5 id="crc">7) CRC</h5>
<p>校验域主要是为了校验通信数据的正确性。USB 令牌包和数据包中都使⽤了
CRC。但是，CRC
是发送⽅在进⾏位填充之前产⽣的，这样要求接收⽅在去除位填充之后，再对 CRC
字段进⾏译码。信息包中的 PID 字段本⾝含有校验，所以 CRC 计算不包含有 PID
部分。令牌包的 CRC 采⽤的是 5 位 CRC，数据包中的数据字段使⽤的是 16 位
CRC</p>
<h5 id="eop">8) EOP</h5>
<p>全速 / 低速设备的 EOP 是一个大约 2 个数据位宽度的单端 0(SE0)
信号，高速设备的 EOP 使用故意的位填充错误来表示一个包被分成不同的域</p>
<h4 id="包">2. 包</h4>
<p>域组成包</p>
<p>包 (Packet) 是 USB
系统中信息传输的基本单元，所有传输的数据都是以包为基本单位的</p>
<p>USB 的包分为四大类 (其中 * 号是 USB2.0 后新增的):</p>
<table>
<thead>
<tr>
<th>PID 类型</th>
<th>PID 名</th>
<th>PID[3:0]</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>令牌包</td>
<td>OUT</td>
<td>0001</td>
<td>通知设备将要输出数据</td>
</tr>
<tr>
<td></td>
<td>IN</td>
<td>1001</td>
<td>通知设备将要输入数据</td>
</tr>
<tr>
<td></td>
<td>SOF</td>
<td>0101</td>
<td>通知设备这时一个帧起始包</td>
</tr>
<tr>
<td></td>
<td>SETUP</td>
<td>1101</td>
<td>通知设备将要开始一个控制传输</td>
</tr>
<tr>
<td>数据包</td>
<td>DATA0</td>
<td>0011</td>
<td>数据包(偶)</td>
</tr>
<tr>
<td></td>
<td>DATA1</td>
<td>1011</td>
<td>数据包(奇)</td>
</tr>
<tr>
<td></td>
<td>DATA2 *</td>
<td>0111</td>
<td></td>
</tr>
<tr>
<td></td>
<td>MDATA2 *</td>
<td>1111</td>
<td></td>
</tr>
<tr>
<td>握手包</td>
<td>ACK</td>
<td>0010</td>
<td>确认</td>
</tr>
<tr>
<td></td>
<td>NACK</td>
<td>1010</td>
<td>不确认</td>
</tr>
<tr>
<td></td>
<td>STALL</td>
<td>1110</td>
<td>挂起</td>
</tr>
<tr>
<td></td>
<td>NYET *</td>
<td>0110</td>
<td>未准备好</td>
</tr>
<tr>
<td>特殊包</td>
<td>PRE</td>
<td>1100</td>
<td>前导 (这是一个令牌包)</td>
</tr>
<tr>
<td></td>
<td>ERR *</td>
<td>1100</td>
<td>错误 (这是一个握手包)</td>
</tr>
<tr>
<td></td>
<td>SPLIT *</td>
<td>1000</td>
<td>分裂事务 (这是一个令牌包)</td>
</tr>
<tr>
<td></td>
<td>PING *</td>
<td>0100</td>
<td>PING 测试 (这是一个令牌包)</td>
</tr>
<tr>
<td></td>
<td>--</td>
<td>0000</td>
<td>保留, 未使用</td>
</tr>
</tbody>
</table>
<h5 id="令牌包">1) 令牌包</h5>
<p>令牌包用来启动一次USB传输。因为USB是主从结构的拓扑结构，所以所有的数据传输都是由主机发起的，设备只能被动地接听数据（唯一的例外是支持远程唤醒的设备能够主动改变总线的状态让集线器感知到设备的唤醒信号，但是这个过程并不传送数据，只是改变一下总线的状态）。</p>
<p>这就需要主机发送一个令牌来通知哪个设备进行响应，如何响应。令牌包有4种，分别为输出（OUT）、输入（IN）、建立（SETUP）和帧起始（SOF
Start Of Frame）。</p>
<p>SOF 令牌</p>
<table>
<thead>
<tr>
<th>SYNC</th>
<th>PID</th>
<th>FRAME</th>
<th>CRC5</th>
<th>EOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>8/32 bits</td>
<td>8 bits</td>
<td>11 bis</td>
<td>5 bis</td>
<td>—</td>
</tr>
</tbody>
</table>
<blockquote>
<p>SOF
令牌包在每帧（或微帧）开始时发送，它以广播的形式发送，所有USB全速设备和高速设备都可以接收到SOF包。</p>
</blockquote>
<p>OUT 令牌 IN 令牌及 SETUP 令牌</p>
<table>
<thead>
<tr>
<th>SYNC</th>
<th>PID</th>
<th>ADDR</th>
<th>ENDP</th>
<th>CRC5</th>
<th>EOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>8/32 bits</td>
<td>8 bits</td>
<td>7 bits</td>
<td>4 bits</td>
<td>5 bits</td>
<td>—</td>
</tr>
</tbody>
</table>
<blockquote>
<p>SETUP 令牌包只用在控制传输中, 它和 OUT
令牌包一样也是通知设备将要输出一个数据包, 两者的区别在于: SETUP
令牌包之后只使用 DATA0 数据包, 且只能发送到设备的控制端点,
并且设备必须要接收, 而 OUT 令牌包没有这些限制</p>
</blockquote>
<p>每个令牌包最后都有一个 CRC5 校验， 它只校验 PID 之后的数据, 因为 PID
本身自带校验功能.</p>
<h5 id="数据包">2) 数据包</h5>
<p>数据包有 4 种: DATA0、DATA1、DATA2、MDATA</p>
<table style="width:100%;">
<colgroup>
<col style="width: 18%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 14%">
<col style="width: 6%">
</colgroup>
<thead>
<tr>
<th>SYNC</th>
<th>PID</th>
<th>byte0</th>
<th>byte1</th>
<th>…</th>
<th>byte N</th>
<th>CRC16</th>
<th>EOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>8/32 bits</td>
<td>8 bits</td>
<td>1 byte</td>
<td>1 byte</td>
<td>1 byte</td>
<td>1 byte</td>
<td>16 bits</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>不同速度的数据负载</p>
<ul>
<li>low speed：8 bytes</li>
<li>full speed：1023 bytes</li>
<li>high speed：1024 bytes</li>
</ul>
<p>之所以有不同类型的数据包，是用在当握手包出错时纠错。下面以DATA0包和DATA1包的切换为例进行具体的解释。</p>
<p>主机和设备都会维护自己的一个数据包类型切换机制：当数据包成功发送或者接收时，数据包类型切换。当检测到对方所使用的数据包类型不对时，USB系统认为这发生了一个错误，并试图从错误中恢复。</p>
<p>数据包类型不匹配主要发生在握手包被损坏的情形。当一端已经正确接收到数据并返回确认信号时，确认信号却在传输过程中被损坏。这时另一端就无法知道刚刚发送的数据是否已经成功，这时它只好保持自己的数据包的类型不变。</p>
<p>如果对方下一次使用的数据包类型跟自己的不一致，则说明它刚刚已经成功接收到数据包了（因为它已经做了数据包切换，只有正确接收才会如此）：如果对方下一次使用的数据包类型跟自己的一致，则说明对方没有切换数据包类型，也就是说，刚刚的数据包没有发送成功，这是上一次的重试操作。</p>
<h5 id="握手包">3) 握手包</h5>
<p>握手包用来表示一个传输是否被对方确认。</p>
<table>
<thead>
<tr>
<th>SYNC</th>
<th>PID</th>
<th>EOP</th>
</tr>
</thead>
<tbody>
<tr>
<td>8/32 bits</td>
<td>8 bits</td>
<td>—</td>
</tr>
</tbody>
</table>
<p>握手包有ACK、NAK、STALL 和 NYET</p>
<ul>
<li><p><strong>ACK</strong>
表示正确接收数据，并且有足够的空间来容纳数据。主机和设备都可以用ACK来确认，NAK、STALL、NYET
只有设备能够返回，主机不能使用这些握手包。</p></li>
<li><p><strong>NAK</strong>
表示没有数据需要返回，或者数据正确接收但是没有足够的空间来容纳它们。当主机收到NAK时，知道设备还未准备好，主机会在以后合适的时机进行重试传输。</p></li>
<li><p><strong>STALL</strong>
表示设备无法执行这个请求，或者端点已经被挂起了，它表示一种错误的状态。设备返回
STALL 后，需要主机进行干预才能解除这种 STALL 状态。</p></li>
<li><p><strong>NYET</strong> 只在 USB2.0
的高速设备输出事务中使用，它表示设备本次数据成功接收，但是没有足够的空间来接收下一次数据。主机在下一次输出数据时，将先使用PING令牌包来试探设备是否有空间接收数据，以避免不必要的带宽浪费。</p></li>
</ul>
<p>需要注意的是，返回 NAK
并不表示数据出错，只是说明设备暂时没有数据传输或者暂时没有能力接收数据。当USB主机或者设备检测到数据出错时（如CRC校验错、PID校验错、位填充错等），将什么都不返回。这时等待接收握手包的一方就会收不到握手包从而等待超时。</p>
<h5 id="special-特殊包">4) special 特殊包</h5>
<p>特殊包是一些在特殊场合使用的包。总共有4种：PRE、ERR、SPLIT和PING。其中PRE、SPLIT、PING是令牌包，ERR是握手包。</p>
<ul>
<li><strong>PRE
令牌包</strong>是通知集线器打开其低速端口的一种前导包。PRE
只使用在全速模式中。平时，为了防止全速信号使低速设备误动作，集线器是没有将全速信号传送给低速设备的。只有当收到PRE令牌包时，才打开其低速端口。PRE令牌包与握手包的结构一样，只有同步域、PID和EOP。当需要传送低速事务时，主机首先发送一个PRE令牌包（以全速模式发送）。对于全速设备，将会忽略这个令牌包。集线器在收到这个令牌包后，打开其连接了低速设备的端口。接着，主机就会以低速模式给低速设备发送令牌包、数据包等。</li>
<li><strong>PING
令牌包</strong>与OUT令牌包具有一样的结构，但是PING令牌包后并不发送数据，而是等待设备返回ACK或者NAK，以判断设备是否能够传送数据。在USB1.1中，是没有PING令牌包的。只有在USB2.0高速环境中才会使用PING令牌包，它只被使用在批量传输和控制传输的输出事务中。直接使用OUT令牌包发送数据时，不管设备是否有空间接收数据，都会在OUT令牌包之后跟着发送一个数据包，如果设备没有空间接收数据，就返回一个NAK。这样的结果就是浪费了总线带宽，白白传送了数据。在高速设备中增加了这个PNG机制，主机先用PING令牌包试试设备是否有空间接收数据，而不用事先把数据发送出去。在全速模式下，有时会遇到一个很有趣的现象，就是下位机程序慢了一点点处理完数据，结果传输速度却下降了很多。这就是前面所说的OUT过程直接发送数据导致的，也就是说，虽然程序只慢了一点，但是却丢弃了整个数据包。</li>
<li><strong>SPLIT
令牌包</strong>是高速事务分裂令牌包，通知集线器将高速数据包转化为全速或者低速数据包发送给其下面的端口。</li>
<li><strong>ERR
握手包</strong>是在分裂事务中表示错误使用。由于高速分裂事务过程比较复杂，主要属于集线器的功能，在此就不详述了，感兴趣可以阅读USB2.0协议相关部分。</li>
</ul>
<h6 id="如何处理数据包">如何处理数据包</h6>
<p>一般来说,
USB接口芯片会完成如CRC校验、位填充、PID识别、数据包切换、握手等协议的处理。</p>
<p>当USB接口芯片正确接收到数据时，如果有空间保存，则它将数据保存并返回ACK，同时，设置一个标志表示已经正确接收到数据；如果没有空间保存数据，则自动会返回NAK。</p>
<p>收到输入请求时，如果有数据需要发送，则发送数据，并等待接收ACK。只有当数据成功发送出去（即接收到应答信号ACK）之后，它才设置标志，表示数据已成功发送；如果无数据需要发送，则它自动返回NAK。</p>
<p>通常只需要根据芯片提供的一些标志，准备要发送的数据到端点，或者从端点读取接收到的数据即可。所要发送和接收的数据是指数据包中的数据，至于同步域、包标识、地址、端点、CRC等是看不到的，在BUS
Hound中抓到数据也是如此，仅是数据包，并且，BUS
Hound中只能看到成功传输的数据，即只有ACK确认过的数据包。在USB接口芯片中，通过一些标志可以知道是哪个端点接收或者成功发送了数据。另外，由于控制传输比较特殊，SETUP包也会有相应的标志供我们使用。</p>
<h4 id="事务">3. 事务</h4>
<p>虽然USB定义了数据在总线上传输的基本单位是包，但是我们还不能随意地使用包来传输数据，必须按照一定的关系把这些不同的包组织成事务（transaction）才能传输数据。</p>
<p>事务通常由令牌包，数据包，握手包中的 2 个或者 3 个 包组成：</p>
<ul>
<li>令牌包用来启动一个事务，总是由主机发送</li>
<li>数据包传送数据，可以从主机到设备，也可以从设备到主机，方向由令牌包来决定</li>
<li>握⼿包的发送者通常为数据接收者，当数据正确接收后，发送握⼿包，设备也可以使⽤
NACK 表⽰数据未准备好</li>
</ul>
<blockquote>
<p>注意，SOF 只是指⽰⼀帧的开始，⽆有效数据，并不是⼀次事务；EOF
帧发送结束后的⼀种电平状态，也不是事务</p>
</blockquote>
<p>例如下面是一些常见的事务: ##### 1) setup 事务</p>
<p>setup 事务处理并定义了 Host 与 Device
之间的特殊的数据传输，它仅适⽤于 USB 控制传输的建⽴阶段。</p>
<p>正确的 setup 事务包括令牌、数据和握⼿三个阶段, 例如下面是一个正常的
setup 事务:</p>
<table>
<colgroup>
<col style="width: 51%">
<col style="width: 7%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 5%">
</colgroup>
<thead>
<tr>
<th>包类型</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 令牌包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>SETUP</td>
<td>ADDR</td>
<td>ENDP</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td>2. 数据包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>DATA0</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3. 握手包 (Device --&gt; Host)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>setup 事务通常有三种状态，即：</p>
<ul>
<li>正常 (握手包为 ACK)</li>
<li>设备忙 (握手包为 NAK)</li>
<li>设备出错 (握手包为 STALL)</li>
</ul>
<h5 id="out-事务">2) out 事务</h5>
<p>out 事务是主机向 USB 设备的某个端点中发送数据的过程，正确的 out
事务包括令牌、数据和握⼿三个阶段, 例如下面是一个正常的 out 事务:</p>
<table>
<colgroup>
<col style="width: 46%">
<col style="width: 6%">
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 5%">
</colgroup>
<thead>
<tr>
<th>包类型</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 令牌包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>OUT</td>
<td>ADDR</td>
<td>ENDP</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td>2. 数据包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>DATA0/DATA1</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3. 握手包 (Device --&gt; Host)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>同样的, out 事务也有三种状态:</p>
<ul>
<li>正常 (握手包为 ACK)</li>
<li>设备忙 (握手包为 NAK)</li>
<li>设备出错 (握手包为 STALL)</li>
</ul>
<h5 id="in-事务">3) in 事务</h5>
<p>in 事务是主机从 USB 设备的某个端点中获取数据的过程,
正确的输⼊事务包括令牌包、数据包和握⼿包三个阶段.</p>
<p>下面是⼀个 in 事务可能的三种状态</p>
<ul>
<li>正常的 in 事务</li>
</ul>
<table>
<colgroup>
<col style="width: 46%">
<col style="width: 6%">
<col style="width: 18%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 5%">
</colgroup>
<thead>
<tr>
<th>包类型</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 令牌包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>IN</td>
<td>ADDR</td>
<td>ENDP</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td>2. 数据包 (Device --&gt; Host)</td>
<td>SYNC</td>
<td>DATA0/DATA1</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3. 握手包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>设备忙或⽆数据时</li>
</ul>
<table>
<thead>
<tr>
<th>包类型</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 令牌包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>IN</td>
<td>ADDR</td>
<td>ENDP</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td>2. 握手包 (Device --&gt; Host)</td>
<td>SYNC</td>
<td>NACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>设备出错时</li>
</ul>
<table>
<colgroup>
<col style="width: 52%">
<col style="width: 7%">
<col style="width: 9%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 5%">
</colgroup>
<thead>
<tr>
<th>包类型</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>1. 令牌包 (Host --&gt; Device)</td>
<td>SYNC</td>
<td>IN</td>
<td>ADDR</td>
<td>ENDP</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td>2. 握手包 (Device --&gt; Host)</td>
<td>SYNC</td>
<td>STALL</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="传输">4. 传输</h4>
<p>事务构成传输</p>
<h5 id="批量传输-bulk-transactions">1）批量传输 (Bulk Transactions)</h5>
<p>批量传输中有三种事务: IN 事务、OUT 事务、PING 事务.</p>
<p>批量传输没有规定数据包中数据的意义和结构，具体的数据结构要由设备自己定义。批量传输通常用在数据量大、对数据的实时性要求不高的场合，例如USB打印机、扫描仪、大容量存储设备等。批量传输的流程图如下:</p>
<figure>
<img src="/2023/03/02/auto/21/01USB%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/BulkTransactions.PNG" alt="Bulk Transactions">
<figcaption aria-hidden="true">Bulk Transactions</figcaption>
</figure>
<p>在图中从上往下看, 最开始主机处于 IDLE 状态,
然后开始进入三种传输状态种的一个: IN、OUT、PING.</p>
<h6 id="in-事务-1">IN 事务</h6>
<p>主机首先往USB总线上发出一个 IN 令牌包, 然后进入数据接收状态,
等待设备返回数据, 此时</p>
<ul>
<li>若USB总线上没有地址和端点匹配的设备或者虽然有匹配的设备,
但是设备检测到包错误, 不做任何响应, 则主机将等待超时.</li>
<li>若有地址和端点匹配的设备，并且设备没有检测到错误，则该设备要做出响应:
<ul>
<li>如果设备有数据需要返回，那么它把一个数据包放到总线上（具体的数据包类型要看数据切换位）</li>
<li>如果设备没有数据需要返回，则它直接使用NAK握手包来响应主机。主机在收到NAK握手包后，知道设备暂时无数据返回，主机会在稍后的时间里重试该输入事务</li>
<li>如果该端点处于挂起状态，设备会返回一个STALL握手包</li>
</ul></li>
</ul>
<p>然后在主机端:</p>
<ul>
<li>如果主机接收到设备发送的数据包并解码正确后，使用ACK握手包应答设备。</li>
<li>如果主机检测到错误，则不做任何响应，设备会检测到超时。</li>
</ul>
<blockquote>
<p>USB协议规定，不允许主机使用NAK握手包来拒绝接收数据包（否则的话，设备会在下面想：U
真是 "SB"
啊！既然你没空间接收数据，你还请求我返回数据给你干啥！浪费表情）。</p>
</blockquote>
<h6 id="out-事务-1">OUT 事务</h6>
<blockquote>
<p>也就是说每发送一个包都可能包含两种的错误: 1. 是数据根本没发送到设备端
(设备端不是一个正常 USB 设备或者设备已经拔掉了) 2. 数据发送到设备端了,
但是设备没有任何回复.</p>
</blockquote>
<p>主机先发送一个 OUT 令牌包, 说明有数据要输出, 紧接着发送一个 DATA 包
(具体的数据包类型要看数据切换位), 然后进入等待回复状态:
设备的回复有以下几种种情况:</p>
<ul>
<li>若设备解码令牌包、数据包都准确无误，并且有足够的缓冲区来保存数据就会发送
ACK 或 NYET 握手包来应答主机 (只有高速模式才有 NYET 握手包,
它表示本次数据接收成功, 但是没有能力接收下一次传输).</li>
<li>若设备没有足够的缓冲区来保存数据，那么他会返回一个 NAK 握手包,
主机会在稍后的时间重试该传输事务.</li>
<li>若设备检测到数据正确，但是端点处于挂起状态， 则返回一个 STALL
握手包。</li>
<li>若设备检测到有错误 (例如校验错误、位填充错误等)
则不做任何相应，让主机等待超时</li>
</ul>
<h6 id="ping-事务">PING 事务</h6>
<p>在 USB2.0 高速设备中增加了一个 PING
令牌包，用来探测设备是否有空间接收数据，它不发出数据，直接等待设备的握手包。因此PING事务只有令牌包和握手包。</p>
<ul>
<li>ACK 握手包表示有空间接收数据</li>
<li>NAK 握手包表示无空间接收</li>
<li>STALL 握手包表示端点挂起</li>
</ul>
<h5 id="中断传输-interrupt-transaction">2）中断传输 (Interrupt
Transaction)</h5>
<p>中断传输有 IN 事务 和 OUT 事务两种.</p>
<p>中断传输是一种保证查询频率的传输。中断端点在端点描述符中要报告它的查询间隔，主机会保证在小于这个时间间隔的范围内安排一次传输。</p>
<p>这里所说的中断，跟我们硬件上的中断是不一样的。它不是由设备主动地发出一个中断请求，而是由主机保证在不大于某个时间间隔内安排一次传输。</p>
<p>中断传输通常用在数据量不大，但是对时间要求较严格的设备中，例如人机接口设备（HID）中的鼠标、键盘、轨迹球等。中断传输也可以用来不断地检测某个状态，当条件满足后再使用批量传输来传送大量的数据。</p>
<p>除了在对端点查询的策略上不一样之外，中断传输和批量传输的结构基本上是一样的，只是中断传输中没有PING
和 NYET 两种包。中断传输的流程图如下:</p>
<figure>
<img src="/2023/03/02/auto/21/01USB%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/InterruptTransaction.PNG" alt="中断传输">
<figcaption aria-hidden="true">中断传输</figcaption>
</figure>
<h5 id="等时传输-isochronous-transaction">3）等时传输 (Isochronous
Transaction)</h5>
<p>等时传输（同步传输）用在数据量大、对实时性要求高的场合。</p>
<p>例如音频设备、视频设备等，这些设备对数据延迟很敏感。对于音频或者视频设备来说，对数据的100%正确要求不高，少量数据的错误还是能够容忍的，主要的是要保证不能停顿；</p>
<p>所以等时传输是不保证数据100%正确的。当数据错误时，并不进行重传操作。因此等时传输也就没有应答包。数据是否正确，可以由数据包的CRC校验来确认。至于出错的数据如何处理，由软件来决定。</p>
<p>等时传输的流程图如下:</p>
<figure>
<img src="/2023/03/02/auto/21/01USB%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/IsochronousTransaction.PNG" alt="等时传输">
<figcaption aria-hidden="true">等时传输</figcaption>
</figure>
<h5 id="控制传输-isochronous-transaction">3）控制传输 (Isochronous
Transaction)</h5>
<p>控制传输与前面三种传输相比，要稍微复杂一些。</p>
<p>控制传输分为三个过程：</p>
<h6 id="第一个是建立过程">第一个是建立过程</h6>
<p>建立过程使用一个 SETUP (建立) 事务。SETUP
事务是一个输出数据的过程，与批量传输的 OUT 事务相比，有几处不一样：</p>
<ul>
<li>首先是令牌包不一样，建立过程使用的是SETUP令牌包；</li>
<li>其次是数据包类型，SETUP只能使用DATA0包；</li>
<li>最后是握手包，设备只能使用ACK来应答（若出错则不应答），而不能使用NAK或者STALL来应答，<strong>即设备必须要接收
SETUP 事务的数据</strong>。</li>
</ul>
<figure>
<img src="/2023/03/02/auto/21/01USB%E6%A6%82%E8%BF%B0%E5%8F%8A%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/ControlSETUPTransaction.PNG" alt="控制传输">
<figcaption aria-hidden="true">控制传输</figcaption>
</figure>
<h6 id="第二个是可选的数据过程">第二个是可选的数据过程</h6>
<p>数据过程是可选的，即一个控制传输可能没有数据过程。如果有，一个数据过程可以包含一笔或者多笔数据事务。控制传输所使用的数据事务与批量传输中的批量事务是一样的。</p>
<blockquote>
<p>要注意的是，在数据过程中，所有的数据事务必须是同一个传输方向的。也就是说:</p>
<p>在控制读传输中，数据过程中的所有数据事务都必须是输入的；
在控制写传输中，数据过程中的所有数据事务都必须是输出的。</p>
<p>一旦数据传输方向发生改变，就会认为进入到了状态过程。</p>
<p>数据过程的第一个数据包必须是 DATA1 (因为建立过程的数据包是
DATA0)，然后每次正确传输一个数据包后就在DATA0和DATA1之间交替。</p>
</blockquote>
<h6 id="第三个是状态过程">第三个是状态过程</h6>
<p>状态过程也是一笔批量事务，它的传输方向刚好跟前面的数据阶段相反，即</p>
<ul>
<li>若数据过程是输出，则在状态过程为一个批量输入事务；</li>
<li>若数据过程是输入，则在状态过程为一个批量输出事务；</li>
<li>若无数据过程, 则状态为一个批量输入事务, 因为建立过程就是输出</li>
</ul>
<p>状态过程只使用DATA1包。</p>
<p>控制传输之所以要弄得这么复杂，是因为它要保证数据传输过程的数据完整性。</p>
<p>设备枚举过程中各种描述符的获取以及设置地址、设置配置等，都是通过控制传输来实现的。</p>
<p>例如下面是几种控制传输的实例:</p>
<table>
<colgroup>
<col style="width: 15%">
<col style="width: 15%">
<col style="width: 21%">
<col style="width: 11%">
<col style="width: 5%">
<col style="width: 15%">
<col style="width: 15%">
</colgroup>
<thead>
<tr>
<th>控制类型</th>
<th>建立过程</th>
<th>数据过程 &gt;&gt;</th>
<th>&gt;&gt;</th>
<th>&gt;&gt;</th>
<th>&gt;&gt;</th>
<th>状态过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>控制写</td>
<td>SETUP</td>
<td>OUT(1)</td>
<td>OUT(0)</td>
<td>...</td>
<td>OUT(0/1)</td>
<td>IN(1)</td>
</tr>
<tr>
<td></td>
<td>DATA0</td>
<td>DATA1</td>
<td>DATA0</td>
<td></td>
<td>DATA0/1</td>
<td>DATA1</td>
</tr>
<tr>
<td>控制读</td>
<td>SETUP</td>
<td>IN(1)</td>
<td>IN(0)</td>
<td>...</td>
<td>IN(0/1)</td>
<td>OUT(1)</td>
</tr>
<tr>
<td></td>
<td>DATA0</td>
<td>DATA1</td>
<td>DATA0</td>
<td></td>
<td>DATA0/1</td>
<td>DATA1</td>
</tr>
</tbody>
</table>
<p>若没有数据过程, 则直接进入状态过程:</p>
<table>
<thead>
<tr>
<th>控制类型</th>
<th>建立过程</th>
<th>状态过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>无数据控制写</td>
<td>SETUP</td>
<td>IN(1)</td>
</tr>
<tr>
<td></td>
<td>DATA0</td>
<td>DATA1</td>
</tr>
</tbody>
</table>
<h3 id="端点类型与传输类型最大数据包长的关系">端点类型与传输类型、最大数据包长的关系</h3>
<p>一个具体的端点，只能工作在一种传输模式下。通常，我们把工作在什么模式下的端点，就叫做什么端点。例如，控制端点、批量端点等。</p>
<p>端点0是每个USB设备都必须具备的默认控制端点，它一上电就存在并且可点是可选的，需要根据具体的设备来决定。非0端点只有在Set
Config之后才能使用。</p>
<p>每个端点描述符中都规定了端点所支持的最大数据包长。主机每次发送数据包，都不能超过端点的最大包长:</p>
<table>
<colgroup>
<col style="width: 31%">
<col style="width: 12%">
<col style="width: 38%">
<col style="width: 17%">
</colgroup>
<thead>
<tr>
<th>类型 &nbsp;最大包长 &nbsp;模式</th>
<th>低速模式</th>
<th>全速模式</th>
<th>高速模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>控制端点</td>
<td>固定8字节</td>
<td>可在8、16、32、64字节中选择</td>
<td>固定64字节</td>
</tr>
<tr>
<td>等时端点</td>
<td>不支持</td>
<td>上限1023字节</td>
<td>上限1024字节</td>
</tr>
<tr>
<td>中断端点</td>
<td>上限8字节</td>
<td>上限64字节</td>
<td>上限1024字节</td>
</tr>
<tr>
<td>批量端点</td>
<td>不支持</td>
<td>可在8、16、32、64字节中选择</td>
<td>固定512字节</td>
</tr>
</tbody>
</table>
<h3 id="usb-设备的枚举过程">USB 设备的枚举过程</h3>
<p>USB主机在检测到USB设备插人后，就要对设备进行枚举了。枚举就是主机从设备读取各种描述符信息,
这样主机就可以根据这些信息加载合适的驱动程序,
从而知道设备是什么样的设备, 如何进行通信等.</p>
<p>调试USB设备，很重要的一点就是USB的枚举过程，只要枚举成功了，剩下的工作就不多了。</p>
<p>枚举过程使用的都是<strong>控制传输</strong>.</p>
<p>下面是枚举过程地详细介绍:</p>
<h4 id="获取设备描述符">1. 获取设备描述符</h4>
<p>USB主机检测到USB设备插入后，就会先对设备复位。USB设备在总线复位后其地址为0，这样主机就可以通过地址0和那些刚刚插入的设备通信。</p>
<p>USB主机往地址为0的设备的端点0发送获取设备描述符的标准请求（这是一个控制传输的建立过程）。</p>
<p>设备收到该请求后，会按照主机请求的参数，将设备描述符返回给主机
(数据过程)。</p>
<p>主机在成功获取到一个数据包的设备描述符并且确认没有错误后，就会返回一个0长度的确认数据包（状态过程）给设备，从而进入到接下来的设置地址阶段。</p>
<p>该过程具体如下</p>
<table>
<colgroup>
<col style="width: 10%">
<col style="width: 26%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 27%">
<col style="width: 10%">
<col style="width: 5%">
<col style="width: 4%">
</colgroup>
<thead>
<tr>
<th>过程</th>
<th>包类型</th>
<th>同步域</th>
<th>PID</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>建立过程</td>
<td>1. 令牌包 (H -&gt; D)</td>
<td>SYNC</td>
<td>SETUP</td>
<td>ADDR (0)</td>
<td>ENDP (0)</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td></td>
<td>2. 数据包 (H -&gt; D )</td>
<td>SYNC</td>
<td>DATA0</td>
<td>8 bytes</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
</tr>
<tr>
<td></td>
<td>3. 握手包 (D -&gt; H)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>数据过程</td>
<td>1. 令牌包 (H -&gt; D)</td>
<td>SYNC</td>
<td>IN</td>
<td>ADDR (0)</td>
<td>ENDP (0)</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td></td>
<td>2. 数据包 (D -&gt; H)</td>
<td>SYNC</td>
<td>DATA1</td>
<td>8 bytes (设备描述符)</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
</tr>
<tr>
<td></td>
<td>3. 握手包 (H -&gt; D)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>状态过程</td>
<td>1. 令牌包 (H -&gt; D)</td>
<td>SYNC</td>
<td>OUT</td>
<td>ADDR (0)</td>
<td>ENDP (0)</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td></td>
<td>2. 数据包 (H -&gt; D )</td>
<td>SYNC</td>
<td>DATA1</td>
<td>8 bytes</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
</tr>
<tr>
<td></td>
<td>3. 握手包 (D -&gt; H)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>即:</p>
<table>
<thead>
<tr>
<th>控制类型</th>
<th>建立过程</th>
<th>数据过程</th>
<th>状态过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>控制读</td>
<td>SETUP</td>
<td>IN(1)</td>
<td>OUT(1)</td>
</tr>
<tr>
<td></td>
<td>DATA0</td>
<td>DATA1</td>
<td>DATA1</td>
</tr>
</tbody>
</table>
<blockquote>
<p>这里需要注意的是，第一次主机只会读取一个数据包的设备描述符。</p>
<p>标准的设备描述有18字节，有些USB设备的端点0大小不足18字节（但至少具有8字节），在这种情况下，USB主机也是只发送一次数据输输入请求，多余的数据将不会再次请求。</p>
<p>因此，如果当设备端点0大小不足18字节时，就需要注意到这个问题。也就是说在第一次获取设备描述符时，只需要返回一次数据即可，不要再等主机继续获取剩余数据（如果还有），因为主机不会这么干的。</p>
<p>当主机成功获取到设备描述符的前8字节之后（USB协议规定端点0最大包长至少要有8字节），它就知道端点0的最大包长度了，因为端点0最大包长度刚好在设备描述符的第八字节处。</p>
</blockquote>
<h4 id="设置地址">2. 设置地址</h4>
<p>主机对设备又一次复位。这时就进人到了设置地址阶段。</p>
<p>USB主机往地址为0的设备的端点0发出一个设置地址的请求（控制传输的建立过程）。新的设备地址包含在建立过程的数据包中。具体的地址由USB主机负责管理，主机会分配一个唯一的地址给刚接入的设备。</p>
<p>USB设备在收到这个建立过程之后，就直接进入到状态过程，因为这个控制传输没有数据过程。然后设备等待主机请求状态返回（一个输入令牌包），收到输入令牌包后，设备就返回0长度的状态数据包。如果主机确认该状态包已经正确收到，就会发送应答包ACK给设备，设备在收到这个ACK之后，就要启用新的设备地址了。这样设备就分配到了一个唯一的设备地址，以后主机就通过它来访问该设备。</p>
<p>该过程具体如下</p>
<table>
<colgroup>
<col style="width: 10%">
<col style="width: 26%">
<col style="width: 8%">
<col style="width: 6%">
<col style="width: 27%">
<col style="width: 10%">
<col style="width: 5%">
<col style="width: 4%">
</colgroup>
<thead>
<tr>
<th>过程</th>
<th>包类型</th>
<th>同步域</th>
<th>PID</th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>建立过程</td>
<td>1. 令牌包 (H -&gt; D)</td>
<td>SYNC</td>
<td>SETUP</td>
<td>ADDR (0)</td>
<td>ENDP (0)</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td></td>
<td>2. 数据包 (H -&gt; D )</td>
<td>SYNC</td>
<td>DATA0</td>
<td>8 bytes (含设备地址)</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
</tr>
<tr>
<td></td>
<td>3. 握手包 (D -&gt; H)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>状态过程</td>
<td>1. 令牌包 (H -&gt; D)</td>
<td>SYNC</td>
<td>IN</td>
<td>ADDR (0)</td>
<td>ENDP (0)</td>
<td>CRC5</td>
<td>EOP</td>
</tr>
<tr>
<td></td>
<td>2. 数据包 (D -&gt; H )</td>
<td>SYNC</td>
<td>DATA1</td>
<td>8 bytes (空包)</td>
<td>CRC16</td>
<td>EOP</td>
<td></td>
</tr>
<tr>
<td></td>
<td>3. 握手包 (H -&gt; D)</td>
<td>SYNC</td>
<td>ACK</td>
<td>EOP</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>即:</p>
<table>
<thead>
<tr>
<th>控制类型</th>
<th>建立过程</th>
<th>状态过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>无数据过程写</td>
<td>SETUP (含设备地址)</td>
<td>IN(1)</td>
</tr>
<tr>
<td></td>
<td>DATA0</td>
<td>DATA1</td>
</tr>
</tbody>
</table>
<h4 id="主机再次获取设备描述符">3. 主机再次获取设备描述符</h4>
<p>这次跟第一次有点不一样，首先是主机不再使用地址0来访问设备，而是新的设备地址；另外，这次需要获取全部的18字节的设备描述符。如果你的端点0最大包长小于18字节，那就会有多次请求数据输入（即发送多个IN令牌包）。</p>
<h4 id="主机获取配置描述符">4. 主机获取配置描述符</h4>
<p>配置描述符总共为9字节。主机在获取到配置描述符后，根据配置描述符中所描述的配置集合总长度，获取配置集合。获取配置描述符和获取配置描述符集合的请求是差不多的，只是指定的长度不一样。</p>
<p>有些主机干脆不单独获取配置描述符，而是直接使用最大长度来获取配置描述符集合，因为设备实际返回的数据可以少于指定的字节数。配置集合包括配置描述符、接口描述符、类特殊描述符（如果有）、端点描述符等。接口描述符、类特殊描述符、端点描述符是不能单独获取的，必须跟随配置描述符以一个集合的方式一并返回。</p>
<blockquote>
<p>获取字符串描述符</p>
<p>如果有字符串描述符，还要获取字符串描述符。另外，像HD设备还有报告描述符等，它们是单独获取的。我们可以使用BUS
Hound（一个非常好的数据包监听软件，后面会介绍）查看数据包或者通过串口返回信息来查看具体的请求，从而在程序中增加对它们的响应代码。主机请求什么，你的程序就要响应什么。</p>
</blockquote>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/圈圈教你玩USB/01USB概述及协议基础/01USB概述及协议基础.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>圈圈教你玩USB</category>
      </categories>
      <tags>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 命令行工具的使用</title>
    <url>/2023/09/19/auto/1/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 Android 命令行工具的使用 <span id="more"></span></p>
<p>Android <a class="link" href="https://developer.android.com/tools">命令行工具<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="下载命令行工具">下载命令行工具</h3>
<p>在 Android Studio 下载界面最下面，<a class="link" href="https://developer.android.com/studio">仅下载命令行工具<i class="fas fa-external-link-alt"></i></a></p>
<p>当然也可以自动下载 (下载地址可以在弹出同意协议时右击获取下载链接)</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p android-sdk</span><br><span class="line"><span class="built_in">export</span> ANDROID_SDK_ROOT=android-sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_SDK_ROOT</span>/cmdline-tools/latest/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_SDK_ROOT</span>/platform-tools</span><br><span class="line"></span><br><span class="line">TOOLS_URL=https://dl.google.com/android/repository/commandlinetools-win-10406996_latest.zip</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$ANDROID_SDK_ROOT</span>/cmdline-tools"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$ANDROID_SDK_ROOT</span>/cmdline-tools</span><br><span class="line"></span><br><span class="line">    wget -c <span class="variable">$TOOLS_URL</span> -O cmdline-tools-latest.zip</span><br><span class="line"></span><br><span class="line">    unzip cmdline-tools-latest.zip -d <span class="variable">$ANDROID_SDK_ROOT</span>/cmdline-tools</span><br><span class="line">    <span class="built_in">mv</span> <span class="variable">$ANDROID_SDK_ROOT</span>/cmdline-tools/cmdline-tools <span class="variable">$ANDROID_SDK_ROOT</span>/cmdline-tools/latest</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 希望顺便下载平台工具</span></span><br><span class="line">    sdkmanager.bat <span class="string">"platform-tools"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建模拟器">创建模拟器</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有包</span></span><br><span class="line">sdkmanager.bat --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装模拟器和对应的包</span></span><br><span class="line">sdkmanager.bat <span class="string">"platforms;android-23"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装模拟器和系统镜像 (选 x86 本机运行会快很多)</span></span><br><span class="line">sdkmanager.bat <span class="string">"emulator"</span> <span class="string">"platform-tools"</span> <span class="string">"system-images;android-23;google_apis;x86_64"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建设备 </span></span><br><span class="line">avdmanager.bat create avd --force --name Nexus6P --abi google_apis/x86_64 --package <span class="string">'system-images;android-23;google_apis;x86_64'</span> --device <span class="string">"Nexus 6P"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有设备</span></span><br><span class="line">avdmanager.bat list avd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动设备</span></span><br><span class="line">./android-sdk/emulator/emulator -avd Nexus6P -skin 1440x2560</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持 adb 调试, 需下载 platform-tools</span></span><br><span class="line">adb devices</span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建工程">创建工程</h3>
<p>使用 Android Studio 创建</p>
<p>gradle 下载慢, 使用国内镜像源, 修改
<code>gradle/wrapper/gradle-wrapper.properties</code></p>
<p>添加下载地址前缀 <code>mirrors.huaweicloud.com/gradle</code></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 命令行编译</span></span><br><span class="line">./gradlew.bat build</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>可能会出现 JDK 版本不对导致编译失败，设置好对应版本即可</p>
</blockquote>
<p>编译后可生成未签名的 apk</p>
<h4 id="手动打包">手动打包</h4>
<p>参考官网<a class="link" href="https://developer.android.com/build/building-cmdline">命令行构建方式<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://authmane512.medium.com/how-to-build-an-apk-from-command-line-without-ide-7260e1e22676">更加极端的方式
(仅供参考)<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载构建工具</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_SDK_ROOT</span>/build-tools/34.0.0</span><br><span class="line">sdkmanager.bat <span class="string">"build-tools;34.0.0"</span></span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Android/APP/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Android</category>
        <category>SDK</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK BoxButton</title>
    <url>/2023/01/21/auto/27/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍布局容器</p>
<span id="more"></span>
<p>在创建应用程序时，您可能希望在一个窗口中放置多个小部件。
这样做时，控制每个小部件的位置和大小就变得很重要。
这就是组装(Packing)的用武之地。</p>
<p>GTK附带了各种布局容器，它们的目的是控制添加到其中的子小部件的布局，例如：</p>
<ul>
<li>GtkBox</li>
<li>GtkGrid</li>
<li>GtkRevealer</li>
<li>GtkStack</li>
<li>GtkOverlay</li>
<li>GtkPaned</li>
<li>GtkExpander</li>
<li>GtkFixed</li>
</ul>
<p>main.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_hello</span> <span class="params">(GtkWidget *widget, gpointer data)</span></span><br><span class="line">{</span><br><span class="line">    g_print (<span class="string">"Hello World\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">activate</span> <span class="params">(GtkApplication *app, gpointer user_data)</span></span><br><span class="line">{</span><br><span class="line">    GtkWidget *window;</span><br><span class="line">    GtkWidget *button;</span><br><span class="line">    GtkWidget *box;</span><br><span class="line"></span><br><span class="line">    window = gtk_application_window_new (app);</span><br><span class="line">    gtk_window_set_title (GTK_WINDOW (window), <span class="string">"Window"</span>);</span><br><span class="line">    gtk_window_set_default_size (GTK_WINDOW (window), <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, <span class="number">0</span>);</span><br><span class="line">    gtk_widget_set_halign (box, GTK_ALIGN_CENTER);</span><br><span class="line">    gtk_widget_set_valign (box, GTK_ALIGN_CENTER);</span><br><span class="line"></span><br><span class="line">    gtk_window_set_child (GTK_WINDOW (window), box);</span><br><span class="line"></span><br><span class="line">    button = gtk_button_new_with_label (<span class="string">"Hello World"</span>);</span><br><span class="line"></span><br><span class="line">    g_signal_connect (button, <span class="string">"clicked"</span>, G_CALLBACK (print_hello), <span class="literal">NULL</span>);</span><br><span class="line">    g_signal_connect_swapped (button, <span class="string">"clicked"</span>, G_CALLBACK (gtk_window_destroy), window);</span><br><span class="line"></span><br><span class="line">    gtk_box_append (GTK_BOX (box), button);</span><br><span class="line"></span><br><span class="line">    gtk_widget_show (window);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">    GtkApplication *app;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    app = gtk_application_new (<span class="string">"org.gtk.example"</span>, G_APPLICATION_DEFAULT_FLAGS);</span><br><span class="line">    g_signal_connect (app, <span class="string">"activate"</span>, G_CALLBACK (activate), <span class="literal">NULL</span>);</span><br><span class="line">    status = g_application_run (G_APPLICATION (app), argc, argv);</span><br><span class="line">    g_object_unref (app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>编译</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/02BoxButton/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK Packing</title>
    <url>/2023/01/21/auto/28/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 GTK 容器布局 <span id="more"></span></p>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_hello</span><span class="params">(GtkWidget *widget, gpointer data)</span></span><br><span class="line">{</span><br><span class="line">    g_print(<span class="string">"Hello World\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">activate</span><span class="params">(GtkApplication *app, gpointer user_data)</span></span><br><span class="line">{</span><br><span class="line">    GtkWidget *window;</span><br><span class="line">    GtkWidget *grid;</span><br><span class="line">    GtkWidget *button;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 创建新窗口，并设置其标题 */</span></span><br><span class="line">    window = gtk_application_window_new(app);</span><br><span class="line">    gtk_window_set_title(GTK_WINDOW(window), <span class="string">"Window"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在这里我们构造了一个容器，它将包装我们的按钮 */</span></span><br><span class="line">    grid = gtk_grid_new();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 把容器装在 window 内 */</span></span><br><span class="line">    gtk_window_set_child(GTK_WINDOW(window), grid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将第一个按钮放在网格单元格(0，0)中，并使其在水平和垂直方向上仅填充1个单元格(即 no spanning) */</span></span><br><span class="line">    button = gtk_button_new_with_label(<span class="string">"Button 1"</span>);</span><br><span class="line">    g_signal_connect(button, <span class="string">"clicked"</span>, G_CALLBACK(print_hello), <span class="literal">NULL</span>);</span><br><span class="line">    gtk_grid_attach(GTK_GRID(grid), button, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将第二个按钮放置在网格单元格(1，0)中，并使其仅水平和垂直填充1个单元格(即 no spanning) */</span></span><br><span class="line">    button = gtk_button_new_with_label(<span class="string">"Button 2"</span>);</span><br><span class="line">    g_signal_connect(button, <span class="string">"clicked"</span>, G_CALLBACK(print_hello), <span class="literal">NULL</span>);</span><br><span class="line">    gtk_grid_attach(GTK_GRID(grid), button, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将Quit按钮放置在网格单元(0，1)中，并使其跨过(span)2列。 */</span></span><br><span class="line">    button = gtk_button_new_with_label(<span class="string">"Quit"</span>);</span><br><span class="line">    g_signal_connect_swapped(button, <span class="string">"clicked"</span>, G_CALLBACK(gtk_window_destroy), window);</span><br><span class="line">    gtk_grid_attach(GTK_GRID(grid), button, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    gtk_widget_show(window);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">    GtkApplication *app;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">    app = gtk_application_new(<span class="string">"org.gtk.example"</span>, G_APPLICATION_DEFAULT_FLAGS);</span><br><span class="line">    g_signal_connect(app, <span class="string">"activate"</span>, G_CALLBACK(activate), <span class="literal">NULL</span>);</span><br><span class="line">    status = g_application_run(G_APPLICATION(app), argc, argv);</span><br><span class="line">    g_object_unref(app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>编译 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/03Packing/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK Custom Drawing</title>
    <url>/2023/01/21/auto/29/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 GTK 自定义绘制 <span id="more"></span></p>
<p>许多小部件，如按钮，它们的所有绘图都是自己完成的。
你只需告诉他们你想要看到的标签，他们就会自动完成绘制按钮轮廓和聚焦矩形等。有时，有必要进行一些定制绘制。
在这种情况下，GtkDrawingArea 可能是合适的小部件。
它提供了一个画布，您可以通过设置其绘制功能在画布上绘制。</p>
<p>窗口小部件的内容通常需要部分或全部重新绘制，例如，当移动另一个窗口并揭示该窗口的一部分时，或者当包含该窗口的窗口被调整大小时。
还可以通过调用 gtk_widget_queue_draw () 显式地重新绘制小部件。 GTK
通过向 draw 函数提供现成的 cairo 上下文来处理大部分细节。</p>
<p>以下示例显示如何将绘制函数与 GtkDrawingArea
一起使用。它比前面的示例稍微复杂一些，因为它还演示了使用事件控制器处理输入事件。</p>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>编译 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure><p></p>
<ul>
<li><p>cairo_t</p>
<p>cairo_t 包含 rendering device 的当前状态，包括尚未绘制的形状的坐标。
cairo_t 上下文(即 cairo_t 已经命名的 cairo_t 对象) 是 cairo 的核心内容，
所有使用 cairo 进行的绘制都是使用 cairo_t 对象完成的</p></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/04CustomDrawing/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>02UseLibc</title>
    <url>/2023/03/21/auto/2/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍在ARM汇编中使用 Libc 和半主机调试 <span id="more"></span></p>
<p>关于 ARM 汇编快速入门，请 <a class="link" href="https://www.ic.unicamp.br/~celio/mc404-2014/docs/gnu-arm-directives.pdf">参考<i class="fas fa-external-link-alt"></i></a></p>
<p>start.s</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">.syntax unified</span><br><span class="line"></span><br><span class="line">/* 代码段 */</span><br><span class="line">.section .text.reset</span><br><span class="line">.type reset, %function</span><br><span class="line">.globl  reset</span><br><span class="line"></span><br><span class="line">/* 程序入口 */</span><br><span class="line">reset:</span><br><span class="line"></span><br><span class="line">    ldr sp, =_estack</span><br><span class="line"></span><br><span class="line">    /* 将 data 段从 flash 拷贝到 SRAM */</span><br><span class="line">    ldr r0, =_data_start</span><br><span class="line">    ldr r1, =_data_end</span><br><span class="line">    ldr r2, =_init_data_start</span><br><span class="line">    movs r3, #0</span><br><span class="line">    b copy_data_loop</span><br><span class="line"></span><br><span class="line">copy_data:</span><br><span class="line">    ldr r4, [r2, r3]    // r4 = *(_init_data_start + r3)</span><br><span class="line">    str r4, [r0, r3]    // *(_data_start + r3) = r4</span><br><span class="line">    adds r3, r3, #4     // r3 += 4</span><br><span class="line"></span><br><span class="line">copy_data_loop:</span><br><span class="line">    adds r4, r0, r3     // r4 = _data_start + r3</span><br><span class="line">    cmp r4, r1         </span><br><span class="line">    bcc copy_data       // if(r4 != r1) copy_data</span><br><span class="line"></span><br><span class="line">    /* 将 0 填充到 .bss 段中 */</span><br><span class="line">    ldr r2, =_bss_start</span><br><span class="line">    ldr r4, =_bss_end</span><br><span class="line">    movs r3, #0</span><br><span class="line">    b fill_zero_loop</span><br><span class="line"></span><br><span class="line">fill_zero:</span><br><span class="line">    str  r3, [r2]       // *(r2) = 0</span><br><span class="line">    adds r2, r2, #4     // r2 += 4</span><br><span class="line"></span><br><span class="line">fill_zero_loop:</span><br><span class="line">    cmp r2, r4</span><br><span class="line">    bcc fill_zero       // if(r2 != _bss_end) fill_zero</span><br><span class="line"></span><br><span class="line">    /* 调用 libc 的静态初始化 */</span><br><span class="line">    bl __libc_init_array</span><br><span class="line"></span><br><span class="line">    /* 调用应用入口点 */</span><br><span class="line">    bl  main</span><br><span class="line">    bx  lr</span><br><span class="line"></span><br><span class="line">/* 中断向量表段 */</span><br><span class="line">.section  .vectors, "a"</span><br><span class="line">    .word _estack</span><br><span class="line">    .word reset</span><br></pre></td></tr></tbody></table></figure>
<p>main.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> aaa = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *_sbrk(<span class="type">ptrdiff_t</span> incr)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">char</span> _end[];</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">char</span> _heap_end[];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *curbrk = _end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((curbrk + incr &lt; _end) || (curbrk + incr &gt; _heap_end))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    curbrk += incr;</span><br><span class="line">    <span class="keyword">return</span> curbrk - incr;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">initialise_monitor_handles</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    initialise_monitor_handles();</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *data = <span class="built_in">malloc</span>(<span class="number">0x2000</span> - <span class="number">0x100</span>);</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(data, <span class="string">"I am Jack"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World, %s, aaa is %d\n"</span>, data, aaa);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> _data_start;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> _data_end;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> _bss_start;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> _bss_end;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> _heap_start;</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">uint32_t</span> _init_data_start;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"_data_start %p\n"</span>, &amp;_data_start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"_data_end %p\n"</span>, &amp;_data_end);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"_bss_start %p\n"</span>, &amp;_bss_start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"_bss_end %p\n"</span>, &amp;_bss_end);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"_heap_start %p\n"</span>, &amp;_heap_start);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"_init_data_start %p\n"</span>, &amp;_init_data_start);</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">64</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>link.ld</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 程序入口 */</span><br><span class="line">ENTRY(reset)</span><br><span class="line"></span><br><span class="line">/* 栈指针初始位置 */</span><br><span class="line">_estack = ORIGIN(DTCMRAM) + LENGTH(DTCMRAM);</span><br><span class="line"></span><br><span class="line">/* 用于预估堆栈大小 */</span><br><span class="line">_heap_size = 0x2000;</span><br><span class="line">_stack_size = 0x4000;</span><br><span class="line"></span><br><span class="line">/* 存储器分布 */</span><br><span class="line">MEMORY</span><br><span class="line">{</span><br><span class="line">    DTCMRAM (xrw)       : ORIGIN = 0x20000000, LENGTH = 128K</span><br><span class="line">    FLASH (rx)          : ORIGIN = 0x8000000, LENGTH = 128K</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">/* 段组织 */</span><br><span class="line">SECTIONS</span><br><span class="line">{</span><br><span class="line">    /* 代码 */</span><br><span class="line">    .text :</span><br><span class="line">    {</span><br><span class="line">        KEEP(*(.vectors))</span><br><span class="line">        *(.text)</span><br><span class="line">        *(.text.*)</span><br><span class="line"></span><br><span class="line">        KEEP (*(.init))</span><br><span class="line">        KEEP (*(.fini))</span><br><span class="line"></span><br><span class="line">    } &gt;FLASH</span><br><span class="line"></span><br><span class="line">    /* 只读数据 */</span><br><span class="line">    .rodata :</span><br><span class="line">    {</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        *(.rodata)</span><br><span class="line">        *(.rodata*)</span><br><span class="line">    } &gt;FLASH</span><br><span class="line"></span><br><span class="line">    /* 将读写数据段放到 data 段 */</span><br><span class="line">    .data : </span><br><span class="line">    {</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _data_start = .; </span><br><span class="line"></span><br><span class="line">        *(.data)</span><br><span class="line">        *(.data*)</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _data_end = .;</span><br><span class="line">    } &gt;DTCMRAM AT&gt; FLASH</span><br><span class="line"></span><br><span class="line">    /* 指向 flash 中用于初始化的 data */</span><br><span class="line">    _init_data_start = LOADADDR(.data);</span><br><span class="line"></span><br><span class="line">    /* 未初始化数据放到 bss 段 */</span><br><span class="line">    .bss :</span><br><span class="line">    {</span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _bss_start = .;</span><br><span class="line">        __bss_start__ = _bss_start;</span><br><span class="line">        *(.bss)</span><br><span class="line">        *(.bss*)</span><br><span class="line">        *(COMMON)</span><br><span class="line"></span><br><span class="line">        . = ALIGN(4);</span><br><span class="line">        _bss_end = .;</span><br><span class="line">        __bss_end__ = _bss_end;</span><br><span class="line">    } &gt;DTCMRAM</span><br><span class="line"></span><br><span class="line">    /* 堆 */</span><br><span class="line">    .heap :</span><br><span class="line">    {</span><br><span class="line">        . = ALIGN(8);</span><br><span class="line">        _heap_start = .;</span><br><span class="line">        PROVIDE ( end = . );</span><br><span class="line">        PROVIDE ( _end = . );</span><br><span class="line">        . = . + _heap_size;</span><br><span class="line">        _heap_end = .;</span><br><span class="line">        . = . + _stack_size;</span><br><span class="line">        . = ALIGN(8);</span><br><span class="line">    } &gt;DTCMRAM</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Makefile</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">CC = arm-none-eabi-gcc</span><br><span class="line"></span><br><span class="line">LDFLAGS = -mcpu=cortex-m7 -lc -lrdimon -Tlink.ld -Wl,--gc-sections</span><br><span class="line"></span><br><span class="line">CFLAGS = -mcpu=cortex-m7 -g </span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	@mkdir build -p</span><br><span class="line">	<span class="variable">$(CC)</span> -c  <span class="variable">$(CFLAGS)</span>   main.c -o build/main.o</span><br><span class="line">	<span class="variable">$(CC)</span> -c  <span class="variable">$(CFLAGS)</span>   start.s -o build/start.o</span><br><span class="line">	<span class="variable">$(CC)</span> build/start.o  build/main.o <span class="variable">$(LDFLAGS)</span> -Wl,-Map=build/output.map,--cref -o build/demo.elf</span><br><span class="line"></span><br><span class="line"><span class="section">openocd:</span></span><br><span class="line">	make default &amp;&amp; openocd</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm build -rf</span><br></pre></td></tr></tbody></table></figure>
<p>openocd.cfg</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">source [find interface/stlink.cfg]</span><br><span class="line">source [find target/stm32h7x.cfg]</span><br><span class="line"></span><br><span class="line">reset_config none separate</span><br><span class="line"></span><br><span class="line">program  build/demo.elf verify</span><br></pre></td></tr></tbody></table></figure>
<h1 id="使用-c">1. 使用 C</h1>
<h2 id="初始化栈">1.1 初始化栈</h2>
<p>进入 C 的世界栈是必须的，在定义中断向量表时设置了第一个 word
的值就是栈的初始地址 _estack，</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">.section  .isr_vector</span><br><span class="line">    .word _estack</span><br><span class="line">    .word reset</span><br></pre></td></tr></tbody></table></figure>
<p>_estack 在 ld 文件中被指向为 DTCMRAM 的末尾，因为 ARM
体系中，栈是向低地址伸长，因此需要放在内存末尾处： </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">_estack = ORIGIN(DTCMRAM) + LENGTH(DTCMRAM);</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>中断向量表会被连接到 FLASH 的最开始地址：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 段组织 */</span><br><span class="line">SECTIONS</span><br><span class="line">{</span><br><span class="line">    /* 代码 */</span><br><span class="line">    .text :</span><br><span class="line">    {</span><br><span class="line">        KEEP(*(.vectors))</span><br><span class="line">        *(.text)</span><br><span class="line">        *(.text.*)</span><br><span class="line"></span><br><span class="line">        KEEP (*(.init))</span><br><span class="line">        KEEP (*(.fini))</span><br><span class="line"></span><br><span class="line">    } &gt;FLASH</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>STM32 复位后，BOOT=0 时，CPU 会从 FLASH 地址的第一个 word 处加载 sp
指针，从第二个 word 处加载 pc
指针，从而转跳到用户代码，因此这里只需要在中断向量表的第一个 word
填入栈地址，C 的环境便建立好了。</p>
<p>但是一般来说，为了保险，在进入用户代码的第一时间，我们还是需要主动设置一下
sp 地址，因为有可能 reset 函数不是通过硬件复位进去的，这时 sp
可能已经更改，而且由于是软件调用复位， CPU 不会自动加载向量表中的 sp
值，因此需要第一时间重写设置 sp 寄存器： </p><figure class="highlight as"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 代码段 */</span></span><br><span class="line">.section .text</span><br><span class="line">.type reset, %<span class="keyword">function</span></span><br><span class="line">.<span class="title function_">globl</span>  <span class="title function_">reset</span></span><br><span class="line"></span><br><span class="line">/* 程序入口 */</span><br><span class="line"><span class="title function_">reset</span>:</span><br><span class="line">    ldr <span class="title function_">sp</span>, =_<span class="title function_">estack</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<blockquote>
<p>ldr 属于 THUMB 指令格式，需要在顶部指示 .syntax
unified，说明下面的指令是 ARM 和 THUMB 通用格式的</p>
</blockquote>
<h2 id="初始化内存变量">1.2 初始化内存变量</h2>
<p>虽然这时候可以进入 C 的环境了，但是 C
中用到的内存和变量都还是随机，并没有进行初始化和赋值。这样一来，C
中定义的一些全局变量可能无法正常使用，因此这一步需要在汇编中将变量进行初始化和赋值。</p>
<p>一般来说，为了方便一次性对各个 C
文件中的静态或全局变量进行初始化，在链接器中需要对它们进行合理的安排：</p>
<ul>
<li><p>首先是只读数据，只读数据在编译阶段就已经确定其值且不会再更改，因此我们可以把只读数据放到
FLASH
中，这样就不需要占用内存了，同时在启动代码中也不需要对其进行赋值和初始化：
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 将声明为 const 的数据放到 FLASH */</span><br><span class="line">.rodata :</span><br><span class="line">{</span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">    *(.rodata)</span><br><span class="line">    *(.rodata*)</span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">} &gt;FLASH</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>对于有设置了非 0 初值的可读写数据需要同时放到内存以及
FLASH，然后在启动代码中，将 FLASH
中的初值赋值到内存，从而完成变量的初始化。</p></li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 将读写数据段放到 data 段 */</span><br><span class="line">.data : </span><br><span class="line">{</span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">    _data_start = .; </span><br><span class="line"></span><br><span class="line">    *(.data)</span><br><span class="line">    *(.data*)</span><br><span class="line"></span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">    _data_end = .;</span><br><span class="line">} &gt;DTCMRAM AT&gt; FLASH</span><br><span class="line"></span><br><span class="line">/* 指向 flash 中用于初始化的 data */</span><br><span class="line">_init_data_start = LOADADDR(.data);</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>未初始化数据放到 bss 段</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 未初始化数据放到 bss 段 */</span><br><span class="line">.bss :</span><br><span class="line">{</span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">    _bss_start = .;</span><br><span class="line">    __bss_start__ = _bss_start;</span><br><span class="line">    *(.bss)</span><br><span class="line">    *(.bss*)</span><br><span class="line">    *(COMMON)</span><br><span class="line"></span><br><span class="line">    . = ALIGN(4);</span><br><span class="line">    _bss_end = .;</span><br><span class="line">    __bss_end__ = _bss_end;</span><br><span class="line">} &gt;DTCMRAM</span><br></pre></td></tr></tbody></table></figure>
<p>在 ld 中确定好位置后在 start.s 中进行初始化。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">    /* 将 data 段从 flash 拷贝到 SRAM */</span><br><span class="line">    ldr r0, =_data_start</span><br><span class="line">    ldr r1, =_data_end</span><br><span class="line">    ldr r2, =_init_data_start</span><br><span class="line">    movs r3, #0</span><br><span class="line">    b copy_data_loop</span><br><span class="line"></span><br><span class="line">copy_data:</span><br><span class="line">    ldr r4, [r2, r3]    // r4 = *(_init_data_start + r3)</span><br><span class="line">    str r4, [r0, r3]    // *(_data_start + r3) = r4</span><br><span class="line">    adds r3, r3, #4     // r3 += 4</span><br><span class="line"></span><br><span class="line">copy_data_loop:</span><br><span class="line">    adds r4, r0, r3     // r4 = _data_start + r3</span><br><span class="line">    cmp r4, r1         </span><br><span class="line">    bcc copy_data       // if(r4 != r1) copy_data</span><br><span class="line"></span><br><span class="line">    /* 将 0 填充到 .bss 段中 */</span><br><span class="line">    ldr r2, =_bss_start</span><br><span class="line">    ldr r4, =_bss_end</span><br><span class="line">    movs r3, #0</span><br><span class="line">    b fill_zero_loop</span><br><span class="line"></span><br><span class="line">fill_zero:</span><br><span class="line">    str  r3, [r2]       // *(r2) = 0</span><br><span class="line">    adds r2, r2, #4     // r2 += 4</span><br><span class="line"></span><br><span class="line">fill_zero_loop:</span><br><span class="line">    cmp r2, r4</span><br><span class="line">    bcc fill_zero       // if(r2 != _bss_end) fill_zero</span><br></pre></td></tr></tbody></table></figure>
<h1 id="使用-libc">2. 使用 libc</h1>
<p><a class="link" href="https://llvm-gcc-renesas.com/wiki/index.php?title=How_does_Newlib_initialize_the_heap%3F">参考<i class="fas fa-external-link-alt"></i></a></p>
<p>arm-none-eabi-gcc 默认使用的是 newlib, 前面已经初始化好 data 和 bss
段，这里只需在 start 中调用 libc 的初始化函数即可</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 调用 libc 的静态初始化 */</span><br><span class="line">bl __libc_init_array</span><br></pre></td></tr></tbody></table></figure>
<p>__libc_init_array 函数开始时会调用 <em>.init 中的段，结束时调用
</em>.fini 中的段，因此在 .text 中添加</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">KEEP (*(.init))</span><br><span class="line">KEEP (*(.fini))</span><br></pre></td></tr></tbody></table></figure>
<h1 id="使用堆">3. 使用堆</h1>
<p>要使用标准库的 malloc, 需要指定堆内存地址，默认情况下标准库使用 _end
作为堆的起始地址，_end 表示 data 和 bss 结束后的内存地址，即除了 data
bss， 剩余的都分给了堆栈</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/* 堆 */</span><br><span class="line">.heap :</span><br><span class="line">{</span><br><span class="line">    . = ALIGN(8);</span><br><span class="line">    _heap_start = .;</span><br><span class="line">    PROVIDE ( end = . );</span><br><span class="line">    PROVIDE ( _end = . );</span><br><span class="line">    . = . + _heap_size;</span><br><span class="line">    _heap_end = .;</span><br><span class="line">    . = . + _stack_size;</span><br><span class="line">    . = ALIGN(8);</span><br><span class="line">} &gt;DTCMRAM</span><br></pre></td></tr></tbody></table></figure>
<p>我们把栈放在堆后面，为防止堆栈重叠，或超过可用内存，可预先设置堆栈大小，随着应用变量的使用，堆的初始地址边界会随之向高地址移动，当超过了
RAM 大小，链接时就会报错。</p>
<p>malloc 会调用 _sbrk
函数来确认内存大小，根据链接脚本中的堆地址和大小我们可以实现：
</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> *_sbrk(<span class="type">ptrdiff_t</span> incr)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">char</span> _end[];</span><br><span class="line">    <span class="keyword">extern</span> <span class="type">char</span> _heap_end[];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *curbrk = _end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((curbrk + incr &lt; _end) || (curbrk + incr &gt; _heap_end))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span> - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    curbrk += incr;</span><br><span class="line">    <span class="keyword">return</span> curbrk - incr;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h1 id="使用半主机模式进行调试">4. 使用半主机模式进行调试</h1>
<p>要使用半主机，可链接到 <code>-lrdimon</code>，librdimon
提供了一系列系统调用函数和 GDB
进行通信，从而实现在调试时执行标准输入输出和文件读写。</p>
<p>半主机模式使用前需进行初始化，使用 initialise_monitor_handles
进行初始化，然后就可以愉快地使用 printf 和 fopen 等函数了。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">initialise_monitor_handles</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    initialise_monitor_handles();</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>当然不要忘记在 GDB 中使能半主机调试，若是用 VSCode 可直接在
setupCommands 中添加</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span><span class="attr">"text"</span><span class="punctuation">:</span> <span class="string">"monitor arm semihosting enable"</span><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h1 id="map-文件">5. Map 文件</h1>
<p><a class="link" href="https://interrupt.memfault.com/blog/get-the-most-out-of-the-linker-map-file">参考<i class="fas fa-external-link-alt"></i></a></p>
<p>map 文件包含了链接的各个 obj
文件的输出情况以及各个段地址的详情信息等，在链接时通过参数
<code>-Wl,-Map=build/output.map,--cref</code> 可输出 map 文件。 <a class="link" href="https://blog.csdn.net/laifengyuan1/article/details/108662522">参考
2<i class="fas fa-external-link-alt"></i></a></p>
<p><code>--cref</code>
可生成交叉引用列表（每个符号出自哪个目标文件，如果还有指定-Map，则会添加到
map 文件中。否则，打印到标准输出）</p>
<h1 id="glibc-中的特殊的段">6. Glibc 中的特殊的段</h1>
<table>
<colgroup>
<col style="width: 7%">
<col style="width: 92%">
</colgroup>
<thead>
<tr>
<th>段名</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>.init</td>
<td>一个函数放到。init 段，在 main 函数执行前系统就会执行它</td>
</tr>
<tr>
<td>.fini</td>
<td>假如一个函数放到。fini 段，在 main 函数返回后该函数就会被执行</td>
</tr>
</tbody>
</table>
<h2 id="libc_init_array-这个函数中执行的关键过程如下">__libc_init_array
这个函数中执行的关键过程如下：</h2>
<p>调用 .preinit_array 段中的预初始化函数 调用 .init 段中的 _init 函数
调用 .init_array 中的所有函数</p>
<p>这里我需要解释下，在一个段中可能会存在多个函数，根据链接脚本的写法，链接器会在链接时将段名相同的函数指针放到同一个段中，然后通过在段的前后设定锚点来依次执行相应的函数，这样的方式在一些系统的驱动初始化中也能见到！</p>
<p>与 __libc_init_array 对应的函数是 __libc_fini_array，这个函数是在
main 函数执行完成后执行的。它首先会调用 .fini_array
中的所有函数，然后调用 _fini 函数，在嵌入式中一般不会执行到
__libc_fini_array 函数。</p>
<p>在 pc 端也有类似的过程，_init 与 _fini 函数在 crti.o 中被定义。</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/ARM/ARMGNU/02UseLibc/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>ARMGNU</category>
      </categories>
      <tags>
        <tag>libc</tag>
        <tag>半主机</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK Building user interfaces</title>
    <url>/2023/01/27/auto/30/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何使用 XML 构建用户界面 <span id="more"></span></p>
<p>当构建一个具有数十或数百个小部件的更复杂的用户界面时，用C代码完成所有设置工作都很麻烦，而且几乎不可能进行更改。
值得庆幸的是，GTK通过使用可由GtkBuilder类解析的XML格式的UI描述，支持将用户界面布局与业务逻辑分离。</p>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glib/gstdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_hello</span><span class="params">(GtkWidget *widget, gpointer data)</span></span><br><span class="line">{</span><br><span class="line">    g_print(<span class="string">"Hello World\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quit_cb</span><span class="params">(GtkWindow *window)</span></span><br><span class="line">{</span><br><span class="line">    gtk_window_close(window);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">activate</span><span class="params">(GtkApplication *app, gpointer user_data)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">/* Construct a GtkBuilder instance and load our UI description */</span></span><br><span class="line">    GtkBuilder *builder = gtk_builder_new();</span><br><span class="line">    gtk_builder_add_from_file(builder, <span class="string">"builder.ui"</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Connect signal handlers to the constructed widgets. */</span></span><br><span class="line">    GObject *window = gtk_builder_get_object(builder, <span class="string">"window"</span>);</span><br><span class="line">    gtk_window_set_application(GTK_WINDOW(window), app);</span><br><span class="line"></span><br><span class="line">    GObject *button = gtk_builder_get_object(builder, <span class="string">"button1"</span>);</span><br><span class="line">    g_signal_connect(button, <span class="string">"clicked"</span>, G_CALLBACK(print_hello), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    button = gtk_builder_get_object(builder, <span class="string">"button2"</span>);</span><br><span class="line">    g_signal_connect(button, <span class="string">"clicked"</span>, G_CALLBACK(print_hello), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    button = gtk_builder_get_object(builder, <span class="string">"quit"</span>);</span><br><span class="line">    g_signal_connect_swapped(button, <span class="string">"clicked"</span>, G_CALLBACK(quit_cb), window);</span><br><span class="line"></span><br><span class="line">    gtk_widget_show(GTK_WIDGET(window));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* We do not need the builder any more */</span></span><br><span class="line">    g_object_unref(builder);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> GTK_SRCDIR</span></span><br><span class="line">    g_chdir(GTK_SRCDIR);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    GtkApplication *app = gtk_application_new(<span class="string">"org.gtk.example"</span>, G_APPLICATION_DEFAULT_FLAGS);</span><br><span class="line">    g_signal_connect(app, <span class="string">"activate"</span>, G_CALLBACK(activate), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> status = g_application_run(G_APPLICATION(app), argc, argv);</span><br><span class="line">    g_object_unref(app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>编译</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure>
<p>请注意， GtkBuilder
还可用于构造非小部件的对象，如树模型、调整等。这就是我们在此处使用的方法称为Gtk_Builder_Get_Object()的原因，它返回GObject而不是GtkWidget。</p>
<p>通常，您会将完整路径传递给gtk_Builder_Add_from_file()，以使程序的执行独立于当前目录。
安装UI描述和类似数据的常见位置是/usr/share/appname。
还可以将UI描述作为字符串嵌入到源代码中，并使用gtk_Builder_Add_from_string()来加载它。</p>
<p>但是，将UI描述保存在单独的文件中有几个好处：
无需重新编译程序即可对用户界面进行细微调整。
将用户界面代码与应用程序的业务逻辑隔离更容易。
使用复合小部件模板可以更轻松地将您的UI重构为单独的类。</p>
<p>使用GResource可以将两者结合在一起：您可以在源代码存储库中单独保存UI定义文件，然后将它们嵌入到您的应用程序中。</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gresources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gresource</span> <span class="attr">prefix</span>=<span class="string">"/org/gtk/exampleapp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span> <span class="attr">preprocess</span>=<span class="string">"xml-stripblanks"</span>&gt;</span>window.ui<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gresource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gresources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/05GtkBuilder/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK Building user interfaces</title>
    <url>/2023/01/27/auto/31/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文将从头开始构建一个简单的应用程序，随着时间的推移添加越来越多的部分。
<span id="more"></span></p>
<h3 id="第一步-一个简单的程序">第一步: 一个简单的程序</h3>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"exampleapp.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> g_application_run (G_APPLICATION (example_app_new ()), argc, argv);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> 所有应用程序逻辑都在应用程序类中，它是
GtkApplication 的子类。
我们的示例还没有任何有趣的功能。它所做的一切就是在没有参数的情况下激活时打开一个窗口，如果它是带参数启动的，则打开给它的文件。
为了处理这两种情况，我们覆盖了 activate() vfunc 和 open
虚函数，前者在没有命令行参数的情况下启动应用程序时调用，后者在使用命令行参数启动应用程序时调用。
要了解有关GApplication入口点的更多信息，请参考GIO文档。<p></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>编译</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/06BuildingApplications/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK With CSS</title>
    <url>/2023/01/28/auto/32/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何使用 CSS 对 GTK4 进行样式设计</p>
<span id="more"></span>
<p>GTK 各种CSS属性, 参考<a class="link" href="https://docs.w3cub.com/gtk~4.0/ch39">网站 w3cub<i class="fas fa-external-link-alt"></i></a> 和<a class="link" href="https://docs.gtk.org/gtk3/css-overview.html">官方GTK3例子<i class="fas fa-external-link-alt"></i></a></p>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">print_hello</span><span class="params">(GtkWidget *widget, gpointer data)</span></span><br><span class="line">{</span><br><span class="line">    g_print(<span class="string">"Hello World\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quit_cb</span><span class="params">(GtkWindow *window)</span></span><br><span class="line">{</span><br><span class="line">    gtk_window_close(window);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">activate</span><span class="params">(GtkApplication *app, gpointer user_data)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">/* 加载 UI 界面文件 */</span></span><br><span class="line">    GtkBuilder *builder = gtk_builder_new();</span><br><span class="line">    gtk_builder_add_from_file(builder, <span class="string">"builder.ui"</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 从界面构造器中获取窗口, 并设置为当前应用的窗口 */</span></span><br><span class="line">    GObject *window = gtk_builder_get_object(builder, <span class="string">"window"</span>);</span><br><span class="line">    gtk_window_set_application(GTK_WINDOW(window), app);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 为我们的按钮添加点击响应 */</span></span><br><span class="line">    GObject *button = gtk_builder_get_object(builder, <span class="string">"button1"</span>);</span><br><span class="line">    g_signal_connect(button, <span class="string">"clicked"</span>, G_CALLBACK(print_hello), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    button = gtk_builder_get_object(builder, <span class="string">"button2"</span>);</span><br><span class="line">    g_signal_connect(button, <span class="string">"clicked"</span>, G_CALLBACK(print_hello), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    button = gtk_builder_get_object(builder, <span class="string">"quit"</span>);</span><br><span class="line">    g_signal_connect_swapped(button, <span class="string">"clicked"</span>, G_CALLBACK(quit_cb), window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 加载 CSS 样式到整个窗口 */</span></span><br><span class="line">    GdkDisplay *display = gtk_widget_get_display (GTK_WIDGET (window));</span><br><span class="line">    GtkCssProvider *provider = gtk_css_provider_new ();</span><br><span class="line">    gtk_css_provider_load_from_path(provider, <span class="string">"builder.css"</span>);</span><br><span class="line">    gtk_style_context_add_provider_for_display (display, GTK_STYLE_PROVIDER (provider), GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);</span><br><span class="line"></span><br><span class="line">    gtk_widget_show(GTK_WIDGET(window));</span><br><span class="line"></span><br><span class="line">    g_object_unref(builder);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    GtkApplication *app = gtk_application_new(<span class="string">"org.gtk.example"</span>, G_APPLICATION_DEFAULT_FLAGS);</span><br><span class="line">    g_signal_connect(app, <span class="string">"activate"</span>, G_CALLBACK(activate), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> status = g_application_run(G_APPLICATION(app), argc, argv);</span><br><span class="line">    g_object_unref(app);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>界面文件 builder.ui</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"window"</span> <span class="attr">class</span>=<span class="string">"GtkWindow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span>Grid<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"grid"</span> <span class="attr">class</span>=<span class="string">"GtkGrid"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"button1"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Button 1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>myButton<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"column"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"row"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Button 2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>myButton<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"css-classes"</span>&gt;</span>myClass<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"column"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"row"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"quit"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Quit<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"myClass"</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"column"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"row"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"column-span"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>builder.css</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> {</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#myButton</span> {                  </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#669999</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">5px</span> black;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.myClass</span> {</span><br><span class="line">    <span class="attribute">color</span>: red;   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>编译</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> </span><br><span class="line">main.c builder.css builder.ui</span><br><span class="line">$ gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure>
<p>GTK 的 CSS 有几种基本选择器，如下:</p>
<ol type="1">
<li><p>标签选择器 类似于 HTML 里面的通过标签进行筛选，包含 GTK
内建的各种小部件, 比如 window, button, label. 标签值是通过
gtk_widget_class_set_css_name 进行设置的,
这个一般在构造函数中就设置好了。如果不是自定义的 widget 的话, GTK4
自带的控件就已经写好了，不需要更改:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">gtk_widget_class_set_css_name (widget_class, <span class="string">"button"</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>使用标签筛选器</p>
<p></p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span> {</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>类选择器 要让选择器能够匹配到某一类 Object, 需要在 Object
中添加类属性, 可以直接通过源代码添加:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">GtkStyleContext *context = gtk_widget_get_style_context(widget);</span><br><span class="line">gtk_style_context_add_class(context,<span class="string">"myClass"</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>也可以在 ui 文件中直接添加:</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Button 2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"myClass"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"myClass2"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"myClass3"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">     </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>另外, 注意到 <code>gtk_style_context_add_class</code> 是 add
也就是说和 HTML 类似的, 即一个元素可以同时添加多个类来描述</p>
<p>当然如果使用的是 <code>property</code>, 同时加入多个 property class
并不能添加多个 class, 但是 property 和 style 组合使用也是可以叠加的,
所以可以先使用 <code>property</code> 作为主调, 然后 style
则是附加的修饰. </p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Button 2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"css-classes"</span>&gt;</span>myClass<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Button 2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"css-classes"</span>&gt;</span>myClass<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"myClass2"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"myClass3"</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">     </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>类选择器使用 <code>.</code> 开头, 比如 </p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-class">.myClass</span> {</span><br><span class="line">    <span class="attribute">color</span>: red;   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>id 选择器</p>
<p>所谓的 id 就是 Object 的 name 属性, 可通过下面函数来设置 widget 的
name 属性</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gtk_widget_set_name</span><br></pre></td></tr></tbody></table></figure>
<p>或者在 ui 文件中直接添加</p>
<p></p><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"button2"</span> <span class="attr">class</span>=<span class="string">"GtkButton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span>Button 2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>myButton<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>
<p>css 中的 id 定义好后也是可以同时给多个 Object 使用的, 只要 Object
添加对应的 name 属性即可.</p>
<p>类选择器使用 <code>.</code> 开头, 比如 </p><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="selector-id">#myButton</span> {                  </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#669999</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">5px</span> black;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span> black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p></li>
</ol>
<h3 id="使用-gtk-builder-tools-预览-ui-文件">使用 gtk-builder-tools 预览
ui 文件</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--css 可选</span></span><br><span class="line">gtk4-builder-tool preview builder.ui --css=builder.css</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用 screenshot 来生成截图</span></span><br><span class="line">gtk4-builder-tool screenshot builder.ui --css=builder.css --force</span><br></pre></td></tr></tbody></table></figure>
<p>screenshot 真的很好用, 这样就可以一边写一边预览, 通过 VSCode 快捷键,
写的同时可以同步预览, 唯一比较遗憾的是截图的方式不能体验交互,比如 css 的
<code>hover</code> 需要实际运行程序才能知道.</p>
<h3 id="tips">Tips</h3>
<p>一个快速生成拟物风格的<a class="link" href="https://neumorphism.io/#e5cccc">网页<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/07CSS/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>QT 交叉编译</title>
    <url>/2023/09/02/auto/33/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何通过 QT 源码, 构建 QT
交叉编译库，并利用该库编译一个简单的 demo</p>
<span id="more"></span>
<p>构建脚本如下:</p>
<p>build.sh</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">download</span></span>()</span><br><span class="line">{</span><br><span class="line">    wget -c http://mirrors.ustc.edu.cn/qtproject/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz</span><br><span class="line">    tar -xf qt-everywhere-src-5.15.2.tar.xz</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">build</span></span>()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="string">"qt-everywhere-src-5.15.2"</span> ]; <span class="keyword">then</span> </span><br><span class="line">        download</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    outdir=<span class="variable">$PWD</span>/out_qtbase</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cd</span> qt-everywhere-src-5.15.2</span><br><span class="line"></span><br><span class="line">    ./configure              \</span><br><span class="line">        -prefix <span class="variable">$outdir</span>      \</span><br><span class="line">        -xplatform linux-aarch64-gnu-g++ \</span><br><span class="line">        -opensource          \</span><br><span class="line">        -confirm-license     \</span><br><span class="line">        -no-opengl           \</span><br><span class="line">        -no-vulkan           \</span><br><span class="line">        -no-compile-examples \</span><br><span class="line">        -recheck-all</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里只构建 qtbase, 可按需构建</span></span><br><span class="line">    make module-qtbase -j8</span><br><span class="line">    make module-qtbase-install_subtargets</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">build</span><br></pre></td></tr></tbody></table></figure>
<p>首先 QT 源码编排是这样的:</p>
<p>在源码根目录有很多的文件夹, 每个文件夹对应于一个 qt 模块,
所有模块都需要依赖 qtbase 模块, 因为里面包含 qmake 构建工具, 同时qtbase
也是 QT 的核心, 里面包含 QT 的底层逻辑, UI
内核等。所以我们首先就是要构建 qtbase。</p>
<p>后续有需要再按需构建, 当然如果直接 make -j8 便是全部构建了, 会比较慢,
这里只构建一个 qtbase 写些简单程序足够了.</p>
<blockquote>
<p>提示: make module- 后补全可以列出所有目标模块</p>
</blockquote>
<h4 id="配置信息">配置信息</h4>
<p>下面是配置信息, 可通过 <code>./configure --help</code> 查看选项,
按需配置即可, 本文的配置内容如下, 其他没配置的就按默认。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">-prefix 指明了编译后输出路径</span><br><span class="line">-xplatform 指出交叉编译时的使用的目标 mkspec, mkspec 是 qt 内置的用于多平台的配置文件, </span><br><span class="line">    位于 qtbase/mkspecs 文件夹下, 每个 mkspec 是一个文件夹</span><br><span class="line">    里面包含 qmake.conf, 描述编译时应当选择什么编译器以及配置,</span><br><span class="line">    这里我们希望编译生成的库文件适用于 aarch64 的 linux 平台, 刚好对应于 linux-aarch64-gnu-g++，</span><br><span class="line">    然后看里面的配置信息符合要求也不用改了。</span><br><span class="line"></span><br><span class="line">值得注意的是 -xplatform 和 -prefix 配置信息将被硬编码至 qmake 程序里面的</span><br><span class="line"></span><br><span class="line">-opensource</span><br><span class="line">-confirm-license 必须要同意 QT 的开源协议</span><br><span class="line">-no-opengl  </span><br><span class="line">-no-vulkan  不使用 opengl 和 vulkan, 不知为了这个版本必须 -no-vulkan，否则编译在代码上就出错</span><br><span class="line">-no-compile-examples 为了加快速度, 不编译示例程序, 但 make install 时, </span><br><span class="line">    示例代码是被一同复制到库目录的，所以后面想看哪个示例再单独进行编译即可</span><br><span class="line">-recheck-all 每次执行都重新检查一下配置并测试, 也就说说丢弃所有之前缓存的配置测试的结果</span><br></pre></td></tr></tbody></table></figure>
<h4 id="测试程序">测试程序</h4>
<p>编译完成后 qt 库将输出到 ./build.sh 所在目录下的 out_qtbase,
现在即可编写一个简单的 demo 测试一下</p>
<p>main.cpp</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    </span><br><span class="line">    QLabel *label = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    label-&gt;<span class="built_in">show</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>demo.pro</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">QT += core gui widgets</span><br><span class="line">TARGET = qtdemo</span><br><span class="line">SOURCES += main.cpp</span><br></pre></td></tr></tbody></table></figure>
<p>执行时使用生成的 qmake 来执行 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">../out_qtbase/bin/qmake</span><br><span class="line">make</span><br></pre></td></tr></tbody></table></figure><p></p>
<blockquote>
<p>通过 <code>../out_qtbase/bin/qmake -query</code> 可以看到被硬编码到
qmake 中的路径信息和 mkspec 信息</p>
</blockquote>
<h4 id="参考">参考</h4>
<ul>
<li><a class="link" href="https://zhuanlan.zhihu.com/p/573353841?utm_id=0">1<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/Qt/CrossCompile/通过源码编译/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>QT</category>
        <category>交叉编译</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>SDL2 Hello World</title>
    <url>/2023/01/17/auto/35/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 SDL2 库的基本使用. <span id="more"></span></p>
<p>一个简单的 SDL2 程序 main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// #define SDL_MAIN_HANDLED</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL2/SDL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    SDL_Window *window = SDL_CreateWindow(<span class="string">"demo"</span>, SDL_WINDOWPOS_CENTERED, </span><br><span class="line">        SDL_WINDOWPOS_CENTERED, <span class="number">640</span>, <span class="number">480</span>, SDL_WINDOW_SHOWN);</span><br><span class="line">    SDL_Renderer *renderer = SDL_CreateRenderer(window, <span class="number">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class="line">    <span class="type">bool</span> quit = <span class="literal">false</span>;</span><br><span class="line">    SDL_Event event;</span><br><span class="line"></span><br><span class="line">    SDL_SetRenderDrawColor(renderer, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">while</span> (!quit)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">while</span> (SDL_PollEvent(&amp;event))</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">switch</span> (event.type)</span><br><span class="line">            {</span><br><span class="line">            <span class="keyword">case</span> SDL_QUIT:</span><br><span class="line">                quit = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SDL_MOUSEMOTION:</span><br><span class="line">                <span class="keyword">if</span> (SDL_GetMouseState(<span class="literal">NULL</span>, <span class="literal">NULL</span>) &amp; SDL_BUTTON(<span class="number">1</span>))</span><br><span class="line">                    SDL_RenderDrawPoint(renderer, event.motion.x, event.motion.y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        SDL_RenderPresent(renderer);</span><br><span class="line">        SDL_Delay(<span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    }</span><br><span class="line">    SDL_DestroyWindow(window);</span><br><span class="line">    SDL_DestroyRenderer(renderer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>编译 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">gcc main.c -lmingw32 -lSDL2main -lSDL2</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>若去掉 <code>-lmingw32 -lSDL2main</code> 则需要在
<code>#include &lt;SDL2/SDL.h&gt;</code> 之前添加
<code>#define SDL_MAIN_HANDLED</code> 以避免找不到
<code>WinMain</code></p>
<p>因为 SDL_MAIN_HANDLED 在 sdl_main.h 中有如下定义</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SDL_MAIN_HANDLED</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__WIN32__)</span></span><br><span class="line"><span class="comment">/* On Windows SDL provides WinMain(), which parses the command line and passes</span></span><br><span class="line"><span class="comment">   the arguments to your main function.</span></span><br><span class="line"><span class="comment">   If you provide your own WinMain(), you may define SDL_MAIN_HANDLED</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SDL_MAIN_AVAILABLE</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//...........</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>并且 </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(SDL_MAIN_NEEDED) || defined(SDL_MAIN_AVAILABLE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> main    SDL_main</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  The prototype for the application's main() function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> C_LINKAGE <span class="type">int</span> <span class="title function_">SDL_main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span>;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>也就是说默认情况下没有定义 <code>SDL_MAIN_HANDLED</code> 的话,
<code>#include &lt;SDL2/SDL.h&gt;</code> 就会把 main 宏替换成 SDL_main,
而宏在编译链接之前替换, 所以在链接时就会发现找不到 main 函数(或说
WinMain), 而如果链接到 <code>-lmingw32 -lSDL2main</code>
则不存在该问题(需要放在 -lSDL2 前面)，因为 -lSDL2main 提供了 main 函数.
这时候实际的 man 函数其实不是在自己定义源文件里, 而是在 libSDL2main
里.</p>
<p>而如果我们定义了 SDL_MAIN_HANDLED 就是要求使用我们自己的 main
函数就，不要发生宏替换，这种情况可以直接使用 <code>-lSDL2</code></p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">gcc main.c -lSDL2</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>使用 pkg-config, 如果通过包管理器安装 sdl2, 在下载的同时一般都会附加
pkg-config 的 .pc 配置文件, 比如 MSYS2 下</li>
</ul>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载 ucrt64 的 SDL2 包</span></span><br><span class="line">pacman -S mingw-w64-ucrt-x86_64-SDL2</span><br><span class="line"><span class="comment"># 则有</span></span><br><span class="line">find /ucrt64/lib -name <span class="string">"*sdl2*pc*"</span></span><br><span class="line"><span class="comment"># 输出: /ucrt64/lib/pkgconfig/sdl2.pc</span></span><br></pre></td></tr></tbody></table></figure>
<p>这时, 使用 pkg-config 查看包配置的输出</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pkg-config sdl2 --cflags --libs</span><br><span class="line"><span class="comment"># 输出: -IC:/ProgramFiles/msys64/ucrt64/include/SDL2 -Dmain=SDL_main -lmingw32 -mwindows -lSDL2main -lSDL2 </span></span><br></pre></td></tr></tbody></table></figure>
<p><code>-lmingw32 -lSDL2main</code> 和上面直接编译的一样, pkg-config
默认还附加的 <code>-mwindows</code> 用于启动时禁止终端弹出</p>
<p>于是</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">gcc main.c `pkg-config sdl2 --cflags --libs`</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>使用 cmake</li>
</ul>
<p>同样的通过包管理器安装的 sdl2 还附加了 cmake 包的配置, 也是在 lib
下,</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">find /ucrt64/lib -name <span class="string">"*SDL2*"</span></span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2Config.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2ConfigVersion.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2mainTargets-release.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2mainTargets.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2staticTargets-release.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2staticTargets.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2Targets-release.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2Targets.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2testTargets-release.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/cmake/SDL2/SDL2testTargets.cmake</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/libSDL2.a</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/libSDL2.dll.a</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/libSDL2main.a</span></span><br><span class="line"><span class="comment"># /ucrt64/lib/libSDL2_test.a</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>可以看到 Cmake 的话有多种配置可供选择</p>
</blockquote>
<p>直接使用默认配置的 CmakeLists.txt 如下:</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(a main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接库和依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(SDL2 REQUIRED SDL2)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(a <span class="variable">${SDL2_LIBRARIES}</span>)</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>通过 find_package 查找包, 然后通过 ${&lt;包名&gt;_LIBRARIES} 进行引用</p>
</blockquote>
<p>使用 <code>message(${SDL2_LIBRARIES})</code> 查看 cmake 变量,
可以看到 <code>${SDL2_LIBRARIES}</code> 值为
<code>SDL2::SDL2mainSDL2::SDL2</code>, 默认链接到了 SDL2main</p>
<ul>
<li>静态链接</li>
</ul>
<p>通过 <code>find /ucrt64/lib -name "*SDL2*"</code> 可以看到 .a 文件,
说明下载的 SDL2 包是包含静态链接库的, 我们试图直接使用 -static 来编译,
发现出现很多 <code>undefined reference to __imp</code> 说明除了
libSDL2.a 外还需要其他依赖库才能进行静态编译, 而具体需要哪些,
我们目前无法得知.</p>
<p>于是尝试通过 <code>pkg-config sdl2 --cflags --libs --static</code>
发现可以得到所有依赖库, 即</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pkg-config sdl2 --cflags --libs --static</span><br><span class="line"><span class="comment"># 输出: -IC:/ProgramFiles/msys64/ucrt64/include/SDL2 -Dmain=SDL_main -lmingw32 </span></span><br><span class="line"><span class="comment"># -mwindows -lSDL2main -lSDL2 -lmingw32 -mwindows -lSDL2main -lSDL2 -lm -luser32 </span></span><br><span class="line"><span class="comment"># -lgdi32 -lwinmm -limm32 -lole32 -loleaut32 -lversion -luuid -ladvapi32 -lsetupapi -lshell32 -ldinput8</span></span><br></pre></td></tr></tbody></table></figure>
<p>于是静态编译指令为</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">gcc main.c `pkg-config sdl2 --cflags --libs --static` -static</span><br></pre></td></tr></tbody></table></figure>
<p>Cmake 静态链接在 SDL 配置规则里也已经集成, 只需将 SDL2 库换成
<code>SDL2::SDL2-static</code>:</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(temp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(a main.c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接库和依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(SDL2 REQUIRED SDL2)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(a SDL2::SDL2main SDL2::SDL2-static)</span><br></pre></td></tr></tbody></table></figure>
<p>如果不使用 <code>SDL2::SDL2main</code> 即只链接到
<code>SDL2::SDL2-static</code>:
<code>target_link_libraries(a SDL2::SDL2-static)</code> 则需要在
<code>#include &lt;SDL2/SDL.h&gt;</code> 之前定义
<code>#define SDL_MAIN_HANDLED</code> 以禁止宏替换.</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/SDL2/Demo/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>SDL2</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>SDL2</tag>
      </tags>
  </entry>
  <entry>
    <title>RTThread 上使用 CharryUSB packages</title>
    <url>/2023/09/21/auto/3/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何在 RTThread 上使用 CharryUSB <span id="more"></span></p>
<h4 id="介绍">介绍</h4>
<p>CharryUSB 试用了一下，感觉还不错，本身实现了多种 USB IP，支持多个
MCU. 许多 MCU 厂商对于 USB 的实现都是直接买现成的 IP，例如 stm32 是的
dwc2, 因此各个厂商的 USB 驱动可以使用同一套 IP 的驱动，这就是为什么
RTThread menuconfig 选项中有选择 IP 选项。</p>
<h4 id="配置">配置</h4>
<p>那么开始配置 menuconfig:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">RT-Thread online packages  ---&gt;</span><br><span class="line">    system packages  ---&gt; </span><br><span class="line">        CherryUSB: tiny and portable USB host/device stack for embedded system with USB IP  ---&gt; </span><br><span class="line">             Enable usb device mode  ---&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>然后 Select usb device ip 记得选择 DWC2, 其他根据需要进行选择.
例如这里选择了 <code>Enable usb msc device  ---&gt;</code> 并且使用 ram
模拟磁盘 <code>Use msc ram template</code></p>
<p>设置完成后 `rtconfig.h`` 新增如下内容:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_USING_CHERRYUSB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE_FS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE_DWC2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE_DWC2_STM32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE_DWC2_PORT_FS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE_MSC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_CHERRYUSB_DEVICE_MSC_TEMPLATE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PKG_USING_CHERRYUSB_LATEST_VERSION</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注意: 不需要在 RT-Thread Components --&gt; Device Drivers ---&gt;
中再启动 usb 驱动了, 因为 CharryUSB 直接集成 DWC2 驱动, RT-Thread 默认的
USB 驱动关闭就好了</p>
</blockquote>
<p>设置完成后执行 <code>pkgs --update</code> 拉取 CharryUSB 包。</p>
<h4 id="使用">使用</h4>
<p>拉取完成后似乎直接就能编译, 那么怎么使用呢？程序执行入口在哪?
启动流程是什么样的？</p>
<p>CharryUSB 唯一需要提供的是一个 <code>usb_dc_low_level_init</code>
函数, 这个函数是用于将外设时钟使能以及和 IO 绑定的操作，实际上就等价于
cubemx 自动生成代码中 xxx_msp 函数, 因此如果使用 cubemx
自动生成则可以直接拿来使用。比如</p>
<p>cubemx 生成代码如下:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_PCD_MspInit</span><span class="params">(PCD_HandleTypeDef* hpcd)</span></span><br><span class="line">{</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = {<span class="number">0</span>};</span><br><span class="line">  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {<span class="number">0</span>};</span><br><span class="line">  <span class="keyword">if</span>(hpcd-&gt;Instance==USB_OTG_FS)</span><br><span class="line">  {</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USB_OTG_FS_MspInit 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USB_OTG_FS_MspInit 0 */</span></span><br><span class="line">  <span class="comment">/** Initializes the peripherals clock</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;</span><br><span class="line">    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;</span><br><span class="line">    <span class="keyword">if</span> (HAL_RCCEx_PeriphCLKConfig(&amp;PeriphClkInitStruct) != HAL_OK)</span><br><span class="line">    {</span><br><span class="line">      Error_Handler();</span><br><span class="line">    }</span><br><span class="line">  <span class="comment">/** Enable USB Voltage detector</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    HAL_PWREx_EnableUSBVoltageDetector();</span><br><span class="line"></span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    <span class="comment">/**USB_OTG_FS GPIO Configuration</span></span><br><span class="line"><span class="comment">    PA12     ------&gt; USB_OTG_FS_DP</span></span><br><span class="line"><span class="comment">    PA11     ------&gt; USB_OTG_FS_DM</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Peripheral clock enable */</span></span><br><span class="line">    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();</span><br><span class="line">    <span class="comment">/* USB_OTG_FS interrupt Init */</span></span><br><span class="line">    HAL_NVIC_SetPriority(OTG_FS_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN USB_OTG_FS_MspInit 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END USB_OTG_FS_MspInit 1 */</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>可以发现该函数 hpcd 其实没大多用, 去掉即可, 于是有:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">usb_dc_low_level_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    GPIO_InitTypeDef GPIO_InitStruct = {<span class="number">0</span>};</span><br><span class="line">    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE BEGIN USB_OTG_FS_MspInit 0 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END USB_OTG_FS_MspInit 0 */</span></span><br><span class="line">    <span class="comment">/** Initializes the peripherals clock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;</span><br><span class="line">    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;</span><br><span class="line">    <span class="keyword">if</span> (HAL_RCCEx_PeriphCLKConfig(&amp;PeriphClkInitStruct) != HAL_OK)</span><br><span class="line">    {</span><br><span class="line">        Error_Handler();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/** Enable USB Voltage detector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HAL_PWREx_EnableUSBVoltageDetector();</span><br><span class="line"></span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">    <span class="comment">/**USB_OTG_FS GPIO Configuration</span></span><br><span class="line"><span class="comment">    PA12     ------&gt; USB_OTG_FS_DP</span></span><br><span class="line"><span class="comment">    PA11     ------&gt; USB_OTG_FS_DM</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_11;</span><br><span class="line">    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;</span><br><span class="line">    GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;</span><br><span class="line">    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;</span><br><span class="line">    HAL_GPIO_Init(GPIOA, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Peripheral clock enable */</span></span><br><span class="line">    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();</span><br><span class="line">    <span class="comment">/* USB_OTG_FS interrupt Init */</span></span><br><span class="line">    HAL_NVIC_SetPriority(OTG_FS_IRQn, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);</span><br><span class="line">    <span class="comment">/* USER CODE BEGIN USB_OTG_FS_MspInit 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* USER CODE END USB_OTG_FS_MspInit 1 */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>执行流程如下，首先注册设备描述符, 添加接口, 然后执行
<code>usbd_initialize</code> 初始化 usb</p>
<p>例如 msc 设备:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">msc_ram_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    usbd_desc_register(msc_ram_descriptor);</span><br><span class="line">    usbd_add_interface(usbd_msc_init_intf(&amp;intf0, MSC_OUT_EP, MSC_IN_EP));</span><br><span class="line"></span><br><span class="line">    usbd_initialize();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>而 msc_ram_init 我们可以放到 shell
中手动执行，也可以设置开机后自动执行.</p>
<p>usbd_initialize 会调用 usb_dc_init, 而 usb_dc_init
是移植到不同平台需要实现的部分, 对于 dwc2 平台, CharryUSB
已经有实现:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// core/usbd_core.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">usbd_initialize</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> usb_dc_init();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// port/dwc2/usb_dc_dwc2.c</span></span><br><span class="line">__WEAK <span class="type">void</span> <span class="title function_">usb_dc_low_level_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">__WEAK <span class="type">void</span> <span class="title function_">usb_dc_low_level_deinit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">usb_dc_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">  <span class="comment">/*!&lt; dc init */</span></span><br><span class="line">  usb_dc_low_level_pre_init();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;usb_dc_cfg, <span class="number">0</span>, <span class="keyword">sizeof</span>(usb_dc_cfg));</span><br><span class="line">  <span class="comment">/*!&lt; Clear USB Event Interrupt */</span></span><br><span class="line">  NRF_USBD-&gt;EVENTS_USBEVENT = <span class="number">0</span>;</span><br><span class="line">  NRF_USBD-&gt;EVENTCAUSE |= NRF_USBD-&gt;EVENTCAUSE;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*!&lt; Reset interrupt */</span></span><br><span class="line">  NRF_USBD-&gt;INTENCLR = NRF_USBD-&gt;INTEN;</span><br><span class="line">  NRF_USBD-&gt;INTENSET = USBD_INTEN_USBRESET_Msk | USBD_INTEN_USBEVENT_Msk | USBD_INTEN_EPDATA_Msk |</span><br><span class="line">                       USBD_INTEN_EP0SETUP_Msk | USBD_INTEN_EP0DATADONE_Msk | USBD_INTEN_ENDEPIN0_Msk | USBD_INTEN_ENDEPOUT0_Msk | USBD_INTEN_STARTED_Msk;</span><br><span class="line"></span><br><span class="line">  usb_dc_low_level_post_init();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>因此实际需要实现的函数就仅剩下 usb_dc_low_level_pre_init 了. 在
port/dwc2/usb_dc_dwc2.c 中 usb_dc_low_level_init 默认为 weak
这也就是为何即使一开始没实现该函数也能编译成功。</p>
<p>至于 msc_ram_init 函数, 因为勾选了 Use msc ram template</p>
<p>在 <code>third_party/rt-thread-4.1.1/msh_cmd.c</code>
命令也给我们导出来了</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(PKG_CHERRYUSB_DEVICE_MSC_TEMPLATE)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">msc_ram_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">MSH_CMD_EXPORT(msc_ram_init, start msc_ram_init);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>下载后通过命令执行 <code>msc_ram_init</code> 即可.</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/Board/STM32/ART-Pi/packages/charryUSB/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>RTThread</category>
        <category>packages</category>
      </categories>
      <tags>
        <tag>USB</tag>
        <tag>RTThread</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 MySQL</title>
    <url>/2020/03/22/auto/25/MySQL-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    <content><![CDATA[<html><head></head><body><h3 id="使用-mysql">使用 MySQL</h3>
<p>use 和 show 的基本使用</p>
<ul>
<li><p>返回可用数据库的一个列表</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>选择一个数据库</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">use db_name</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>返回当前选择的数据库内可用表的列表</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>给出一个表名，它对每个字段返回一行，行中包含字段名、数据类型、是否允许
NULL、键信息默认值以及其他信息，<code>describe</code> 是等价的。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">show columns from tbl_name;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">describe tbl_name;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<blockquote>
<p>进一步了解 <code>show</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">help show;</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<h3 id="检索数据">检索数据</h3>
<p>select 从一个或多个表中检索信息，为了使用 <code>select</code>
检索数据，必须至少给出两条信息 ---- 想选择什么，以及从什么地方选择</p>
<ul>
<li><p>下面利用 <code>select</code> 语句从 <code>products</code>
表中检索一个名为 <code>prod_name</code> 的列</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name from products;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>检索多个列</p>
<p></p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_id, prod_name, prod_price from products;</span><br></pre></td></tr></tbody></table></figure><p></p></li>
<li><p>检索所有列</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select * from products;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>检索不同行，返回的多个行中存在有些行的值是重复的，为得到值不重复的行可使用
<code>distinct</code> 关键字</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select distinct vend_id from products;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>限制结果，下面 <code>limit 5</code> 指示了 MySQL 返回不多于 5
行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name from products limit 5;</span><br></pre></td></tr></tbody></table></figure>
<p>下面 <code>limit 5, 5</code> 指示了 MySQL 返回从行 5 开始的 5
行。第一个数为开始的位置，第二个数为要检索的行数。为了直观，可以等价地写成
<code>limit 5 offset 5</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name from products limit 5,5;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name from products limit 5 offset 5;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>使用完全限定的列名</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select products.prod_name from products;</span><br></pre></td></tr></tbody></table></figure>
<p>表名也可以完全限定</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select products.prod_name from crashcourse.products;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="排序检索数据">排序检索数据</h3>
<ul>
<li><p>排序数据</p>
<p>子句（clause) ：SQL
语句由子句构成，有些是必须的，有些是可选的。一个子句通常由一个关键字和所提供的数据组成。比如
<code>select</code> 语句的 <code>from</code> 子句，为了明确地对
<code>select</code> 语句检索出来的数据进行排序，可以使用
<code>order by</code> 子句，<code>order by</code>
取一个或多个列的名字，据此对输出进行排序。比如下面语句将数字和字母作为排序依据进行排序。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name from products order by prod_name;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>按多个列排序，比如下面 sql
代码将首先按价格排序，然后再按名称排序，因为拥有同一个价格的产品可能有多个，在对这个多个进行进行名字排序</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_id, prod_price, prod_name from products order by prod_price, prod_name;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>按指定方向排序，默认是 1-10, A-Z
升序排序的，为了进行降序排序，必须指定 <code>DESC</code>
关键字，<code>desc</code>
关键字只应用到直接位于其前面的列名。所以下面降序只生效于
<code>prod_price</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_id, prod_price, prod_name from products order by prod_price desc, prod_name;</span><br></pre></td></tr></tbody></table></figure>
<p>想要在多个列进行降序排序，必须对每个列指定 <code>DESC</code>
关键字。</p>
<blockquote>
<p><code>ASC</code> 指明升序，但实际上，<code>ASC</code>
没有多大用处，因为升序是默认的。</p>
</blockquote></li>
<li><p>例子：求一个列中最高或最低值</p>
<p>使用 <code>order by</code> 和 <code>limit</code>
组合，能够找到一个列中最高或最低的值，下面例子显示如何找到最昂贵的物品的值</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_price from products order by prod_price desc limit 1;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<blockquote>
<p>在给出 <code>order by</code> 子句时，应当保证它位于 <code>from</code>
子句之后，如果使用 <code>limit</code> ，它必须位于
<code>order by</code>之后，使用子句次序不对将产生错误</p>
</blockquote>
<h3 id="过滤数据">过滤数据</h3>
<p>主要通过 select 语句和 where 子句来指定搜索条件</p>
<ul>
<li><p><code>where</code> 子句操作符</p>
<table>
<thead>
<tr>
<th style="text-align: center;">操作符</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">=</td>
<td style="text-align: center;">等于</td>
</tr>
<tr>
<td style="text-align: center;">&lt;&gt;</td>
<td style="text-align: center;">不等于</td>
</tr>
<tr>
<td style="text-align: center;">!=</td>
<td style="text-align: center;">不等于</td>
</tr>
<tr>
<td style="text-align: center;">&lt;</td>
<td style="text-align: center;">小于</td>
</tr>
<tr>
<td style="text-align: center;">&lt;=</td>
<td style="text-align: center;">小于等于</td>
</tr>
<tr>
<td style="text-align: center;">&gt;</td>
<td style="text-align: center;">大于</td>
</tr>
<tr>
<td style="text-align: center;">&gt;=</td>
<td style="text-align: center;">大于等于</td>
</tr>
<tr>
<td style="text-align: center;">between</td>
<td style="text-align: center;">在指定两个值之间</td>
</tr>
</tbody>
</table></li>
<li><p>检查单个值，MySQL 执行匹配时默认不区分大小写，所以 'fuses' 与
'Fuses' 匹配</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name, prod_price from products where prod_name = 'fuses';</span><br></pre></td></tr></tbody></table></figure>
<p>检查价格小于等于 10 美元的所有产品</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name, prod_price from products where prod_price &lt;= 10;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>不匹配检查，比如下面例子列出不是由供应商 1003 制造的所有产品</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select vend_id, prod_name from products where vend_id != 1003;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>范围检查</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name, prod_price from products where prod_price between 5 and 10;</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>空值检查</p>
<p>一个列不包含值时，称其为空值
NULL，比如下面语句返回没有价格的所有产品</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_name from products where prod_price is null;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h3 id="数据过滤">数据过滤</h3>
<p>之前的数据过滤使用的都是单一的条件，为了进行更强的过滤控制，MySQL
允许出现多个 <code>where</code> 子句，这些子句可以两种方式使用：以 AND
子句的方式或以 OR 子句的方式</p>
<p>操作符（operator）用来联结或改变 <code>where</code>
中的子句的关键字，也称为逻辑操作符。</p>
<p>比如主句是 select ，where 是 select 的子句</p>
<ul>
<li><p>AND 操作符，比如下面 select 语句中的 where
子句包含了两个条件，并且用 and 关键字联结它们</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">select prod_id, prod_price, prod_name from products where vend_id = 1003 and prod_price &lt;= 10;</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/数据库/MySQL-必知必会.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>QT 样式 Qss</title>
    <url>/2023/02/13/auto/34/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 Qss 的使用 <span id="more"></span></p>
<h1 id="qss">Qss</h1>
<p>首先参考 <a class="link" href="https://www.runoob.com/cssref/css-selectors.html">css 选择器<i class="fas fa-external-link-alt"></i></a>,
注意不同点</p>
<p>参考<a class="link" href="https://www.cnblogs.com/bclshuai/p/9809679.html">这篇博客<i class="fas fa-external-link-alt"></i></a>,
他列出了很多属性</p>
<p>这个<a class="link" href="https://github.com/mumble-voip/mumble-theme">开源项目<i class="fas fa-external-link-alt"></i></a>,
给出了很多主题, 可以参考里面属性的使用</p>
<p>官方的 <a class="link" href="https://doc.qt.io/qt-5/stylesheet-reference.html">stylesheet
参考文档<i class="fas fa-external-link-alt"></i></a>, 列出了所有的相关信息和描述</p>
<p>官方 <a class="link" href="https://doc.qt.io/qt-5/stylesheet-syntax.html">qss
语法<i class="fas fa-external-link-alt"></i></a> 说明</p>
<ol type="1">
<li><p>Qt 中的 QSS 的基本语法格式： 对象名称 {属性名1 : 属性值1; 属性名2
: 属性值2; ...}</p></li>
<li><p>Qt 中特有的属性： qproperty-xxx: 属性值; //表示设置 Qt
对象属性值，其中 xxx 是某个属性名</p></li>
<li><p>Qt 中的图形对象属性：</p></li>
</ol>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">color: color;              <span class="comment">//表示前景色</span></span><br><span class="line">background-color: color;   <span class="comment">//表示背景色</span></span><br><span class="line">border-width: <span class="keyword">double</span>;      <span class="comment">//表示边框宽度</span></span><br><span class="line">border-radius: <span class="keyword">double</span>;     <span class="comment">//表示圆角半径</span></span><br><span class="line">border-style: style;       <span class="comment">//表示边框样式</span></span><br><span class="line">font-family: <span class="keyword">string</span>;       <span class="comment">//表示字体</span></span><br><span class="line">font-size: <span class="keyword">int</span>;            <span class="comment">//表示字体大小</span></span><br><span class="line">font-weight: <span class="keyword">int</span>;          <span class="comment">//表示字体粗细</span></span><br><span class="line">font-style: style;         <span class="comment">//表示字体样式</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>CSS 和 QSS 的不同之处：
<ol type="1">
<li>CSS 属性更丰富，QSS 仅针对 Qt 对象。</li>
<li>CSS 只能对 HTML 元素进行定义，而 QSS 可以对任意 Qt
对象指定样式。</li>
<li>CSS 使用 class 或 id 来指定某个元素的样式，而 QSS
使用对象的名称来指定样式。</li>
<li>QSS 实现了一些特殊功能，比如可以将属性值设置为多重值.
可以生成图形边框等等。</li>
</ol></li>
</ul>
<h4 id="qss-选择器">QSS 选择器</h4>
<h5 id="通配选择器">1. 通配选择器</h5>
<p>对所有的对象实例进行属性设置</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">* {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="类型选择器">2. 类型选择器</h5>
<p>匹配所有 QPushButton 类的实例, 包括继承自 QPushButton
的子类的实例</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="类选择器">3. 类选择器</h4>
<p>匹配所有 QPushButton 类的实例, 但不包括继承自 QPushButton
的子类的实例</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 这相当于 *[class ~= "QPushButton"] */</span></span><br><span class="line"><span class="selector-class">.QPushButton</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="属性选择器">4. 属性选择器</h4>
<p>只匹配 QPushButton 中属性 flat 值为 false 的对象实例</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton<span class="selector-attr">[flat = <span class="string">"false"</span>]</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="id-选择器">5. id 选择器</h4>
<p>比如, UI 上有一个 QPushButton 的对象实例, 名字叫 btnEntry,
那么单独对这个 button 进行样式设置时可以这样:</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QPushButton<span class="selector-id">#btnEnter</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">QPushButton<span class="selector-attr">[objectName = btnEnter]</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这两种写法是等效的, 因为, 这里的 id 实际上就是 objectName 指定的值,
所以可以也可以直接使用属性设置的方法来进行设置。</p>
<p>当然属性设置的话可以更灵活一些, 比如支持一些正则运算符:</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配 btn 开头的 QPushButton 实例 */</span></span><br><span class="line">QPushButton<span class="selector-attr">[objectName ^= btn]</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配包含 btn 子串的 QPushButton 实例 */</span></span><br><span class="line">QPushButton<span class="selector-attr">[objectName *= btn]</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配 Send 结尾的 QPushButton 实例 */</span></span><br><span class="line">QPushButton<span class="selector-attr">[objectName $= Enter]</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="多个选择器">6. 多个选择器</h5>
<p>多个选择器用 <code>,</code> 分开, 每个选择器独立进行匹配,
但使用同一个属性配置</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配所有 QPushButton和 QLabel 实例 */</span></span><br><span class="line">QPushButton, QLabel {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配 QPushButton 中名为 btn1 和 btn2 的实例 */</span></span><br><span class="line">QPushButton<span class="selector-id">#btn1</span>, <span class="selector-id">#btn2</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">QPushButton<span class="selector-attr">[objectName ^= btn]</span>, QLabel<span class="selector-attr">[objectName *= lab]</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="后代选择器">7. 后代选择器</h5>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配 QFrame 对象实例内的所有后代中类型为 QPushButton 的实例 */</span></span><br><span class="line">QFrame QPushButton {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配指定 QFrame 对象内的所有后代中类型为 QPushButton 的实例 */</span></span><br><span class="line">QFrame<span class="selector-attr">[objectName = myfram]</span> QPushButton {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这个对于自己定义一些继承自 QWidget 的控件是非常有帮助的, 比如使用
QListWidget 时经常需要定义 ListItem, 对于 ListItem
里面自定义对象的筛选就可以这样做:</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">QWidget<span class="selector-attr">[objectName = ListItem]</span> QLabel {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="子选择器">8. 子选择器</h5>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配所有父亲是 QFrame 的所有 QPushButton 对象实例 */</span></span><br><span class="line">QFrame &gt; QPushButton {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配所有父亲类型是 QFrame, 且父亲名称是 myfram 的所有 QPushButton 对象实例 */</span></span><br><span class="line">QFrame<span class="selector-attr">[objectName = myfram]</span> &gt; QPushButton {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="子控件选择器">9. 子控件选择器</h4>
<p><a class="link" href="https://doc.qt.io/qt-5/stylesheet-reference.html#list-of-sub-controls">官方详情文档<i class="fas fa-external-link-alt"></i></a>
中列出了所有支持的子控件</p>
<p>一个 QWidget 可能包含有多个子控件, 他们具有树形层次结构, 比如
QComboBox 除了最外层的盒子模型外还包含, 下拉 (drop-down)
子控件，和向下箭头子控件 (down-arrow), 对这些子控件进行样式设置可以通过
<code>::</code> 符号来选择, 比如</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 设置向下箭头背景为红色 */</span></span><br><span class="line">QComboBox::drop-arrow {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置下拉框鼠标悬停时为白色 */</span></span><br><span class="line">QComboBox::drop-down :hover {</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h5 id="伪状态">10. 伪状态</h5>
<p><a class="link" href="https://doc.qt.io/qt-5/stylesheet-reference.html#list-of-pseudo-states">官方详情文档<i class="fas fa-external-link-alt"></i></a>
中列出了所有的伪状态</p>
<p>伪状态是用来添加一些 '选择器' 的特殊效果(特殊状态),
比如可以用来设置控件在鼠标悬停或点击等非默认状态的属性</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 当鼠标悬停时, 设置背景为红色 */</span></span><br><span class="line">QPushButton<span class="selector-id">#btnEnter</span><span class="selector-pseudo">:hover</span>  {</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 当鼠标点击时, 设置背景为红色 */</span></span><br><span class="line">QPushButton<span class="selector-id">#btnEnter</span>:pressed {</span><br><span class="line">    <span class="attribute">background-color</span>:green;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停但没按下 */</span></span><br><span class="line">QPushButton<span class="selector-pseudo">:hover</span>:!pressed { </span><br><span class="line">    <span class="attribute">color</span>: blue; </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="另外">另外</h4>
<p>element + element 好像不生效?</p>
<p>对于 css 来说, 比如 <code>div+p</code> 表示选择所有紧跟在
<code>&lt;div&gt;</code> 元素之后的第一个 <code>&lt;p&gt;</code>
元素</p>
<p>不过这个对 QT 来说, 意义不大, 因为每个对象的顺序可能是不一定的</p>
<h3 id="qt-特有的属性">QT 特有的属性</h3>
<p>一般来说, QT 特有属性都以 qproperty 开头:</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line">qproperty-xxx: 属性值; </span><br></pre></td></tr></tbody></table></figure>
<p>一下列出一些常见的特有属性:</p>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">QWidget {</span><br><span class="line">    qproperty-pixmap: <span class="built_in">url</span>(<span class="string">pixmap.png</span>);</span><br><span class="line">    qproperty-titleColor: <span class="built_in">rgb</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">    qproperty-iconSize: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">    qproperty-alternatingRowColors: true;</span><br><span class="line">    selection-<span class="attribute">background-color</span>: darkblue; <span class="comment">/*  */</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">223</span>; <span class="comment">/* 不透明度, 0 ~ 255, 仅支持 QToolTip */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/Qt/UI/Style/Qss/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>QT</category>
        <category>UI</category>
        <category>Style</category>
        <category>Qss</category>
      </categories>
      <tags>
        <tag>QT</tag>
        <tag>Style</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 libserialport 来实现简单的串口终端</title>
    <url>/2023/02/15/auto/36/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍使用 libserialport 来实现简单的串口终端</p>
<span id="more"></span>
<p>如下所示, 打开程序后首先查找可用的连接串口并尝试连接,
然后开新的线程用来在终端中获取每一行输入, 发送到串口,
在主线程中不断接收的串口数据并打印</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libserialport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sp_port</span> *<span class="title">port</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> connected = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">serialport_connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *port_name)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(port != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        sp_close(port);</span><br><span class="line">        sp_free_port(port);</span><br><span class="line">        port = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sp_get_port_by_name(port_name, &amp;port);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = sp_open(port, SP_MODE_READ_WRITE);</span><br><span class="line">    <span class="keyword">if</span>(res != SP_OK)</span><br><span class="line">    {</span><br><span class="line">        sp_free_port(port);</span><br><span class="line">        port = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    sp_set_baudrate(port, <span class="number">115200</span>);</span><br><span class="line">    sp_set_bits(port, <span class="number">8</span>);</span><br><span class="line">    sp_set_parity(port, SP_PARITY_NONE);</span><br><span class="line">    sp_set_stopbits(port, <span class="number">1</span>);</span><br><span class="line">    sp_set_flowcontrol(port, SP_FLOWCONTROL_NONE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接到第一个扫描到的串口 */</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="title function_">serialport_connect_to_available</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sp_port</span> **<span class="title">port_list</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">sp_return</span> <span class="title">result</span> =</span> sp_list_ports(&amp;port_list);</span><br><span class="line">	<span class="keyword">if</span> (result != SP_OK) {</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; port_list[i] != <span class="literal">NULL</span>; i++) </span><br><span class="line">    {</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">sp_port</span> *<span class="title">port</span> =</span> port_list[i];</span><br><span class="line">		<span class="type">char</span> *port_name = sp_get_port_name(port);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> r = serialport_connect(port_name);</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n连接到串口 %s\n\n"</span>, port_name);</span><br><span class="line">            </span><br><span class="line">            sp_free_port_list(port_list);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    sp_free_port_list(port_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">serial_write_task</span><span class="params">(<span class="type">void</span> * arg)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">8192</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        gets(buf);</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        buf[n++] = <span class="string">'\r'</span>;</span><br><span class="line">        buf[n++] = <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span>(connected)</span><br><span class="line">        {</span><br><span class="line">            sp_blocking_write(port, buf, n, <span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    SetConsoleOutputCP(<span class="number">65001</span>);</span><br><span class="line">    HANDLE hOutput = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleMode(hOutput, ENABLE_PROCESSED_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = serialport_connect_to_available();</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n未找到串口, 请将设备插入USB口\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        connected = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">int</span> buf_len = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line">    gets(buf);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> t;</span><br><span class="line">    pthread_create(&amp;t, <span class="literal">NULL</span>, serial_write_task, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(connected == <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> n = sp_blocking_read(port, buf, buf_len, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(n &lt; <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n串口连接断开了!\n"</span>);</span><br><span class="line">                connected = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.*s"</span>, n, buf);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(serialport_connect_to_available() == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            connected = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>makefile:</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">default:</span></span><br><span class="line">	gcc serial_terminal.c -lserialport -lpthread -lCfgmgr32 -lSetupapi -static </span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	make default</span><br><span class="line">	./a.exe</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/serialport/串口Simple终端/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Lib</category>
        <category>serialport</category>
      </categories>
      <tags>
        <tag>串口</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Docker 搭建交叉编译环境</title>
    <url>/2023/09/03/auto/37/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何使用 Docker 搭建交叉编译环境</p>
<span id="more"></span>
<p>关于 docker 交叉编译环境，已经有人做成<a class="link" href="https://github.com/dockcross/dockcross">项目<i class="fas fa-external-link-alt"></i></a>开源了。我们只需使用即可</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 linux-arm64 镜像</span></span><br><span class="line">docker pull dockcross/linux-arm64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该镜像不能直接运行, 需要间接运行，我是真的服了</span></span><br><span class="line"><span class="comment"># 根据提示, 将运行报错导出成一个脚本，使用该脚本来运行</span></span><br><span class="line"></span><br><span class="line">docker run --<span class="built_in">rm</span> dockcross/linux-arm64 &gt; dockcross-linux-arm64</span><br><span class="line"><span class="built_in">chmod</span> +x dockcross-linux-arm64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出的脚本是 bash 这意味着 windows 直接不能用了啊, 可能默认觉得 Windows 用户一定使用 WSL 吧</span></span><br><span class="line"><span class="comment"># 不过我是在 Windows 的 MSYS2 下, 有 bash 环境，但还是报错, 后排查是路径名问题</span></span><br><span class="line"><span class="comment"># 因此更改生成的 dockcross-linux-arm64 脚本</span></span><br><span class="line">HOST_PWD=$(<span class="built_in">echo</span> <span class="variable">$HOST_PWD</span> | sed <span class="string">'s/\//\\\//g'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后通过这个脚本执行 bash, 这个执行一次就退出</span></span><br><span class="line"><span class="comment"># 注意: -c 是 bash 的参数, 不是 ./dockcross-linux-arm64</span></span><br><span class="line">./dockcross-linux-arm64 bash -c <span class="string">'echo Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可直接处理本地文件, 例如编译本机的 hello.c</span></span><br><span class="line"><span class="comment"># 其原理也很简单, 就是 docker 启动时通过 -v 当前路径到容器里面即可</span></span><br><span class="line">./dockcross-linux-arm64 bash -c <span class="string">'$CC hello.c -o hello'</span></span><br></pre></td></tr></tbody></table></figure>
<p>搞了半天发现不支持直接安装 arm64 的包,
麻烦的地方不在于交叉编译一个简单的hllo world 而是编译需要依赖各种 qt,
opencv, ssl 等库，手动编译这些库比较麻烦。</p>
<p>而这个 docker
环境也只是简单地安装了一下交叉编译器，既然如此那我为何不直接使用 vm
虚拟机或 WSL 里交叉编译。</p>
<h4 id="基于-debain-构建">基于 Debain 构建</h4>
<p>既然 dockcross 不好用, 那就自己创建一个 docker 镜像好了</p>
<p>参考 i96751414/cross-compiler-linux-arm64, 发现这个也是基于 Debain
容器镜像</p>
<p>Dockerfile 如下</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> debian</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 arm64 仓库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> dpkg --add-architecture arm64</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本机工具</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu make git file -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># arm64 端库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install qtbase5-dev:arm64 apt install libqt5svg5-dev:arm64 -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换 qmake</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> /usr/bin/qmake</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ln</span> -s /usr/lib/aarch64-linux-gnu/qt5/bin/qmake /usr/bin/qmake</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -t,--tag: 指定镜像名称</span></span><br><span class="line">docker build -t aarch64 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像完成后查看所有镜像, 找到刚才创建的 ID 3d0ee59732ed</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行镜像, 并挂载自己的工程路径到 docker 容器中, -i,--interactive 保持打开, -t,--tty 分配一个伪终端</span></span><br><span class="line">docker run -v /c/Users/shino/Desktop/qdraw:/mnt -it aarch64 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可在里面进行 qmake &amp;&amp; make 操作, 当然一切顺利后续可以直接执行如下命令。(--rm: 运行后立即删除容器)</span></span><br><span class="line">docker run -v /c/Users/shino/Desktop/qdraw:/mnt --<span class="built_in">rm</span> -it aarch64 bash -c <span class="string">"cd /mnt &amp;&amp; qmake &amp;&amp; make -j8"</span></span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Linux/CrossCompile/Ubuntu/使用Docker/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>交叉编译</category>
      </categories>
      <tags>
        <tag>交叉编译</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>快速搭建 linux 源码调试环境</title>
    <url>/2023/08/26/auto/38/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何快速搭建 linux 源码调试环境 <span id="more"></span></p>
<p>Makefile</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line">ARCH := arm64 </span><br><span class="line">CROSS_COMPILE := aarch64-linux-gnu-</span><br><span class="line"></span><br><span class="line">KDIR = linux-5.18.2</span><br><span class="line">KSRC_URL = https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/<span class="variable">$(KDIR)</span>.tar.xz</span><br><span class="line"></span><br><span class="line">KIMG = <span class="variable">$(KDIR)</span>/arch/arm64/boot/Image</span><br><span class="line">DTB = mydtb/my.dto</span><br><span class="line">DTS = $(DTB:.dto=.dts)</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(KDIR)</span> <span class="variable">$(KDIR)</span>/.config</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> ARCH=<span class="variable">$(ARCH)</span> CROSS_COMPILE=<span class="variable">$(CROSS_COMPILE)</span> Image -j8</span><br><span class="line"></span><br><span class="line"><span class="variable">$(KIMG)</span>: </span><br><span class="line">	make all</span><br><span class="line"></span><br><span class="line"><span class="variable">$(KDIR)</span>:</span><br><span class="line">	@echo <span class="string">"Download <span class="variable">$(KDIR)</span>"</span></span><br><span class="line">	@wget -c <span class="variable">$(KSRC_URL)</span> &amp;&amp; tar -xf <span class="variable">$(KDIR)</span>.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="variable">$(KDIR)</span>/.config:</span><br><span class="line">	make defconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认配置并开启调试功能</span></span><br><span class="line"><span class="section">defconfig: </span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> ARCH=<span class="variable">$(ARCH)</span> CROSS_COMPILE=<span class="variable">$(CROSS_COMPILE)</span> defconfig</span><br><span class="line">	<span class="variable">$(KDIR)</span>/scripts/config --file <span class="variable">$(KDIR)</span>/.config 	\</span><br><span class="line">		--set-val CONFIG_DEBUG_INFO y						\</span><br><span class="line">		--enable CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT 	\</span><br><span class="line">		--disable CONFIG_DEBUG_INFO_NONE					\</span><br><span class="line">		--disable CONFIG_DEBUG_INFO_SPLIT					\</span><br><span class="line">		--disable CONFIG_DEBUG_INFO_BTF						\</span><br><span class="line">		--disable CONFIG_DEBUG_INFO_REDUCED					\</span><br><span class="line">		--disable CONFIG_DEBUG_INFO_COMPRESSED				\</span><br><span class="line">		--disable CONFIG_GDB_SCRIPTS						\</span><br><span class="line">		--disable CONFIG_DEBUG_EFI</span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> ARCH=<span class="variable">$(ARCH)</span> CROSS_COMPILE=<span class="variable">$(CROSS_COMPILE)</span> oldconfig</span><br><span class="line"></span><br><span class="line"><span class="section">menuconfig:</span></span><br><span class="line">	make -C <span class="variable">$(KDIR)</span> ARCH=<span class="variable">$(ARCH)</span> CROSS_COMPILE=<span class="variable">$(CROSS_COMPILE)</span> menuconfig </span><br><span class="line"></span><br><span class="line"><span class="variable">$(DTS)</span>:</span><br><span class="line">	mkdir -p <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span></span><br><span class="line">	qemu-system-aarch64 -M  virt,dumpdtb=<span class="variable">$(DTB)</span> -nographic</span><br><span class="line">	dtc -I dtb -O dts <span class="variable">$(DTB)</span> &gt; <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">dtb: <span class="variable">$(DTS)</span></span></span><br><span class="line">	dtc -I dts -O dtb <span class="variable">$&lt;</span> -o <span class="variable">$(DTB)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(DTB)</span>: </span><br><span class="line">	make dtb</span><br><span class="line"></span><br><span class="line"><span class="section">qemu: <span class="variable">$(KIMG)</span> <span class="variable">$(DTB)</span></span></span><br><span class="line">	qemu-system-aarch64 -M  virt -cpu cortex-a53 -smp 2 -m 2048 -kernel <span class="variable">$(KIMG)</span> -dtb <span class="variable">$(DTB)</span> -nographic</span><br><span class="line"></span><br><span class="line"><span class="section">debug: <span class="variable">$(KIMG)</span> <span class="variable">$(DTB)</span></span></span><br><span class="line">	qemu-system-aarch64 -M  virt -cpu cortex-a53 -smp 2 -m 2048 -kernel <span class="variable">$(KIMG)</span> -dtb <span class="variable">$(DTB)</span> -nographic -S -s</span><br><span class="line"></span><br><span class="line">PHONY += dtb all defconfig qemu debug menuconfig</span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: $(PHONY)</span></span><br></pre></td></tr></tbody></table></figure>
<p>直接执行 make debug</p>
<p>然后配置 vscode</p>
<p>.vscode/launch.json</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.2.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurations"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"(gdb) 启动"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"cppdbg"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"launch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"program"</span><span class="punctuation">:</span> <span class="string">"${workspaceFolder}/linux-5.18.2/vmlinux"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span>       <span class="comment">// 在进入debug 后暂停程序</span></span><br><span class="line">            <span class="attr">"cwd"</span><span class="punctuation">:</span> <span class="string">"${workspaceFolder}"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"environment"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"externalConsole"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>    <span class="comment">// 调试对象启动控制台</span></span><br><span class="line">            <span class="attr">"MIMode"</span><span class="punctuation">:</span> <span class="string">"gdb"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"miDebuggerPath"</span><span class="punctuation">:</span> <span class="string">"/usr/bin/gdb-multiarch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"miDebuggerServerAddress"</span><span class="punctuation">:</span> <span class="string">"localhost:1234"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="前提环境">前提环境</h4>
<p>对于 Ubuntu 需安装 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-aarch64-linux-gnu</span><br><span class="line">sudo apt-get install libncurses5-dev  build-essential git bison flex libssl-dev gdb-multiarch</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>gdb-multiarch 适用于多平台的调试, 真不错</p>
<h4 id="参考文献">参考文献</h4>
<p><a class="link" href="https://zhuanlan.zhihu.com/p/510289859?utm_id=0">1<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Linux/DeviceTree/02debug/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>debug</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>03USB鼠标的实现</title>
    <url>/2023/03/09/auto/22/03USB%E9%BC%A0%E6%A0%87%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 <span id="more"></span></p>
<h1 id="usb-中断的处理过程">USB 中断的处理过程:</h1>
<p>一般来说当 USB
接口芯片（或片内外设）完成一个操作后就会产生一个中断请求信号, 以通知 CPU
来进行相关处理. 导致中断发生的事件有 USB 总线复位, 进入挂起状态,
成功接收到数据和发送完成等，具体的中断类型可查询USB接口芯片的中断相关寄存器来判断。</p>
<p><strong>例子</strong>:</p>
<p>假设有一个USB接口芯片（或片内外设）的中断类型寄存器如下:</p>
<table>
<colgroup>
<col style="width: 10%">
<col style="width: 6%">
<col style="width: 10%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr>
<th style="text-align: center;">状态位</th>
<th style="text-align: center;">7</th>
<th style="text-align: center;">6</th>
<th style="text-align: center;">5</th>
<th style="text-align: center;">4</th>
<th style="text-align: center;">3</th>
<th style="text-align: center;">2</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">上电默认</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr>
<td style="text-align: center;">中断类型</td>
<td style="text-align: center;">挂起</td>
<td style="text-align: center;">总线复位</td>
<td style="text-align: center;">端点2输入</td>
<td style="text-align: center;">端点2输出</td>
<td style="text-align: center;">端点1输入</td>
<td style="text-align: center;">端点1输入</td>
<td style="text-align: center;">端点0输出</td>
<td style="text-align: center;">端点0输出</td>
</tr>
</tbody>
</table>
<p>当其中某位的值为1，则表示该中断源发出了中断请求。由此可以在中断函数中对每一种中断源进行处理:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* USB 中断处理 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">USB_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 获取中断类型</span></span><br><span class="line">    <span class="type">uint8_t</span> type = GET_USB_ISR_TYPE();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">7</span>)) usb_bus_suspend(); <span class="comment">// 总线挂起中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">6</span>)) usb_bus_reset();   <span class="comment">// 总线复位中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">5</span>)) usb_end2_in();     <span class="comment">// 端点2输入中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">4</span>)) usb_end2_out();    <span class="comment">// 端点2输出中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">3</span>)) usb_end1_in();     <span class="comment">// 端点1输入中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">2</span>)) usb_end1_out();    <span class="comment">// 端点1输出中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">1</span>)) usb_end0_in();     <span class="comment">// 端点0输入中断处理</span></span><br><span class="line">    <span class="keyword">if</span>(type &amp; (<span class="number">1</span> &lt;&lt; <span class="number">0</span>)) usb_end0_out();    <span class="comment">// 端点0输出中断处理</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中断标志位清空, 有些硬件会在读取寄存器后自动清空</span></span><br><span class="line">    USB_ISR_FLAG_CLEAR();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>根据前面介绍的 USB 枚举过程可知, USB
主机在枚举过程会先对设备进行复位, 然后对设备的端点 0 进行控制传输,
以获取设备描述符.</p>
<p>这时会最先触发复位中断，之后再触发端点 0 的输出中断，表示 USB
芯片接收到了主机发来的数据, 因此可以在端点 0
的中断处理函数中将数据读取出来并做相应的处理:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">usb_end0_out</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 将端点0的数据读取到内存</span></span><br><span class="line">    USB_READ_ENDP_BUF(ENDP0, buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里是对硬件缓冲区进行清理, 因为一些芯片若缓冲区不清理</span></span><br><span class="line">    <span class="comment">// 则下次接收数据包时 (一般 SETUP 包除外, 因为设备必须接收) </span></span><br><span class="line">    <span class="comment">// 硬件会直接向主机回复 NAK</span></span><br><span class="line">    USB_ENDP_BUF_CLEAR(ENDP0);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="usb-标准请求">USB 标准请求</h2>
<p>USB协议定义了一个8字节的标准设备请求，主要用在设备的枚举过程中。这8字节的数据是在控制传输的建立过程通过默认控制端点0发出的。</p>
<p>在这8字节的数据中，包含了数据过程所需要传输数据传输的方向、长度以及数据类型等信息。正是由于8字节标准请求的原因，USB协议规定，端点0的最大包长度至少为8字节。也就是说，任何一个USB设备都能够（而且必须要）接收8字节的标准请求。</p>
<h3 id="usb-标准请求的结构">1. USB 标准请求的结构</h3>
<table>
<colgroup>
<col style="width: 5%">
<col style="width: 19%">
<col style="width: 5%">
<col style="width: 17%">
<col style="width: 50%">
</colgroup>
<thead>
<tr>
<th style="text-align: center;">偏移</th>
<th>域</th>
<th style="text-align: center;">大小</th>
<th style="text-align: center;">取值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">0</td>
<td>bmRequestType</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">位图</td>
<td>请求的特性</td>
</tr>
<tr>
<td style="text-align: center;">1</td>
<td>bRequest</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">数值</td>
<td>请求代码</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td>wValue</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">数值</td>
<td>该域的意义由具体的请求决定</td>
</tr>
<tr>
<td style="text-align: center;">4</td>
<td>wIndex</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">索引或偏移量</td>
<td>该域的意义由具体的请求决定</td>
</tr>
<tr>
<td style="text-align: center;">6</td>
<td>wLength</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">字节数</td>
<td>数据过程(如果有)所需要传输的字节数</td>
</tr>
</tbody>
</table>
<p>其中 <code>bmRequestType</code> 请求特性字节各个位含义如下</p>
<table>
<thead>
<tr>
<th>D7 数据传输方向</th>
<th>D[6:5] 请求的类型</th>
<th>D[4:0] 请求的接收者</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 = 主机到设备</td>
<td>0 = 标准</td>
<td>0 = 设备</td>
</tr>
<tr>
<td>1 = 设备到主机</td>
<td>1 = 类</td>
<td>1 = 接口</td>
</tr>
<tr>
<td></td>
<td>2 = 厂商</td>
<td>2 = 端点</td>
</tr>
<tr>
<td></td>
<td>3 = 保留</td>
<td>3 = 其他</td>
</tr>
<tr>
<td></td>
<td></td>
<td>4 ~ 31 = 保留</td>
</tr>
</tbody>
</table>
<p>本节只介绍USB协议定义的标准请求，即 bmRequestType 的 D[6:5] 位为 00
的请求。USB协议定义了11个标准请求（bRequest），其名字和请求代码如下表所示:</p>
<table>
<thead>
<tr>
<th>bRequest</th>
<th>Value</th>
<th></th>
<th>bRequest</th>
<th>Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET_STATUS</td>
<td>0</td>
<td></td>
<td>GET_CONFIGURATION</td>
<td>8</td>
</tr>
<tr>
<td>CLEAR_FEATURE</td>
<td>1</td>
<td></td>
<td>SET_CONFIGURATION</td>
<td>9</td>
</tr>
<tr>
<td>SET_FEATURE</td>
<td>3</td>
<td></td>
<td>GET_INTERFACE</td>
<td>10</td>
</tr>
<tr>
<td>SET_ADDRESS</td>
<td>5</td>
<td></td>
<td>SET_INTERFACE</td>
<td>11</td>
</tr>
<tr>
<td>GET_DESCRIPTOR</td>
<td>6</td>
<td></td>
<td>SYNCH_FRAME</td>
<td>12</td>
</tr>
<tr>
<td>SET_DESCRIPTOR</td>
<td>7</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>不同的请求对于其接收者、wValue和wIndex，其各字段的意义是不一样的。并且有的请求只能发送到设备，而有的请求可以发送到设备、接口和端点。</p>
<p>下表是各个标准请求的结构以及数据过程需要传输的数据。其中第一列有的有多个，主要是最低5位不同，即表示接收者不同。</p>
<p>(方向 类型 接收者)</p>
<table>
<colgroup>
<col style="width: 16%">
<col style="width: 22%">
<col style="width: 20%">
<col style="width: 14%">
<col style="width: 12%">
<col style="width: 12%">
</colgroup>
<thead>
<tr>
<th>bmRequestType</th>
<th>bRequest</th>
<th>wValue</th>
<th>wIndex</th>
<th>wLength</th>
<th>数据过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>(0 00 00000)B</td>
<td>CLEAR_FEATURE</td>
<td>特性选择</td>
<td>0</td>
<td>0</td>
<td>没有</td>
</tr>
<tr>
<td>(0 00 00001)B</td>
<td>..</td>
<td>..</td>
<td>接口号</td>
<td>..</td>
<td>..</td>
</tr>
<tr>
<td>(0 00 00010)B</td>
<td>..</td>
<td>..</td>
<td>端点号</td>
<td>..</td>
<td>..</td>
</tr>
<tr>
<td>(1 00 00000)B</td>
<td>GET_CONFIGURATION</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>配置值</td>
</tr>
<tr>
<td>(1 00 00000)B</td>
<td>GET_DESCRIPTOR</td>
<td>描述符类型和索引</td>
<td>0或者语言ID</td>
<td>描述符长度</td>
<td>描述符</td>
</tr>
<tr>
<td>(1 00 00001)B</td>
<td>GET_INTERFACE</td>
<td>0</td>
<td>接口号</td>
<td>1</td>
<td>备用接口号</td>
</tr>
<tr>
<td>(1 00 00000)B</td>
<td>GET_STATUS</td>
<td>0</td>
<td>0</td>
<td>2</td>
<td>设备状态</td>
</tr>
<tr>
<td>(1 00 00001)B</td>
<td>..</td>
<td>..</td>
<td>接口号</td>
<td>..</td>
<td>接口状态</td>
</tr>
<tr>
<td>(1 00 00010)B</td>
<td>..</td>
<td>..</td>
<td>端点号</td>
<td>..</td>
<td>端点状态</td>
</tr>
<tr>
<td>(0 00 00000)B</td>
<td>SET_ADDRESS</td>
<td>设备地址</td>
<td>0</td>
<td>0</td>
<td>没有</td>
</tr>
<tr>
<td>(0 00 00000)B</td>
<td>SET_CONFIGURATION</td>
<td>配置值</td>
<td>0</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(0 00 00000)B</td>
<td>SET_DESCRIPTOR</td>
<td>描述符类型和索引</td>
<td>0或者语言ID</td>
<td></td>
<td></td>
</tr>
<tr>
<td>(0 00 00000)B</td>
<td>SET_FEATURE</td>
<td>特性选择</td>
<td>0</td>
<td>0</td>
<td>没有</td>
</tr>
<tr>
<td>(0 00 00001)B</td>
<td>..</td>
<td>..</td>
<td>接口号</td>
<td>..</td>
<td>..</td>
</tr>
<tr>
<td>(0 00 00010)B</td>
<td>..</td>
<td>..</td>
<td>端点号</td>
<td>..</td>
<td>..</td>
</tr>
<tr>
<td>(0 00 00001)B</td>
<td>SET_INTERFACE</td>
<td>备用接口号</td>
<td>接口号</td>
<td>0</td>
<td>没有</td>
</tr>
<tr>
<td>(1 00 00010)B</td>
<td>SYNCH_FRAME</td>
<td>0</td>
<td>端点号</td>
<td>2</td>
<td>帧号</td>
</tr>
</tbody>
</table>
<p>常用的几个请求为 GET_DESCRIPTOR, SET_ADDRESS 和 SET_CONFIGURATION</p>
<h4 id="get_descriptor-请求">1) GET_DESCRIPTOR 请求</h4>
<p>GET_DESCRIPTOR（获取描述符）请求是在枚举过程中用得最多的一个请求。主机通过发送获取描述符请求读取设备的各种描述符，从而可以获知设备类型、端点情况等众多重要信息。</p>
<p>获取描述符的接收者只能是设备，从 bmRequestType 的第 7
位可以看出，它是请求数据输入的。bRequest的值为Ox06（GET_DESCRIPTOR）。</p>
<p>GET_DESCRIPTOR 请求的结构如下:</p>
<table>
<colgroup>
<col style="width: 19%">
<col style="width: 25%">
<col style="width: 19%">
<col style="width: 13%">
<col style="width: 12%">
<col style="width: 9%">
</colgroup>
<thead>
<tr>
<th>bmRequestType</th>
<th>bRequest</th>
<th>wValue</th>
<th>wIndex</th>
<th>wLength</th>
<th>数据过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>10000000B (0x80)</td>
<td>GET_DESCRIPTOR (0x06)</td>
<td>描述符类型和索引</td>
<td>0或者语言ID</td>
<td>描述符长度</td>
<td>描述符</td>
</tr>
</tbody>
</table>
<ul>
<li><p>wValue
域的第一字节（低字节）表示的是索引号，用来选择同一种描述符（例如字符串描述符和配置描述符）中具体的某个描述符。</p></li>
<li><p>wValue
域的第二字节，表示描述符的类型编号。各种描述符的类型编号定义如下</p></li>
</ul>
<table>
<thead>
<tr>
<th>描述符类型</th>
<th>编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>设备描述符 (DEVICE)</td>
<td>1</td>
</tr>
<tr>
<td>配置描述符 (CONFIGURATION)</td>
<td>2</td>
</tr>
<tr>
<td>字符串描述符 (STRING)</td>
<td>3</td>
</tr>
<tr>
<td>接口描述符 (INTERFACE)</td>
<td>4</td>
</tr>
<tr>
<td>端点描述符 (ENDPOINT)</td>
<td>5</td>
</tr>
</tbody>
</table>
<ul>
<li><p>wIndex
域只在获取字符串描述符中有用，它表示字符串的语言ID号，获取除字符串描述符的其他描述符时，wIndex的值为0.</p></li>
<li><p>wLength域为请求设备返回数据的字节数，设备实际返回的字节数可以比该域指定的字节数少。设备在收到获取描述符的请求后，应该按照所请求的描述符类型编号，在数据过程中返回相应的描述符。</p></li>
</ul>
<p>对于全速模式和低速模式，获取描述符的标准请求只有三种：获取设备描述符、获取配置描述符和获取字符串描述符。</p>
<p>另外的接口描述符和端点描述符是跟随配置描述符一并返回的，不能单独请求返回（如果单独返回，主机无法确认它们属于哪个配置）。</p>
<blockquote>
<p>需要注意的是wValue、wIndex、wLength这三个域都是两字节的，在USB协议中规定，使用的是小端结构，即低字节在先，高字节在后。</p>
</blockquote>
<h4 id="set_address-请求">2) SET_ADDRESS 请求</h4>
<p>SET_ADDRESS（设置地址）请求是主机请求设备使用指定地址的请求，指定的地址就包含在8字节数据中的wValue字段中。</p>
<p>每个连接在同一个主控制器上的USB设备都需要具有一个唯一的设备地址，这样主机才能区分每个不同的设备。当设备复位后，都使用默认的地址0.</p>
<p>主机从地址为 0
的设备获取设备描述符，一旦收到第一次设备描述符之后，主机就会发送设置地址的请求，以尽量减少设备使用公共地址
0 的时间。</p>
<p>设置地址请求是没有数据过程的，因而 wLength 的值为 0.
wIndex也用不着，值为0.</p>
<p>当设备收到设置地址请求后，就直接进入状态过程，等待主机读取0长度的状态数据包。主机成功读取到状态数据包（用ACK响应设备）后，设备将启用新的地址。这以后的传输中，主机都将使用新的地址与设备进行通信。</p>
<p>SET_ADDRESS 请求的结构如下:</p>
<table>
<colgroup>
<col style="width: 25%">
<col style="width: 28%">
<col style="width: 12%">
<col style="width: 9%">
<col style="width: 11%">
<col style="width: 12%">
</colgroup>
<thead>
<tr>
<th>bmRequestType</th>
<th>bRequest</th>
<th>wValue</th>
<th>wIndex</th>
<th>wLength</th>
<th>数据过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>00000000B (0x00)</td>
<td>SET_ADDRESS (0x05)</td>
<td>设备地址</td>
<td>0</td>
<td>0</td>
<td>没有</td>
</tr>
</tbody>
</table>
<h4 id="set_configuration-请求">3) SET_CONFIGURATION 请求</h4>
<p>SET_CONFIGURATION（设置配置）请求和设置地址请求很类似。区别在于
wValue域的意义。</p>
<p>在设置地址请求中，wValue的第一字节（低字节）为设备的地址；而在设置配置请求中，wValue的第一字节为配置的值。</p>
<p>当该值与某配置描述符中的配置编号一致时，表示选中该配置。该值通常为1，因为大多数USB设备只有一种配置，配置编号为1；</p>
<p>如果该值为0，则会让设备进人设置地址状态。设备只有在收到非0的配置值后，才能启用它的非0端点。</p>
<p>SET_CONFIGURATION 请求的结构如下:</p>
<table>
<colgroup>
<col style="width: 23%">
<col style="width: 35%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 10%">
<col style="width: 11%">
</colgroup>
<thead>
<tr>
<th>bmRequestType</th>
<th>bRequest</th>
<th>wValue</th>
<th>wIndex</th>
<th>wLength</th>
<th>数据过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>00000000B (0x00)</td>
<td>SET_CONFIGURATION (0x09)</td>
<td>配置值</td>
<td>0</td>
<td>0</td>
<td>没有</td>
</tr>
</tbody>
</table>
<h3 id="设备描述符的实现">2. 设备描述符的实现</h3>
<p>当主机请求设备返回设备描述符时，设备应该在数据过程中返回设备的设备描述符。</p>
<p>已知每个设备都必须有且仅有一个设备描述符，它的结构如下:</p>
<table>
<thead>
<tr>
<th>偏移量</th>
<th>域</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>bLength</td>
<td>1</td>
<td>该描述符的长度 (18 字节)</td>
</tr>
<tr>
<td>1</td>
<td>bDescriptorType</td>
<td>1</td>
<td>描述符类型 (设备描述符为 0x01)</td>
</tr>
<tr>
<td>2</td>
<td>bcdUSB</td>
<td>2</td>
<td>本设备所使用的 USB 协议版本</td>
</tr>
<tr>
<td>4</td>
<td>dDeviceClass</td>
<td>1</td>
<td>类代码</td>
</tr>
<tr>
<td>5</td>
<td>bDeviceSubClass</td>
<td>1</td>
<td>子类代码</td>
</tr>
<tr>
<td>6</td>
<td>bDeviceProtocol</td>
<td>1</td>
<td>设备所使用的协议</td>
</tr>
<tr>
<td>7</td>
<td>bMaxPackeSize0</td>
<td>1</td>
<td>端点0最大包长</td>
</tr>
<tr>
<td>8</td>
<td>iVender</td>
<td>2</td>
<td>厂商 ID</td>
</tr>
<tr>
<td>10</td>
<td>idProduct</td>
<td>2</td>
<td>产品 ID</td>
</tr>
<tr>
<td>12</td>
<td>bcdDevice</td>
<td>2</td>
<td>设备版本号</td>
</tr>
<tr>
<td>14</td>
<td>iManufacturer</td>
<td>1</td>
<td>描述厂商的字符串的索引</td>
</tr>
<tr>
<td>15</td>
<td>iProduct</td>
<td>1</td>
<td>描述产品的字符串的索引</td>
</tr>
<tr>
<td>16</td>
<td>iSerialNumber</td>
<td>1</td>
<td>产品序列号字符串的索引</td>
</tr>
<tr>
<td>17</td>
<td>bNumConfigurations</td>
<td>1</td>
<td>可能的配置数</td>
</tr>
</tbody>
</table>
<h5 id="blength">1) bLength</h5>
<p>长度为1字节，表示该描述符的长度。设备描述符的长度为18字节，写成十六进制就是0x12。</p>
<h5 id="bdescriptortype">2) bDescriptorType</h5>
<p>描述符的类型，长度为1字节。具体的取值如表3.5.5所列。设备描述符的编号为0x01。</p>
<h5 id="bcdusb">3) bcdUSB</h5>
<p>该设备所使用的USB协议的版本，长度为2字节。可以取2.0或者1.1等版本号。</p>
<blockquote>
<p>注意，它是用BCD码来表示的</p>
<p>例如USB2.0协议就是0x0200，而USB1.1协议就是0x0110.前面说过，USB协议中使用的是小端结构，所以实际数据在传输时，是低字节在先的</p>
<p>也就是说，USB2.0协议的bcdUSB拆成两个字节就是0x00和0x02.而USB1.1的bcdUSB拆成两个字节就是0x10和0x01。</p>
</blockquote>
<h5 id="bdeviceclass">4) bDeviceClass</h5>
<p>长度为1字节，是设备所使用的类代码。设备的类代码由USB协会规定，具体的类代码可查阅USB相关文档。对于大多数标准的USB设备类，该字段通常设置为0，而在接口描述符中的bInterfaceClass中指定接口所实现的功能。当bDeviceClass为0时，下面的bDeviceSubClass也必须为0.如果bDeviceClass为OxFF，表示是厂商自定义的设备类。</p>
<h5 id="bdevicesubclass">5) bDeviceSubClass</h5>
<p>长度为1字节，是设备所使用的子类代码。当类代码不为0和OxFF时，子类代码由USB协议规定。当bDeviceClass为0时，bDeviceSubClass也必须为0。</p>
<h5 id="bdeviceprotocol">6) bDeviceProtocol</h5>
<p>长度为1字节，是设备所使用的协议，协议代码由USB协会规定。当该字段为0时，表示设备不使用类所定义的协议。当该字段为OxFF时，表示设备使用厂商自定义的协议。bDeviceProtocol必须要结合设备类和设备子类联合使用才有意义，因此当类代码为0时，bDeviceProtocol应该也要为0。</p>
<h5 id="bmaxpackesizeo">7) bMaxPackeSizeo</h5>
<p>长度为1字节，是端点0的最大包长。它的取值可以为8、16、32、64。</p>
<h5 id="idvender">8) idVender</h5>
<p>长度为2字节，它是厂商的ID号。该ID号由USB协会分配，不能随意使用。可以跟USB协会申请一个厂商D号，但是这是需要交“保护费”的。在实验中，选取了一个0x8888作为厂商ID号。这个ID号是随便选的，也许它已经被某个公司购买了。</p>
<p>只是拿来学习使用是没关系的，如果要做真正的产品设计，就要注意了，必须要使用公司自己的ID号，以避免侵权。另外，主机通常是靠厂商ID号、产品ID号以及产品序列号来安装和加载驱动的，如果使用了别人的ID号，可能会导致驱动程序安装或加载错误，从而导致设备无法工作。跟bcdUSB一样，要注意小端结构的问题。</p>
<h5 id="idproduct">9) idProduct</h5>
<p>长度为2字节，是产品ID号。与厂商ID号不一样，它是由生产厂商自己根据产品来编号的，比较自由。</p>
<p>USB鼠标，可以给它分配产品ID为0x0001；USB键盘，可以分配产品ID为0x0002，而厂商ID则使用同一个0x8888.通常主机会根据厂商ID、产品ID以及设备的序列号来加载对应的驱动。</p>
<p>调试时很容易犯的一个错误是在修改描述符之后，重新测试，却没有修改上述三个中的任何一个，结果加载的还是旧驱动，从而工作不正常。这时如果没有想到这一点，一个劲地在那查找固件的问题，恐怕是找不出问题的。</p>
<p>如果不想修改这些ID号和序列号，还有另外一个方法就是去设备管理器里，将原先的驱动卸载，然后扫描新硬件或者拔下重新插上，让它重新安装驱动。不过有时卸载了还是会有残留信息在注册表中，所以还是改ID比较保险。</p>
<h5 id="bcddevice">10) bcdDevice</h5>
<p>长度为2字节，是设备的版本号。当同一个产品升级后（例如修改了固件增加了某些功能），可以通过修改设备的版本号来区别。
##### 11) iManufacturer</p>
<p>长度为1字节，是描述厂商的字符串的索引值。当该值为0时，表示没有厂商字符串。主机获取设备描述符时，会将索引值放在wValue的第一字节中，用来选择不同的字符串。</p>
<h5 id="iproduct">12) iProduct</h5>
<p>长度为1字节，是描述产品的字符串的索引值。</p>
<p>当该值为0时，表示没有产品字符串。当第一次插上某个USB设备时，会在Windows的右下角弹出一个对话框，显示发现新硬件，并且会显示该设备的名称。</p>
<p>其实这里显示的信息就是从产品字符串里获取来的。如果想让它显示出所需要的信息，应该修改产品字符串。</p>
<h5 id="iserialnumber">12) iSerialNumber</h5>
<p>长度为1字节，是设备的序列号字符串索引值。</p>
<p>最好给你的每个产品指定一个唯一的序列号，好比每个英特尔的奔四处理器都有一个ID号一样。设备序列号可能被主机联合VID和PID用来区别不同的设备，有时同时连接多个具有相同VID、PID以及设备序列号的设备，可能会导致设备无法正确识别。当该值为0时，表示没有序列号字符串。</p>
<h5 id="bnumconfigurations">13) bNumConfigurations</h5>
<p>长度为1字节，表示设备有多少种配置。每种配置都会有一个配置描述符，主机通过发送设置配置来选择某一种配置。大部分的USB设备只有一个配置，即该字段的值为1。</p>
<p>通过上面的描述，就可以构造一个设备描述符了。</p>
<p>下面给出USB鼠标实例的设备描述符。这里使用数组来实现，使用数组的好处是可移植性好，但是可读性稍差点。如果使用结构体，可读性会好一些；但是在不同位数的处理器中移植时，可能存在着字节对齐、大小端问题和结构体填充等问题。</p>
<table>
<thead>
<tr>
<th>偏移量</th>
<th>域</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>bLength</td>
<td>1</td>
<td>该描述符的长度 (18 字节)</td>
</tr>
<tr>
<td>1</td>
<td>bDescriptorType</td>
<td>1</td>
<td>描述符类型 (设备描述符为 0x01)</td>
</tr>
<tr>
<td>2</td>
<td>bcdUSB</td>
<td>2</td>
<td>本设备所使用的 USB 协议版本</td>
</tr>
<tr>
<td>4</td>
<td>dDeviceClass</td>
<td>1</td>
<td>类代码</td>
</tr>
<tr>
<td>5</td>
<td>bDeviceSubClass</td>
<td>1</td>
<td>子类代码</td>
</tr>
<tr>
<td>6</td>
<td>bDeviceProtocol</td>
<td>1</td>
<td>设备所使用的协议</td>
</tr>
<tr>
<td>7</td>
<td>bMaxPackeSize0</td>
<td>1</td>
<td>端点0最大包长</td>
</tr>
<tr>
<td>8</td>
<td>iVender</td>
<td>2</td>
<td>厂商 ID</td>
</tr>
<tr>
<td>10</td>
<td>idProduct</td>
<td>2</td>
<td>产品 ID</td>
</tr>
<tr>
<td>12</td>
<td>bcdDevice</td>
<td>2</td>
<td>设备版本号</td>
</tr>
<tr>
<td>14</td>
<td>iManufacturer</td>
<td>1</td>
<td>描述厂商的字符串的索引</td>
</tr>
<tr>
<td>15</td>
<td>iProduct</td>
<td>1</td>
<td>描述产品的字符串的索引</td>
</tr>
<tr>
<td>16</td>
<td>iSerialNumber</td>
<td>1</td>
<td>产品序列号字符串的索引</td>
</tr>
<tr>
<td>17</td>
<td>bNumConfigurations</td>
<td>1</td>
<td>可能的配置数</td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> device_descriptor[<span class="number">0x12</span>] = {</span><br><span class="line">    <span class="number">0x12</span>,           <span class="comment">// bLength          设备描述符的长度 (18 字节)</span></span><br><span class="line">    <span class="number">0x01</span>,           <span class="comment">// bDescriptorType  设备描述符的编号 0x01</span></span><br><span class="line">    <span class="number">0x010</span>, <span class="number">0x01</span>,    <span class="comment">// bcdUSB           USB 协议版本 0x0110 (USB1.1)</span></span><br><span class="line">    <span class="number">0x00</span>,           <span class="comment">// dDeviceClass     设备类我们是在接口描述符中定义, 不在设备描述符定义, 所以为 0</span></span><br><span class="line">    <span class="number">0x00</span>,           <span class="comment">// bDeviceSubClass  dDeviceClass 为 0 时, 该字段也为 0</span></span><br><span class="line">    <span class="number">0x00</span>,           <span class="comment">// bDeviceProtocol  dDeviceClass 为 0 时, 该字段也为 0</span></span><br><span class="line">    <span class="number">0x10</span>,           <span class="comment">// bMaxPackeSize0   端点0最大包长, 由 USB 芯片端点的缓冲区大小决定</span></span><br><span class="line">    <span class="number">0x88</span>, <span class="number">0x88</span>,     <span class="comment">// iVender          厂商 ID, 这里 0x8888 仅实验用</span></span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>,     <span class="comment">// idProduct        产品 ID, 0x0001</span></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x01</span>,     <span class="comment">// bcdDevice        设备版本号, 0x0100, 把它定位为 V1.0 版本</span></span><br><span class="line">    <span class="number">0x01</span>,           <span class="comment">// iManufacturer    描述厂商的字符串的索引，为了方便管理, 这里就从 1 开始</span></span><br><span class="line">    <span class="number">0x02</span>,           <span class="comment">// iProduct         描述产品的字符串的索引, 刚才用了 1, 这里就取 2</span></span><br><span class="line">    <span class="number">0x03</span>,           <span class="comment">// iSerialNumber    产品序列号字符串的索引, 按顺序下来, 这里取 3 即可</span></span><br><span class="line">    <span class="number">0x01</span>,           <span class="comment">// bNumConfigurations 该设备所具有的配置数, 这里只要一种配置即可</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="设备描述符的返回">3. 设备描述符的返回</h3>
<p>在端点0的输出中断处理函数中，我们已经接收到了标准请求的数据,
这时可先对接收到的建立过程的数据进行判断，如果是获取设备描述符的请求，那么将设备描述符数组的内容写人到端点0输入缓冲区中，并使能端点发送。</p>
<p>当主机在下一次发送IN令牌后，USB
接口芯片将会自动将端点0输入缓冲区中的数据返回给主机，这样就实现了获取设备描述符的请求。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> *p_send_data;</span><br><span class="line"><span class="type">static</span> <span class="type">uint16_t</span> send_length;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> need_zero_package = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">usb_end0_out</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 将端点0的数据读取到内存</span></span><br><span class="line">    USB_READ_ENDP_BUF(ENDP0, buf);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>  bmRequestType  = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="type">uint8_t</span>  bRequest       = buf[<span class="number">1</span>];</span><br><span class="line">    <span class="type">uint16_t</span> wValue         = buf[<span class="number">2</span>] + (buf[<span class="number">3</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    <span class="type">uint16_t</span> wIndex         = buf[<span class="number">4</span>] + (buf[<span class="number">5</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line">    <span class="type">uint8_t</span>  wLength        = buf[<span class="number">6</span>] + (buf[<span class="number">7</span>] &lt;&lt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入请求</span></span><br><span class="line">    <span class="keyword">if</span>(bmRequestType &amp; (<span class="number">1</span> &lt;&lt; <span class="number">8</span>)) </span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// D[6:5] 为请求的类型, 其中 00 为标准请求</span></span><br><span class="line">        <span class="keyword">if</span>(bmRequestType &amp; <span class="number">0x60</span> == <span class="number">0</span>) </span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">switch</span>(bRequest)  </span><br><span class="line">            {</span><br><span class="line">                <span class="comment">// 获取配置请求</span></span><br><span class="line">                <span class="keyword">case</span> GET_CONFIGURATION:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取描述符请求</span></span><br><span class="line">                <span class="keyword">case</span> GET_DESCRIPTOR:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 处理更多标准输入请求 ...</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 未定义的标准输入请求</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求长度和实际数据长度之间取最小值</span></span><br><span class="line">        <span class="keyword">if</span>(wLength &lt; send_length)</span><br><span class="line">            send_length = wLength;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刚好是整数个数据包, 需发一个空包表示结束传输</span></span><br><span class="line">        <span class="keyword">if</span>(send_length % device_descriptor[<span class="number">7</span>] == <span class="number">0</span>)</span><br><span class="line">            need_zero_package = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 立即向端点 0 写数据, 若数据未发完, 会在中断处理函数 usb_end0_in 中继续发送 */</span></span><br><span class="line">        usb_end0_write_data();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    USB_ENDP_BUF_CLEAR(ENDP0);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>下面是对上述代码框架获取描述符部分的填充:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取描述符请求</span></span><br><span class="line"><span class="keyword">case</span> GET_DESCRIPTOR:</span><br><span class="line">    <span class="comment">// 根据 wValue 的高字节, 检查请求的描述符类型</span></span><br><span class="line">    <span class="keyword">switch</span> ((wValue &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 获取设备描述符</span></span><br><span class="line">        <span class="keyword">case</span> DEVICE_DESCRIPTOR:</span><br><span class="line"></span><br><span class="line">        p_send_data = device_descriptor;</span><br><span class="line">        send_length = device_descriptor[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取配置描述符</span></span><br><span class="line">        <span class="keyword">case</span> CONFIGURATION_DESCRIPTOR:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取字符串描述符</span></span><br><span class="line">        <span class="keyword">case</span> STRING_DESCRIPTOR:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>其中向端点 0 写数据的函数定义如下:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">usb_end0_write_data</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 剩余要发的数据大于端点包大小, 则发送一个最大包长的数据</span></span><br><span class="line">    <span class="keyword">if</span>(send_length &gt; device_descriptor[<span class="number">7</span>])</span><br><span class="line">    {</span><br><span class="line">        USB_WRITE_ENDP_BUF(ENDP0, p_send_data, device_descriptor[<span class="number">7</span>]);</span><br><span class="line">        send_length -= device_descriptor[<span class="number">7</span>];</span><br><span class="line">        p_send_data += device_descriptor[<span class="number">7</span>];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(send_length != <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        USB_WRITE_ENDP_BUF(ENDP0, p_send_data, send_length);</span><br><span class="line">        send_length = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 要发的数据和端点包大小刚好整除, 还需发最后一个空包来结束发送</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(need_zero_package == <span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        USB_WRITE_ENDP_BUF(ENDP0, p_send_data, <span class="number">0</span>);</span><br><span class="line">        need_zero_package = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 端点0输入中断处理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">usb_end0_in</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    usb_end0_write_data();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>到此程序已经能够自动返回设备描述符了.</p>
<h3 id="设置地址请求的处理">4. 设置地址请求的处理</h3>
<p>每个USB设备都具有一个唯一的设备地址，这个地址是主机在设置地址请求时分配给设备的。设备在收到设置地址请求后，应该返回一个0长度的状态数据包（因为设置地址请求是没有数据过程的），然后等待主机确认这个数据包（即用ACK应答设备）。设备在正确接收到状态数据包的ACK之后，就开始使用新的设备地址了。</p>
<p>一般 USB 接口芯片会提供一个寄存器用来设置设备地址, 我们这里假设宏
<code>USB_SET_ADDR(addr)</code> 可完成该功能:</p>
<p>因此只需在处理标准请求框架中填充设置地址的相关代码, 如下:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取描述符请求</span></span><br><span class="line"><span class="keyword">case</span> SET_ADDRESS:</span><br><span class="line">    <span class="comment">// wValue 中的低8位是设置的地址值</span></span><br><span class="line">    USB_SET_ADDR(wValue &amp; <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置没有数据过程, 直接进入到状态过程, 因此返回一个 0 长度的数据包</span></span><br><span class="line">    send_length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>在设置设备地址成功后, 主机会再次获取设备描述符,
但这次将会是完整地获取。</p>
<p>获取完设备描述符之后，主机接着又发了一个请求：获取配置描述符的请求，请求长度为9字节。标准配置描述符的长度就是9字节的。</p>
<p>通常主机第一次先获取9字节长度的配置描述符，然后根据配置描述符中的配置集合长度，再次获取配置描述符。</p>
<p>第二次获取配置描述符时，会将配置描述符、接口描述符、类特殊描述符（如果有）、端点描述符等一并读回。</p>
<p>因此接下来就是实现配置描述符及接口描述符、类特殊描述符、端点描述符这个大集合----配置描述符集合。</p>
<h3 id="配置描述符集合">5. 配置描述符集合</h3>
<p>每个USB设备至少都要有一个配置描述符，在设备描述符中规定了该设备有多少种配置，每种配置都有一个描述符。在本USB实例中，只有一个配置描述符。</p>
<h4 id="配置描述符的结构">1) 配置描述符的结构</h4>
<p>如下是USB协议规定的标准配置描述符的结构。</p>
<table>
<thead>
<tr>
<th>偏移量</th>
<th>域</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>bLength</td>
<td>1</td>
<td>该描述符的长度 (9 字节)</td>
</tr>
<tr>
<td>1</td>
<td>bDescriptorType</td>
<td>1</td>
<td>描述符类型 (配置描述符为 0x02)</td>
</tr>
<tr>
<td>2</td>
<td>wTotalLength</td>
<td>2</td>
<td>配置描述符集合总长度</td>
</tr>
<tr>
<td>4</td>
<td>bNumInterfaces</td>
<td>1</td>
<td>该配置所支持的接口数</td>
</tr>
<tr>
<td>5</td>
<td>bConfigurationValue</td>
<td>1</td>
<td>该配置的值</td>
</tr>
<tr>
<td>6</td>
<td>iConfiguration</td>
<td>1</td>
<td>描述该配置的字符串的索引值</td>
</tr>
<tr>
<td>7</td>
<td>bmAttributes</td>
<td>1</td>
<td>该设备的属性</td>
</tr>
<tr>
<td>8</td>
<td>bMaxPower</td>
<td>1</td>
<td>设备所需要的电流 (单位 2 mA)</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>bLength</strong>
大小为1字节，表示该描述符的长度。标准的USB配置描述符的长度为9字节。</li>
<li><strong>bDescriptorType</strong>
大小为1字节，表示描述符的类型。配置描述符的类型编码为0x02。</li>
<li><strong>wTotalLength</strong>
大小为2字节，表示整个配置描述符集合的总长度，包括配置描述符、接口描述符、类特殊描述符（如果有）和端点描述符。注意低字节在先。</li>
<li><strong>bNumInterfaces</strong>
大小为1字节，表示该配置所支持的接口数量。通常，功能单一的设备只具有一个接口（例如鼠标），而复合设备则具有多个接口（例如音频设备）。</li>
<li><strong>bConfigurationValue</strong>
大小为1字节，表示该配置的值。通常一个USB设备可以支持多个配置，bConfigurationValue就是每个配置的标识。设置配置请求时会发送一个配置值，如果某个配置的bConfigurationValue值与它相匹配，就表示该配置被激活，为当前配置。</li>
<li><strong>iConfiguration</strong>
大小为1字节，是描述该配置的字符串的索引值。如果该值为0，则表示没有字符串。</li>
<li><strong>bmAttributes</strong>
大小为1字节，用来描述设备的一些特性。其中，D7是保留的，必须要设置为1.
D6表示供电方式，当D6为1时，表示设备是自供电的；当D6为0时，表示设备是总线供电的。D5表示是否支持远程唤醒，当D5为1时，支持远程唤醒。D4～DO保留，设置为0。</li>
<li><strong>bMaxPower</strong>
大小为1字节，表示设备需要从总线获取的最大电流量，单位为2mA。例如、如果需要200mA的最大电流，则该字节的值为100。</li>
</ul>
<h4 id="接口描述符的结构">2) 接口描述符的结构</h4>
<p>如下是 USB
协议规定的标准接口描述符的结构。接口描述符不能单独返回，必须附着在配置描述符后一并返回。</p>
<table>
<thead>
<tr>
<th>偏移量</th>
<th>域</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>bLength</td>
<td>1</td>
<td>该描述符的长度 (9 字节)</td>
</tr>
<tr>
<td>1</td>
<td>bDescriptorType</td>
<td>1</td>
<td>描述符类型 (接口描述符为 0x04)</td>
</tr>
<tr>
<td>2</td>
<td>blnterfaceNumber</td>
<td>1</td>
<td>该接口的编号 (从0开始)</td>
</tr>
<tr>
<td>3</td>
<td>bAlternateSetting</td>
<td>1</td>
<td>该接口的备用编号</td>
</tr>
<tr>
<td>4</td>
<td>bNumEndpoints</td>
<td>1</td>
<td>该接口所使用的端点数</td>
</tr>
<tr>
<td>5</td>
<td>bInterfaceClass</td>
<td>1</td>
<td>该接口所使用的类</td>
</tr>
<tr>
<td>6</td>
<td>bInterfaceSubClass</td>
<td>1</td>
<td>该接口所使用的子类</td>
</tr>
<tr>
<td>7</td>
<td>bInterfaceProtocol</td>
<td>1</td>
<td>该接口所使用的协议</td>
</tr>
<tr>
<td>8</td>
<td>iInterface</td>
<td>1</td>
<td>描述该接口的字符串的索引值</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>bLength</strong>
大小为1字节，表示该描述符的长度。标准的USB接口描述符的长度为9字节。</li>
<li><strong>bDeseriptorType</strong>
大小为1字节，是描述符的类型。接口描述符的类型编码为0x04。</li>
<li><strong>blnterfaceNumber</strong>
大小为1字节，表示该接口的编号。当一个配置具有多个接口时，每个接口的编号都不相同。从0开始依次递增对一个配置的接口进行编号。</li>
<li><strong>bAlternateSetting</strong>
大小为1字节，是该接口的备用编号。编号规则与bInter-faceNumber一样，很少会使用该字段，设置为0。</li>
<li><strong>bNumEndpoints</strong>
大小为1字节，是该接口所使用的端点数（不包括0端点）。如果该字段为0，则表示没有非0端点，只使用默认的控制端点。</li>
<li><strong>bInterfaceClass、bInterfaceSubClass、bInterfaceProtocol</strong>
分别是接口所使用的类、子类以及协议，它们的代码由USB协会定义，跟设备描述符中的意义类似。通常在接口中定义设备的功能，而在设备描述符中将类、子类以及协议字段的值设置为0。</li>
<li><strong>iInterface</strong>
大小为1字节，是描述该接口的字符串的索引值。如果该值为0，则表示没有字符串。</li>
</ul>
<h4 id="端点描述符的结构">3) 端点描述符的结构</h4>
<p>如下是USB协议规定的标准端点描述符的结构。端点描述符不能单独返回，必须附着在配置描述符后一并返回。</p>
<table>
<thead>
<tr>
<th>偏移量</th>
<th>域</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>bLength</td>
<td>1</td>
<td>该描述符的长度 (7 字节)</td>
</tr>
<tr>
<td>1</td>
<td>bDescriptorType</td>
<td>1</td>
<td>描述符类型 (端点描述符为 0x05)</td>
</tr>
<tr>
<td>2</td>
<td>bEndpointAddress</td>
<td>1</td>
<td>该端点的地址</td>
</tr>
<tr>
<td>3</td>
<td>bmAttributes</td>
<td>1</td>
<td>该端点的属性</td>
</tr>
<tr>
<td>4</td>
<td>wMaxPackeSize</td>
<td>2</td>
<td>该端点支持的最大包长度</td>
</tr>
<tr>
<td>6</td>
<td>bInterval</td>
<td>1</td>
<td>端点的查询时间</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>bLength</strong>
大小为1字节，表示该描述符的长度。标准的USB端点描述符的长度为7字节。</li>
<li><strong>bDescriptorType</strong>
大小为1字节，表示描述符的类型。端点描述符的类型编码为0x05。</li>
<li><strong>bEndpointAddress</strong>
大小为1字节，表示该端点的地址。最高位D7为该端点的传输方向，1
为输入（有点像Input的第一个字母），0为输出（有点像Output的第一个字母）。D[3:0]为端点号。D[6:4]保留，设为0。</li>
<li><strong>bmAttributes</strong>
大小为1字节，是该端点的属性。最低两位D[1:0]表示该端点的传输类型，0为控制传输，1为等时传输，2为批量传输，3为中断传输。如果该端点是非等时传输的端点，那么D[7:2]为保留值，设为0.如果该端点是等时传输的，则D[3:2]表示同步的类型，0为无同步，1为异步，2为适配，3为同步；D[5:4]表示用途，0为数据端点，1为反馈端点，2为暗含反馈的数据端点，3是保留值。D[7:6]保留。</li>
<li><strong>wMaxPackeSize</strong>
大小为2字节，是该端点所支持的最大包长度。注意低字节在先。对于全速模式和低速模式，D[10:0]表示端点的最大包长，其他位保留为0.对于高速模式，D[12:11]为每个帧附加的传输次数，具体请参看USB2.0协议。</li>
<li><strong>bInterval</strong>
大小为1字节，表示该端点查询的时间。对于中断端点，表示查询的帧间隔数。对于等时传输以及高速模式的中断、批量传输，该字段的意义请参看USB2.0协议。</li>
</ul>
<h4 id="hid-描述符的结构">4) HID 描述符的结构</h4>
<p>我们知道，USB鼠标是属于 USB HID 类的。通过查看 USB HID
类的官方文档，HID类的设备在配置描述符中还需要一个HID描述符。它是一个类描述符，应该跟在接口描述符后面。HID描述符的结构如下:</p>
<table>
<thead>
<tr>
<th>偏移量</th>
<th>域</th>
<th>大小</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>bLength</td>
<td>1</td>
<td>该描述符的长度</td>
</tr>
<tr>
<td>1</td>
<td>bDescriptorType</td>
<td>1</td>
<td>描述符类型 ( HID 描述符为 0x21)</td>
</tr>
<tr>
<td>2</td>
<td>bcdHID</td>
<td>2</td>
<td>HID 协议的版本</td>
</tr>
<tr>
<td>4</td>
<td>bCountyCode</td>
<td>1</td>
<td>国家代码</td>
</tr>
<tr>
<td>5</td>
<td>bNumDescriptors</td>
<td>1</td>
<td>下级描述符的数量</td>
</tr>
<tr>
<td>6</td>
<td>bDescriptorType</td>
<td>1</td>
<td>下级描述符的类型</td>
</tr>
<tr>
<td>7</td>
<td>bDescriptorLength</td>
<td>2</td>
<td>下级描述符的长度</td>
</tr>
<tr>
<td>9</td>
<td>bDescriptorType</td>
<td>1</td>
<td>下级描述符的类型 (可选)</td>
</tr>
<tr>
<td>10</td>
<td>bDescriptorLength</td>
<td>2</td>
<td>下级描述符的长度 (可选)</td>
</tr>
<tr>
<td>12</td>
<td>...</td>
<td>1</td>
<td>... 可选</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>bLength</strong>
大小为1字节，是该描述符的总长度。它的大小与该描述符中下级描述符的个数有关。例如，只有一个下级描述符时，总长度为
1+1+2+1+1+1+2 = 9 字节。</li>
<li><strong>bDescriptorType</strong>
大小为1字节，是该描述符的编号。HID描述符的编号为0x21。</li>
<li><strong>bedHID</strong>
大小为2字节，是该设备所使用的HID协议的版本号。这里使用的HID协议是USB
HID1.1协议，因此这里为0x0110。</li>
<li><strong>bCountyCode</strong>
大小为1字节，是设备所适用的国家。通常我们的键盘是美式键盘，代码为33，即0x21。</li>
<li><strong>bNumDescriptors</strong>
大小为1字节，是下级描述符的数量。该值至少为1，即至少要有一个报告描述符。下级描述符可以是报告描述符或物理描述符。</li>
<li><strong>bDescriptorType</strong>
大小为l字节，是下级描述符的类型。报告描述符的编号为0x22，物理描述符编号为0x23。</li>
<li><strong>bDescriptorLength</strong>
大小为2字节，是下级描述符的长度。当有多个下级描述符时，bDescritpor
Type和bDescriptorLength交替重复下去。</li>
</ul>
<h3 id="配置描述符集合的实现以及返回">6.
配置描述符集合的实现以及返回</h3>
<p>通过前面的分析知道了配置描述符集合的结构，接下来就要用代码来实现一个配置描述符集合，并在主机的获取配置描述符请求中返回。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 报告描述符暂时空着</span></span><br><span class="line"><span class="type">uint8_t</span> report_descriptor[] = {</span><br><span class="line">    <span class="number">0x00</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> configuration_descriptor[<span class="number">9</span> + <span class="number">9</span> + <span class="number">9</span> + <span class="number">7</span>] = {</span><br><span class="line">    <span class="comment">/*************** 配置描述符 *********************/</span></span><br><span class="line">    <span class="number">0x09</span>,         <span class="comment">// bLength              配置描述符的长度为 9</span></span><br><span class="line">    <span class="number">0x02</span>,         <span class="comment">// bDescriptorType      配置描述符编号为 0x02</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// wTotalLength 配置描述符集合的总长度, 包括配置描述符本身, 接口描述符、类描述符、端点描述符等</span></span><br><span class="line">    <span class="keyword">sizeof</span>(configuration_descriptor) &amp; <span class="number">0xff</span>,</span><br><span class="line">    (<span class="keyword">sizeof</span>(configuration_descriptor) &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>,</span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">// bNumInterfaces       该配置包含的接口数, 这里只有一个接口</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">// bConfigurationValue  该配置的值, 作为配置的标识</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">// iConfiguration       该配置的字符串索引, 这里没有, 故为0</span></span><br><span class="line">    <span class="number">0x80</span>,         <span class="comment">// bmAttributes         该设备的属性, 这里0x80为: 总线供电, 禁止唤醒功能</span></span><br><span class="line">    <span class="number">0x32</span>,         <span class="comment">// bMaxPower            设备所需要的电流 (单位 2mA), 这里为 0x32 (50) 即 100mA</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*************** 接口描述符 *********************/</span></span><br><span class="line">    <span class="number">0x09</span>,         <span class="comment">// bLength              接口描述符长度为 9 字节</span></span><br><span class="line">    <span class="number">0x04</span>,         <span class="comment">// bDescriptorType      接口描述符的编号为 0x04</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">// blnterfaceNumber     该接口描述符的编号，第一个接口编号为 0</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">// bAlternateSetting    该接口的备用编号为 0</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">// bNumEndpoints        该接口非 0 端点的数目. 由于USB鼠标只需一个中断输入端点, 故为1</span></span><br><span class="line">    <span class="number">0x03</span>,         <span class="comment">// bInterfaceClass      该接口所使用的类, USB鼠标是HID类, 编码为 0x03</span></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">// bInterfaceSubClass   该接口所使用的子类, 0x01 支持BIOS引导启动的子类</span></span><br><span class="line">    <span class="number">0x02</span>,         <span class="comment">// bInterfaceProtocol   该接口所使用的协议, 若子类为 0x01, 则协议可选键盘(0x01)或鼠标(0x02)</span></span><br><span class="line">    <span class="number">0x00</span>,         <span class="comment">// iInterface           该接口的字符串的索引，这里没有, 故为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*************** HID 描述符 *********************/</span></span><br><span class="line">    <span class="number">0x09</span>,         <span class="comment">// bLength              该 HID 描述符下只有一个下级描述符, 故长度为 9 字节</span></span><br><span class="line">    <span class="number">0x21</span>,         <span class="comment">// bDescriptorType      HID 描述符的编号为 0x21</span></span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x01</span>,   <span class="comment">// bcdHID               该 HID 使用的协议版本, 这里为 0x0110 (HID1.1)</span></span><br><span class="line">    <span class="number">0x21</span>,         <span class="comment">// bCountyCode          该 HID 适用的国家代码, 这里为 0x21 (美国)</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0x01</span>,         <span class="comment">// bNumDescriptors      该 HID 下级描述符的数量, 这里只有一个报告描述符, 故为 1</span></span><br><span class="line">    <span class="number">0x22</span>,         <span class="comment">// bDescriptorType      该 HID 下级描述符的类型, 这里为 0x22 (报告描述符)</span></span><br><span class="line">    <span class="comment">// bDescriptorLength 该 HID 下级描述符的长度</span></span><br><span class="line">    <span class="keyword">sizeof</span>(report_descriptor) &amp; <span class="number">0xff</span>,</span><br><span class="line">    (<span class="keyword">sizeof</span>(report_descriptor) &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*************** 端点描述符 *********************/</span></span><br><span class="line">    <span class="number">0x07</span>,         <span class="comment">// bLength              端点描述符长度为 7 字节</span></span><br><span class="line">    <span class="number">0x05</span>,         <span class="comment">// bDescriptorType      端点描述符编号为 0x05</span></span><br><span class="line">    <span class="number">0x81</span>,         <span class="comment">// bEndpointAddress     该端点的地址, 这里为 0x81 (D7 为 1 表示输入, D[3:0] 为 1 表示地址)</span></span><br><span class="line">    <span class="number">0x03</span>,         <span class="comment">// bmAttributes         该端点的属性, 这里为 0x03 (D[1:0] 为 11B 表示中断传输, 其他位保留为 0)</span></span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x00</span>    <span class="comment">// wMaxPackeSize        该端点的最大包长, 这里为 0x0010 (16 字节)</span></span><br><span class="line">    <span class="number">0x0A</span>          <span class="comment">// bInterval            该端点查询的时间, 这里设为 0x0A (10个帧时间, 即 10ms)</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>然后在获取描述符请求中增加对配置描述符返回的代码即可,
修改端点0输出中断处理函数中获取配置描述符的代码如下:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取配置描述符</span></span><br><span class="line"><span class="keyword">case</span> CONFIGURATION_DESCRIPTOR:</span><br><span class="line">    p_send_data = configuration_descriptor;</span><br><span class="line">    send_length = configuration_descriptor[<span class="number">3</span>] * <span class="number">256</span> + configuration_descriptor[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>到此完成配置描述符集合的返回. 不过报告描述符还没有实现,
但在次之前先来看看字符串描述符.</p>
<p>主机可能会在获取 9 字节的配置描述符后,
先获取设备描述符中的字符串描述符索引，而我们还也没有实现该部分。 ### 7.
字符串及语言ID请求的实现</p>
<p>在USB协议中，字符串描述符是可选的。当某个描述符中的字符串索引值为非0时，就表示它具有那个字符串描述符，注意索引值不能重复。</p>
<p>上文在设备描述符中，申请了3个非0的索引值，分别是厂商字符串、产品字符串以及产品序列号；其索引值分别为1,2,3.</p>
<p>USB主机使用获取字符串描述符和索引值来获取对应的字符串。当索引值为0时，表示获取语言ID。语言ID是一个描述该设备支持的语言种类的数组，每个ID号占2字节。</p>
<p>字符串描述符的结构如下:</p>
<table>
<thead>
<tr>
<th style="text-align: center;">偏移</th>
<th>域</th>
<th style="text-align: center;">大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">0</td>
<td>bLength</td>
<td style="text-align: center;">1</td>
<td>该描述符的长度</td>
</tr>
<tr>
<td style="text-align: center;">1</td>
<td>bDescriptorType</td>
<td style="text-align: center;">1</td>
<td>描述符的类型 (字符串为 0x03)</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td>bString</td>
<td style="text-align: center;">N</td>
<td>Unicode 编码的字符串</td>
</tr>
</tbody>
</table>
<p>语言 ID 描述符的结构如下:</p>
<table>
<thead>
<tr>
<th style="text-align: center;">偏移</th>
<th>域</th>
<th style="text-align: center;">大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;">0</td>
<td>bLength</td>
<td style="text-align: center;">1</td>
<td>该描述符的长度</td>
</tr>
<tr>
<td style="text-align: center;">1</td>
<td>bDescriptorType</td>
<td style="text-align: center;">1</td>
<td>描述符的类型 (字符串为 0x03)</td>
</tr>
<tr>
<td style="text-align: center;">2</td>
<td>wLANGID[0]</td>
<td style="text-align: center;">2</td>
<td>语言 ID 号 0</td>
</tr>
<tr>
<td style="text-align: center;">...</td>
<td>...</td>
<td style="text-align: center;">...</td>
<td>...</td>
</tr>
<tr>
<td style="text-align: center;">2 * n + 2</td>
<td>wLANGID[n]</td>
<td style="text-align: center;">2</td>
<td>语言 ID 号 n</td>
</tr>
</tbody>
</table>
<p>语言ID，这里只使用美式英语一种，即0x0409.不同国家地区的语言ID号，可以查看USB_LANGIDs.PDF文档，可直接上http://www.usb.org下载。</p>
<p>字符串描述符中的 bString 字段是使用 Unicode.</p>
<p>下面是语言 ID、厂商字符串、产品字符串以及产品序列号的定义:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">uint8_t</span> language_id[<span class="number">4</span>] = {</span><br><span class="line">     <span class="comment">/*************** 语言 ID 描述符 *********************/</span></span><br><span class="line">    <span class="number">0x04</span>,         <span class="comment">// bLength              该语言 ID 描述符长度为 4 字节</span></span><br><span class="line">    <span class="number">0x03</span>,         <span class="comment">// bDescriptorType      语言 ID 描述符和字符串描述符编号为 0x03</span></span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x04</span>    <span class="comment">// wLANGID              该语言 ID 号, 0x0409 (美式英语)</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> manufacturer_string <span class="string">"测试厂商字符串描述符"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> product_string <span class="string">"测试产品字符串描述符"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> serial_number_string <span class="string">"测试V1.0"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> manufacturer_string_descriptor[<span class="number">2</span> + <span class="keyword">sizeof</span>(manufacturer_string) - <span class="number">1</span>] = {</span><br><span class="line">     <span class="comment">/*************** 制造商字符串描述符 *********************/</span></span><br><span class="line">    <span class="number">2</span> + <span class="keyword">sizeof</span>(manufacturer_string) - <span class="number">1</span>,   <span class="comment">// bLength          该字符串描述符的长度</span></span><br><span class="line">    <span class="number">0x03</span>,                                  <span class="comment">// bDescriptorType  字符串描述符编号为 0x03</span></span><br><span class="line">    <span class="comment">// ... 这里实际的字符串先空着不写, 等需要上传时再拷贝进来, 其他部分同理</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> product_string_descriptor[<span class="number">2</span> + <span class="keyword">sizeof</span>(product_string) - <span class="number">1</span>] = {</span><br><span class="line">     <span class="comment">/*************** 产品字符串描述符 *********************/</span></span><br><span class="line">    <span class="number">2</span> + <span class="keyword">sizeof</span>(product_string) - <span class="number">1</span>,       </span><br><span class="line">    <span class="number">0x03</span>,</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> serial_number_string_descriptor[<span class="number">2</span> + <span class="keyword">sizeof</span>(serial_number_string) - <span class="number">1</span>] = {</span><br><span class="line">     <span class="comment">/*************** 产品序列号字符串描述符 *********************/</span></span><br><span class="line">    <span class="number">2</span> + <span class="keyword">sizeof</span>(serial_number_string) - <span class="number">1</span>,</span><br><span class="line">    <span class="number">0x03</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>在获取描述符请求中增加对字符串描述符的返回:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 获取字符串描述符</span></span><br><span class="line"><span class="keyword">case</span> STRING_DESCRIPTOR:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 wValue 的低字节, 检查字符串描述符类型</span></span><br><span class="line">    <span class="keyword">switch</span> (wValue &amp; <span class="number">0xff</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 获取语言 ID</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        p_send_data = language_id;</span><br><span class="line">        send_length = language_id[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 厂商字符串索引值设为1, 所以这里为厂商字符串</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        p_send_data = manufacturer_string_descriptor;</span><br><span class="line">        send_length = manufacturer_string_descriptor[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(manufacturer_string_descriptor + <span class="number">2</span>, manufacturer_string, send_length);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 产品字符串索引值设为2, 所以这里为产品字符串</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        p_send_data = product_string_descriptor;</span><br><span class="line">        send_length = product_string_descriptor[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(product_string_descriptor + <span class="number">2</span>, product_string, send_length);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 产品序列号字符串索引值设为3, 所以这里为产品序列号字符串</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        p_send_data = serial_number_string_descriptor;</span><br><span class="line">        send_length = serial_number_string_descriptor[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">memcpy</span>(serial_number_string_descriptor + <span class="number">2</span>, serial_number_string, send_length);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未知索引值</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        send_length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>主机获取字符串描述符后就会去获取之前实现的配置描述符集合,
然后会发出一个标准的设置配置请求，因此接下来是对设置配置请求的实现。</p>
<h3 id="设置配置请求的实现">8. 设置配置请求的实现</h3>
<p>设置配置请求的实现比较简单，它是一个输出请求，只要根据所请求的配置值，使能相应的端点即可。</p>
<p>由于我们的鼠标只有一个配置，所以连配置值都可以忽略，直接使能端点，然后返回一个0长度的状态数据包即可。</p>
<blockquote>
<p>注意，只有收到非0的配置值之后才可以使能非0端点，否则要禁用非0端点。</p>
</blockquote>
<p>实现标准请求处理中的设置配置请求:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> SET_CONFIGURATION:</span><br><span class="line">    <span class="comment">// 使能端点 1</span></span><br><span class="line">    USB_ENABLE_ENDP(ENDP1);</span><br><span class="line">    <span class="comment">// 发送空包</span></span><br><span class="line">    send_length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="报告描述符的实现">9. 报告描述符的实现</h3>
<p>USB
HID设备是通过报告（report）来传送数据的，报告有输入报告和输出报告。</p>
<p>输入报告是USB设备发送给主机的，例如：USB鼠标将鼠标移动和鼠标点击等信息返回给计算机，键盘将按键数据返回给计算机等。</p>
<p>输出报告是主机发送给USB设备的，例如：键盘上的数字键盘锁定灯和大写字母锁定灯的控制等。</p>
<p>报告里面包含的是所要传送的数据，数量为整数字节，被划分成一个个域。通常，输入报告是通过中断输入端点返回的，而输出报告有点区别，当没有中断输出端点时，可以通过控制输出端点0发送，当有中断输出端点时，通过中断输出端点发出。</p>
<p>当然，不管设备是否具有中断输出端点（中断输入端点是必须要的），主机都可以通过获取报告和设置报告的请求从端点0来获取或者发送报告。</p>
<p>而报告描述符（report
descriptor），是用来描述一个报告的结构以及该报告里面的数据是用来干什么用的。通过报告描述符，USB主机就可以分析出报告里面的数据所表示的意义。报告描述符与普通描述符一样，都是通过控制输入端点0来返回，主机使用获取报告描述符请求来获取报告描述符，注意这个请求是<strong>发送到接口的，而不是到设备</strong>。</p>
<p>一个报告描述符可以描述多个报告，不同的报告通过报告ID来识别。报告ID放在报告的最前面，即第一个字节。当报告描述符中没有规定报告ID时，报告中就没有ID字段，开始就是数据。</p>
<p>报告描述符与前面所遇到的描述符结构不一样，它并没有描述符长度和描述符类型等信息，而是由一个个条目（item）组成的。通常，在写报告描述符时，一个条目占据一行。这样看起来清晰一些。
HID协议中规定了两种条目：短条日和长条目。长条日很少使用，这里不介绍，只介绍短条目的结构。</p>
<p><strong>短条目</strong>由1字节的前缀后面跟上可选的数据字节组成。可选的数据字节可以为0字节、1字节、2字节或者4字节。实际所使用的条目，大部分是只有1字节可选数据的，少数会使用0字节或2字节数据。条目的前缀结构如下:</p>
<table>
<colgroup>
<col style="width: 37%">
<col style="width: 26%">
<col style="width: 35%">
</colgroup>
<thead>
<tr>
<th>D[7:4]</th>
<th>D[3:2]</th>
<th>D[1:0]</th>
</tr>
</thead>
<tbody>
<tr>
<td>bTag</td>
<td>bType</td>
<td>bSize</td>
</tr>
<tr>
<td>表示该条目的功能</td>
<td>表示条目的类型</td>
<td>用来表示后面所跟数据的字节数</td>
</tr>
<tr>
<td>具体请参看HID协议以及HID用途表</td>
<td>0 为主条目</td>
<td></td>
</tr>
<tr>
<td></td>
<td>1 为全局（global）条目</td>
<td></td>
</tr>
<tr>
<td></td>
<td>2 为局部（local）条目</td>
<td></td>
</tr>
<tr>
<td></td>
<td>3 是保留值</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="主条目">1) 主条目</h4>
<p>总共有5个，分别为Input（输入）、Output（输出）、Feature（特性）、Collection（集合开始）和EndCollection（集合结束）。主条目用来定义或者分组报告的数据域。</p>
<p>例如，可以使用输人主条目将输人报告划分为不同的数据域，以及指定该域的属性。对于Input、Output、Feature三个主条目，后面跟的第一字节数据每个位的数据表示一种属性，例如：位0表示该数据域是变量还是常量，位1表示是数组还是单一变量，位2表示是相对值还是绝对值等。</p>
<h4 id="全局条目">2) 全局条目</h4>
<p>全局条目主要用来选择用途页，定义数据域的长度、数量、报告ID等。全局条目在出现后对接下来的所有主条目都有效，除非遇到另外一个全局条目来改变它。</p>
<p>常用的全局条目有：UsagePage（用途页）、LogicalMinimum（逻辑最小值）、Logical
Maximum（逻辑最大值）、PhysicalMinimum（物理最小值）、PhysicalMaximum（物理最大值）、ReportSize（数据域大小）、ReportCount（数据域数量）和ReportID（报告ID）。</p>
<p>其中，ReportSize用来描述某个数据域有多少个位：ReportCount用来描述这样的数据域有多少个；LogicalMinimum和LogicalMaximum用来描述数据域的取值范围。</p>
<h4 id="局部条目">3) 局部条目</h4>
<p>局部条目用来定义控制的特性，例如，该数据域的用途、用途最小值、用途最大值等。局部条目只在局部有效，遇到一个主条目后，它的效用就结束了。</p>
<p>常用的局部条目有：Usage（用途）、UsageMinimum（用途最小值）和UsageeMaximum（用途最大值）。</p>
<p>各种条目的功能值在此就不一一列举了，大家可以对照协议来设计报告描述符，也可以使用USB官方网站提供的HID描述符工具来生成：还可以使用现成的报告描述符进行修改，例如，在HID协议以及用途表文档中，就有很多现成的例子。
下面给出USB鼠标报告描述符的实际代码，并在代码中增加注释来说明这个报告描述符的意义。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 报告描述符</span></span><br><span class="line"><span class="type">uint8_t</span> report_descriptor[] = {</span><br><span class="line">    <span class="comment">/* 前缀: bTag[7:4] bType[3:2] bSize[1:0] */</span></span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x01</span>,             <span class="comment">// 全局条目, bTag = 0x0 (UsagePage), 0x01 (Generic Desktop)</span></span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x02</span>,             <span class="comment">// 局部条目, Usage (Mouse)</span></span><br><span class="line">    <span class="number">0xa1</span>, <span class="number">0x01</span>,             <span class="comment">// 主条目  , Collection (Application), 说明应用集合开始</span></span><br><span class="line">        <span class="number">0x09</span>, <span class="number">0x01</span>,         <span class="comment">// 局部条目, Usage (Pointer) 说明用途为指针集合</span></span><br><span class="line">        <span class="number">0xa1</span>, <span class="number">0x00</span>,         <span class="comment">// 主条目  , Collection (Physical) 说明物理集合开始</span></span><br><span class="line">            <span class="number">0x05</span>, <span class="number">0x09</span>,     <span class="comment">// 局部条目, UsagePage (Button) 说明用途页为按键</span></span><br><span class="line">            <span class="number">0x19</span>, <span class="number">0x01</span>,     <span class="comment">// 局部条目, UsageMinium (Button 1 鼠标左键)</span></span><br><span class="line">            <span class="number">0x29</span>, <span class="number">0x03</span>,     <span class="comment">// 局部条目, UsageMaxium (Button 3 鼠标中键)</span></span><br><span class="line">            <span class="number">0x15</span>, <span class="number">0x00</span>,     <span class="comment">// 全局条目, LogicMinium (0)</span></span><br><span class="line">            <span class="number">0x25</span>, <span class="number">0x01</span>,     <span class="comment">// 全局条目, LogicMaxium (1)</span></span><br><span class="line">            <span class="number">0x95</span>, <span class="number">0x03</span>,     <span class="comment">// 全局条目, ReportCount (3)</span></span><br><span class="line">            <span class="number">0x75</span>, <span class="number">0x01</span>,     <span class="comment">// 全局条目, ReportSize (1)</span></span><br><span class="line"></span><br><span class="line">            <span class="number">0x81</span>, <span class="number">0x02</span>,     <span class="comment">// 主条目  , Input (Data, Var, Abs)</span></span><br><span class="line">            <span class="number">0x95</span>, <span class="number">0x01</span>,     <span class="comment">// 全局条目, ReportCount (1)</span></span><br><span class="line">            <span class="number">0x75</span>, <span class="number">0x05</span>,     <span class="comment">// 全局条目, ReportSize (5)</span></span><br><span class="line">            <span class="number">0x81</span>, <span class="number">0x03</span>,     <span class="comment">// 主条目  , Input (cnst, Var, Abs)</span></span><br><span class="line">            <span class="number">0x05</span>, <span class="number">0x01</span>,     <span class="comment">// 全局条目, UsagePage (Generic Desktop)</span></span><br><span class="line">            <span class="number">0x09</span>, <span class="number">0x30</span>,     <span class="comment">// 局部条目, Usage(X)</span></span><br><span class="line">            <span class="number">0x09</span>, <span class="number">0x31</span>,     <span class="comment">// 局部条目, Usage(Y)</span></span><br><span class="line">            <span class="number">0x09</span>, <span class="number">0x38</span>,     <span class="comment">// 局部条目, Usage(Wheel)</span></span><br><span class="line">            <span class="number">0x15</span>, <span class="number">0x81</span>,     <span class="comment">// 全局条目, LogicMinium (-127)</span></span><br><span class="line">            <span class="number">0x25</span>, <span class="number">0x7f</span>,     <span class="comment">// 全局条目, LogicMaxium (127)</span></span><br><span class="line">            <span class="number">0x75</span>, <span class="number">0x08</span>,     <span class="comment">// 全局条目, ReportSize (8)</span></span><br><span class="line">            <span class="number">0x95</span>, <span class="number">0x03</span>,     <span class="comment">// 全局条目  , ReportCount (3)</span></span><br><span class="line">            <span class="number">0x81</span>, <span class="number">0x06</span>,     <span class="comment">// 主条目, Input (Data, Var, Rel)</span></span><br><span class="line">        <span class="number">0xc0</span>,               <span class="comment">// CollectionEnd</span></span><br><span class="line">    <span class="number">0xc0</span>                    <span class="comment">// CollectionEnd</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>通过上面的报告描述符的定义可知，返回的输入报告具有4字节。</p>
<ul>
<li>第一字节的低3位用来表示按键是否按下，高5位为常数0，无用；</li>
<li>第二字节表示X轴的改变量；</li>
<li>第三字节表示Y轴的改变量；</li>
<li>第四字节表示滚轮的改变量。</li>
</ul>
<p>在中断输入端点1中应该要按照上面的格式返回实际的鼠标数据。</p>
<p>在描述符获取请求中添加报告描述符的请求:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> REPORT_DESCRIPTOR:</span><br><span class="line">    p_send_data = report_descriptor;</span><br><span class="line">    send_length = <span class="keyword">sizeof</span>(report_descriptor);</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>至此, HID 设备才算枚举成功.
之后主机应该就会一直在查询端点1，以读取鼠标返回的报告，下面就对 HID
类的相关请求进行实现。</p>
<h3 id="hid-类请求的实现">11. HID 类请求的实现</h3>
<p>在 HID 协议文档中, 定义了一些类请求, 例如 SET_IDLE, GET_IDLE,
GET_REPORT, SET_REPORT 等，下面是对这些请求的实现.</p>
<p>bmRequestType 中的 D[6:5] 为 01B 时即为类请求.</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 类请求</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bmRequestType &amp; <span class="number">0x60</span> == <span class="number">0x20</span>) </span><br><span class="line">{</span><br><span class="line">    <span class="keyword">switch</span>(bRequest)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">// 设置空闲请求</span></span><br><span class="line">        <span class="keyword">case</span> SET_IDLE:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取报告描述符请求</span></span><br><span class="line">        <span class="keyword">case</span> GET_REPORT:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理更多 HID 类请求 ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未定义的 HID 类请求</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="set_idle">1) SET_IDLE</h4>
<p>SET_IDLE 的编码为 0x0A,
这个请求告诉设备，在没有新的事件发生时，不要从中断端点返回数据。对于我们的USB鼠标来说，收到这个请求可以什么都不用干，直接返回一个0长度的状态数据包即可。修改端点0输出中断函数中的类输出请求部分代码如下：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 设置空闲请求</span></span><br><span class="line"><span class="keyword">case</span> SET_IDLE:</span><br><span class="line">    <span class="comment">// 发送空包</span></span><br><span class="line">    send_length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="报告的返回">12. 报告的返回</h3>
<p>通过前面报告描述符的定义知道要返回4字节的报告数据。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 端点1输入中断处理</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">usb_end1_in</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 接收过配置请求</span></span><br><span class="line">    <span class="keyword">if</span>(config_value == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 获取鼠标当前状态</span></span><br><span class="line">    <span class="comment">// buf[0] 的 D0 就是左键, D1 就是右键, D2 就是中键</span></span><br><span class="line">    <span class="comment">// buf[1] 为X轴, buf[2] 为Y轴, buf[3] 为滚轮</span></span><br><span class="line">    get_mouse_status(buf);</span><br><span class="line">    <span class="comment">// 发送鼠标状态</span></span><br><span class="line">    USB_WRITE_ENDP_BUF(ENDP0, buf, <span class="number">4</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>至此, 这个 USB 实例就算完成了. 但还有很多请求没有实现, 如 GET_REPORT
等, 这可在后续自行完善.</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Learn/BookToLearn/圈圈教你玩USB/03USB鼠标的实现/03USB鼠标的实现.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Book</category>
        <category>圈圈教你玩USB</category>
      </categories>
      <tags>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>My Shell Tools</title>
    <url>/2023/01/30/auto/39/myshelltools/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍一些自己常用的作为工具的shell <span id="more"></span></p>
<p>首先为了方便使用 shell, 在 home 中创建一个文件夹 .myshell,
里面有各种工具脚本, 然后在 .bashrc 中创建一个扫描函数,
对自己的工具脚本文件进行 source.</p>
<p>在 .bashrc 中添加 </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">for file in $(find ~/.myshell/ -type f -name "*.sh"); do</span><br><span class="line">    head_title=$(head -n 1 $file)</span><br><span class="line">    if [ "$head_title" == "# [source]" ]; then</span><br><span class="line">        source $file</span><br><span class="line">done</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>在 ~/.myshell/demo.sh</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[<span class="built_in">source</span>]</span></span><br><span class="line"></span><br><span class="line">function print_something</span><br><span class="line">{</span><br><span class="line">    echo "$1"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>[source] 表示希望该文本自动导出</p>
<h3 id="一些-functions">一些 functions</h3>
<ul>
<li>show_path 编译时有时候 gcc 给出错误的路径不是完整的, 导致 VSCode
无法直接获取对应的字符,
这时通过管道，将编译器的输出给脚本，对报错行添加路径前缀即可
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">function show_path</span><br><span class="line">{</span><br><span class="line">    if [ "$1" ]; then</span><br><span class="line">        prefix=$(echo $(pwd -W)/$1 | sed 's/\//\\\\/g')</span><br><span class="line">    else</span><br><span class="line">        prefix=$(echo $(pwd -W) | sed 's/\//\\\\/g')</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    while read line; do</span><br><span class="line">        echo "$line" |  sed 's/\(.*.c:[0-9]*:[0-9]*\):/'$prefix'\/\1/g'</span><br><span class="line">    done</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Linux/Shell/myshelltools.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 串口的使用</title>
    <url>/2023/02/16/auto/4/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 STM32 中串口的使用 <span id="more"></span></p>
<p>串口是嵌入式中调试的好工具, 一般来说最先解决的应当是串口,
只有串口调好了, 后面的开发和单元测试写起来才舒服.</p>
<p>处理串口的一个比较经典的做法是采用
<code>DMA + 中断 + 环形缓冲区</code> 的形式,
环形缓冲区有一个读指针和一个写指针.</p>
<p>两个指针保证了缓冲区的数据读写操作是安全的,
即使在读的过程中触发了数据接收中断使程序进入写操作也不会影响到读指针.
下面是一个通用的实现代码示例:</p>
<p>uart_com.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"uart_com.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"lwrb.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_COM_MAX (sizeof(uart_coms) / sizeof(uart_com_dma_t))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将 UART 绑定到标准输入输出 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UART_BIND_STDIO &amp;huart1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">lwrb_t</span> rb;                 <span class="comment">/* 环形缓冲器 */</span></span><br><span class="line">    <span class="type">uint8_t</span> rbbuf[<span class="number">4096</span>];       <span class="comment">/* 环形缓冲器的 buffer */</span></span><br><span class="line">    <span class="type">uint8_t</span> dma_rxbuf[<span class="number">256</span>];    <span class="comment">/* DMA 接收 buffer */</span></span><br><span class="line">    <span class="type">uint8_t</span> dma_txbuf[<span class="number">4096</span>];   <span class="comment">/* DMA 发送 buffer */</span></span><br><span class="line">    <span class="type">size_t</span> old_pos;            <span class="comment">/* 保存 DMA 数据旧的位置信息 */</span></span><br><span class="line">    UART_HandleTypeDef *huart; <span class="comment">/* HAL 库串口句柄 */</span></span><br><span class="line">    <span class="type">uint8_t</span> dma_tx_ready;      <span class="comment">/* 用于检测串口是否可以发送数据 */</span></span><br><span class="line">} <span class="type">uart_com_dma_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 定义 uart_com 数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @note 对于新增的串口, 比如 huart2</span></span><br><span class="line"><span class="comment"> *      只需往表中添加 { .huart = &amp;huart2 } 即可，</span></span><br><span class="line"><span class="comment"> *      然后就可以使用 uart_write 和 uart_read_from_rb 进行通信了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uart_com_dma_t</span> uart_coms[] = {</span><br><span class="line">    {.huart = &amp;huart1}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uart_com_dma_t</span> *<span class="title function_">get_uart_com</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; UART_COM_MAX; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (uart_coms[i].huart == huart)</span><br><span class="line">            <span class="keyword">return</span> uart_coms + i;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收处理 */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">uart_rx_check</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uart_com_dma_t</span> *c = get_uart_com(huart);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 计算当前存储位置 */</span></span><br><span class="line">    <span class="type">size_t</span> pos = <span class="keyword">sizeof</span>(c-&gt;dma_rxbuf) - __HAL_DMA_GET_COUNTER(huart-&gt;hdmarx);</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; c-&gt;old_pos)</span><br><span class="line">    {</span><br><span class="line">        lwrb_write(&amp;(c-&gt;rb), c-&gt;dma_rxbuf + c-&gt;old_pos, pos - c-&gt;old_pos);</span><br><span class="line">        c-&gt;old_pos = pos;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; c-&gt;old_pos)</span><br><span class="line">    {</span><br><span class="line">        lwrb_write(&amp;(c-&gt;rb), c-&gt;dma_rxbuf + c-&gt;old_pos, <span class="keyword">sizeof</span>(c-&gt;dma_rxbuf) - c-&gt;old_pos);</span><br><span class="line">        <span class="keyword">if</span> (pos &gt; <span class="number">0</span>)</span><br><span class="line">            lwrb_write(&amp;(c-&gt;rb), c-&gt;dma_rxbuf, pos);</span><br><span class="line">        c-&gt;old_pos = pos;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 串口初始化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 该函数将所有声明在数组里的 uart_com 进行初始化,</span></span><br><span class="line"><span class="comment"> * 所有串口都初始化为:</span></span><br><span class="line"><span class="comment"> *      1. 已经准备好发送了</span></span><br><span class="line"><span class="comment"> *      2. 开 IDLE 中断</span></span><br><span class="line"><span class="comment"> *      2. 开始 DMA 循坏接收</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 循环接收的数据将通过中断自动写入环形缓冲区里面</span></span><br><span class="line"><span class="comment"> * 可通过 uart_read_from_rb 获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">uart_com_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; UART_COM_MAX; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">uart_com_dma_t</span> *c = uart_coms + i;</span><br><span class="line">        c-&gt;dma_tx_ready = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        lwrb_init(&amp;(c-&gt;rb), c-&gt;rbbuf, <span class="keyword">sizeof</span>(c-&gt;rbbuf));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 启动 IDLE 中断 */</span></span><br><span class="line">        __HAL_UART_ENABLE_IT(c-&gt;huart, UART_IT_IDLE);</span><br><span class="line">        __HAL_UART_CLEAR_IDLEFLAG(c-&gt;huart);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 开始 UART DMA 接收 */</span></span><br><span class="line">        HAL_UART_Receive_DMA(c-&gt;huart, c-&gt;dma_rxbuf, <span class="keyword">sizeof</span>(c-&gt;dma_rxbuf));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 将数据写入到串口, 阻塞调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param huart 要写入的串口</span></span><br><span class="line"><span class="comment"> * @param dat 数据内容</span></span><br><span class="line"><span class="comment"> * @param len 数据长度</span></span><br><span class="line"><span class="comment"> * @param timeout 超时时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return 实际写入的数量, 若 &lt;= 0 则写入失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">uart_write</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">const</span> <span class="type">void</span> *dat, <span class="type">size_t</span> len, <span class="type">int</span> timeout)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uart_com_dma_t</span> *c = get_uart_com(huart);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span> || len &gt; <span class="keyword">sizeof</span>(c-&gt;dma_txbuf))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> tick = HAL_GetTick();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待上一次发送完成 */</span></span><br><span class="line">    <span class="keyword">while</span> (c-&gt;dma_tx_ready == <span class="number">0</span> &amp;&amp; (HAL_GetTick() - tick) &lt; timeout)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (c-&gt;dma_tx_ready)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> min = len &gt; <span class="keyword">sizeof</span>(c-&gt;dma_txbuf) ? <span class="keyword">sizeof</span>(c-&gt;dma_txbuf) : len;</span><br><span class="line">        <span class="built_in">memcpy</span>(c-&gt;dma_txbuf, dat, min);</span><br><span class="line">        HAL_UART_Transmit_DMA(c-&gt;huart, c-&gt;dma_txbuf, min);</span><br><span class="line">        c-&gt;dma_tx_ready = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 等待超时 */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 从串口缓冲区读取数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param huart 要读取的串口</span></span><br><span class="line"><span class="comment"> * @param dat 读取的数据</span></span><br><span class="line"><span class="comment"> * @param len 期望读取数据的数量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @return 实际读取的数据数量, 若 &lt;= 0 则读取失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">uart_read_from_rb</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint8_t</span> *dat, <span class="type">size_t</span> len)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uart_com_dma_t</span> *c = get_uart_com(huart);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lwrb_read(&amp;(c-&gt;rb), dat, len);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------- 处理串口中断 -------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 发送完成中断 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_TxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uart_com_dma_t</span> *c = get_uart_com(huart);</span><br><span class="line">    <span class="keyword">if</span> (c)</span><br><span class="line">        c-&gt;dma_tx_ready = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收半满中断 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxHalfCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">{</span><br><span class="line">    uart_rx_check(huart);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 接收完成中断 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">{</span><br><span class="line">    uart_rx_check(huart);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* IDLE 中断, 需放到 USARTx_IRQHandler 中断入口函数中执行 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_IDLE_Callback</span><span class="params">(UART_HandleTypeDef *huart)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) != RESET)</span><br><span class="line">    {</span><br><span class="line">        uart_rx_check(huart);</span><br><span class="line">        __HAL_UART_CLEAR_IDLEFLAG(huart);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------- 将串口绑定到标准输入输出 -------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> UART_BIND_STDIO</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *fd)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint8_t</span> dat = ch;</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="built_in">stdout</span>)</span><br><span class="line">        HAL_UART_Transmit(UART_BIND_STDIO, &amp;dat, <span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *fd)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">uint8_t</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (fd == <span class="built_in">stdin</span> &amp;&amp; uart_read_from_rb(UART_BIND_STDIO, &amp;ch, <span class="number">1</span>) &lt;= <span class="number">0</span>)</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ch;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果不是使用 MicroLib 则需告知编译器不使用半主机模式</span></span><br><span class="line"><span class="comment"> * 以避免编译器默认使用半主机模式, 导致程序卡在初始化阶段无法退出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MICROLIB</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __ARMCC_VERSION &gt;= 6000000</span></span><br><span class="line">__asm(<span class="string">".global __use_no_semihosting"</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> __ARMCC_VERSION &gt;= 5000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> import(__use_no_semihosting)</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> <span class="string">"Unsupported compiler"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用标准库但不使用半主机模式, 就需要自己实现一些标准库所依赖的系统函数 */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rt_misc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rt_sys.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> __stdin_name[] = <span class="string">":tt"</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> __stdout_name[] = <span class="string">":tt"</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> __stderr_name[] = <span class="string">":tt"</span>;</span><br><span class="line"></span><br><span class="line">FILEHANDLE _sys_open(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">int</span> openmode)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _sys_close(FILEHANDLE fh)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *_sys_command_string(<span class="type">char</span> *cmd, <span class="type">int</span> len)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _sys_write(FILEHANDLE fh, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">unsigned</span> len, <span class="type">int</span> mode)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _sys_read(FILEHANDLE fh, <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">unsigned</span> len, <span class="type">int</span> mode)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _ttywrch(<span class="type">int</span> ch)</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _sys_istty(FILEHANDLE fh)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _sys_seek(FILEHANDLE fh, <span class="type">long</span> pos)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> _sys_flen(FILEHANDLE fh)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _sys_exit(<span class="type">int</span> return_code)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        ;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> <span class="title function_">clock</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">clock_t</span> tmp;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _clock_init(<span class="type">void</span>)</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span> *timer)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">time_t</span> tmp;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">system</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *<span class="built_in">string</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">getenv</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _getenv_init(<span class="type">void</span>)</span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __MICROLIB */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>我们在程序中使能了空闲 (IDLE) 中断,
目的让串口能够在接收到任意字符后立刻做出反应.</p>
<p>因为如果不使用空闲中断, 那么程序将一直等到 DMA 接收半满或全满才响应,
这样的话如果用户只发几个字符, 我们的程序将无法及时处理.</p>
<p>通过将串口绑定到标准输入输出后, 我们可以直接使用 stdio 的 scanf 和
printf 来进行输入输出: </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"uart_com.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    uart_com_init();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> aa;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;aa);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Your input is: %d\n"</span>, aa);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>裸机情况下, 结合 test_command 也可以实现简单的串口 shell
</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test_command_handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> input_string[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> ofs;</span><br><span class="line">    <span class="type">uint8_t</span> ch;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 若有数据则一次性处理完 */</span></span><br><span class="line">    <span class="keyword">while</span> (uart_read_from_rb(&amp;huart1, &amp;ch, <span class="number">1</span>) &gt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(ch != <span class="string">'\n'</span>)</span><br><span class="line">        {</span><br><span class="line">            input_string[ofs++] = ch;</span><br><span class="line">            <span class="keyword">if</span>(ofs &gt;= <span class="keyword">sizeof</span>(input_string) - <span class="number">1</span>)</span><br><span class="line">                ofs = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        input_string[ofs] = <span class="string">'\0'</span>;</span><br><span class="line">        test_command(input_string);</span><br><span class="line">        ofs = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n#sh "</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">app_main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    uart_com_init();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n#sh "</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        test_command_handler();</span><br><span class="line"></span><br><span class="line">        HAL_Delay(<span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="移植技巧-cubemx">移植技巧 (Cubemx)</h3>
<p>要使用上面的串口驱动, 可在 Cubemx 中选中相应的串口, 比如 USART1</p>
<ul>
<li>Mode 选 Asynchronous 异步通信</li>
<li>DMA Settings 添加 RX 和 TX, 注意 RX 的 DMA Mode 为 Circular,
即循环接收</li>
<li>NVIC Settings 里将 global interrupt 打勾, 这是给 IDLE 中断用的</li>
<li>将 IDLE 中断处理函数放到 USARTx_IRQHandler 中断入口函数中执行,
<strong>不要忘了</strong></li>
</ul>
<blockquote>
<p>开 MPU 全局还会影响 DMA 接收问题, 哎调了半天.</p>
</blockquote>
<p>其他默认就行了, 但是需要注意的一点是,
在最开始配置串口功能的时候要记得把 DMA 也配置了再输出工程,
因为这里面有一个坑.</p>
<p>如果是使能了串口功能但是不配置 DMA 就输出先输出工程,
到后面才去添加串口 DMA, 输出的初始化函数顺序如下:</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">MX_USART1_UART_Init();</span><br><span class="line">MX_DMA_Init();</span><br></pre></td></tr></tbody></table></figure>
<p>如果在使能串口功能的同时就把DMA 也配置了, 输出的初始化函数顺序如下:
</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">MX_DMA_Init();</span><br><span class="line">MX_USART1_UART_Init();</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>你会发现, 只有第二种情况能工作, 因为 MX_USART1_UART_Init 函数里面依赖
MX_DMA_Init 里面的 DMA handle, 第一种先初始化了串口, 而这时 DMA handle
是不可用的, 因此 DMA 功能失效, 这应该是 Cubemx 的一个 BUG,
我目前使用的版本 V6.6.0 仍有这个 BUG, 不知后面会不会更改.</p>
<p>但是, 如果你真的不小心忘记配置 DMA
就先输出工程也是可以重新设置初始化顺序的, 可在 Project Manager 下的
Advanced Settings 中重新设置顺序.</p>
<h1 id="section">2024-05-30 09:52:25</h1>
<p>需要勾选 Use MicroLib ?</p>
<h3 id="参考文献">参考文献</h3>
<p>程序中使用到了开源的环形缓冲器的实现 <a class="link" href="https://github.com/MaJerle/lwrb.git">lwrb<i class="fas fa-external-link-alt"></i></a></p>
<p>另外, 禁用半主机模式的部分参考了 <a class="link" href="https://mklimenko.github.io/english/2018/11/02/disable-semihosting/">Disable
semihosting with ARM Compiler 5/6<i class="fas fa-external-link-alt"></i></a></p>
<p>是否使用 MicroLib 的宏 <code>__MICROLIB</code> 参考了 ARM
官方源码里面的 <a class="link" href="https://github.com/ARM-software/Tool-Solutions/blob/main/docker/cmsis-models/Platforms/IPSS/ARMCM7/system_ARMCM7.c">ARM-software/Tool-Solutions<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://developer.arm.com/documentation/dui0472/k/Compiler-specific-Features/Predefined-macros">ARM官网<i class="fas fa-external-link-alt"></i></a>提供了更多
ARMCC 的内置宏</p>
<p>串口 MDA 初始化顺序问题参考了 <a class="link" href="https://blog.csdn.net/hwytree/article/details/121659787">STM32 HAL
UART DMA不通的问题解决及注意事项<i class="fas fa-external-link-alt"></i></a> 以及 <a class="link" href="https://stackoverflow.com/questions/68988109/why-does-the-sequence-of-init-calls-matter-in-stm32cubeide">Why
does the sequence of init calls matter in STM32CubeIDE?<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/Board/STM32/General/串口通信/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>STM32</category>
        <category>串口</category>
      </categories>
      <tags>
        <tag>串口</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell 小细节</title>
    <url>/2023/01/15/auto/40/Shell%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<html><head></head><body><ul>
<li><p>屏蔽命令执行的出错信息 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ls a 2&gt; /dev/null </span><br></pre></td></tr></tbody></table></figure> linux 中 0 – stdin (standard
input，标准输入) 1 – stdout (standard output，标准输出) 2 – stderr
(standard error，标准错误输出)<p></p>
<p><code>2&gt; /dev/null</code> 将标准错误输出重定向到 null 设备,
从而实现屏蔽</p></li>
<li><p>ls 的小细节 ls
在输出时会判断是在终端还是管道，若在终端中则默认不换行输出,
输出到管道或文件则换行. 可以
<code>ls -1 强制换行 ls -C 强制不换行</code></p></li>
<li><p>案例: 获取文件夹下以 x-y 格式命名的文件名列表, 列表内容为不重复的
x 名称 比如 demo 下有 a-hello, b-world, b-ok 则列表为 a b
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ls demo  | awk -F- '/.*-.*/{print $1}' | sort | uniq</span><br></pre></td></tr></tbody></table></figure><p></p>
<ol type="1">
<li>ls 列出 demo 下的所有文件或文件夹列表, 每一项一行, 输出给 awk;</li>
<li>对于输入的每一行, awk 中的先进行正则筛选 <code>.*-.*</code>
表示只匹配包含 <code>-</code> 字符的行;</li>
<li>对于符合正则筛选的行, 根据 -F 参数给的分割符 (默认空格)
进行字符串分割 (这里是 <code>-</code> );</li>
<li>awk 命令部分 <code>{print $1}</code> 表示打印第一个分割点;</li>
<li>对所有行, awk 都执行一次上述操作, 于是得到所有x-y 模式中的 x;</li>
<li>对列表进行排序 (sort) 和去重 (uniq) 便得到最终结果</li>
</ol></li>
<li><p>awk match 函数</p>
<ul>
<li>案例, 想要提取 <code>./a.out(+0x11ee) [0x5606cd0041ee]</code> 中的
<code>0x11ee</code>, 从而提取报错函数的地址. <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">awk '{match( $0, /.*\(\+(.*)\)/, a ); print( a[1] )}'</span><br></pre></td></tr></tbody></table></figure></li>
<li>首先awk 的程序部分直接执行 match 函数, 该函数接收三个参数:
要匹配的源字符串, 正则部分, 输出列表;</li>
<li>源字符串直接取输入的行 (<code>$0</code>);</li>
<li>正则部分包含在两个 <code>/</code> 之间, 该正则首先直接忽略前面字符(
<code>.*</code>) 直到匹配到第一个左括号和 + 号 (<code>\(\+</code>)
(需加反斜杠因为 <code>(</code> 和 <code>+</code> 是正则关键字);</li>
<li>然后收录之后的所有内容 (<code>(.*)</code>) 直到右括号
(<code>\)</code>) 出现;</li>
<li>就此结束, 后面不论出现什么都不管了; 于是第一个收录内容放到了 a[1]
里面, 这正是我们匹配的括号里的内容。</li>
</ul></li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Linux/Shell/Shell小细节.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell 脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用操作</title>
    <url>/2023/02/15/auto/43/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 Git 常用操作 <span id="more"></span></p>
<h1 id="git-常用操作">Git 常用操作</h1>
<h3 id="git-clone-和-git-remote">git clone 和 git remote</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin xxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加另一个远程仓库</span></span><br><span class="line">git remote add gitee_origin xxx2.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库情况</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">git push -u origin master </span><br><span class="line">git push -u gitee_origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取</span></span><br><span class="line">git pull origin master </span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-status">git status</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看忽略的文件或文件夹有哪些</span></span><br><span class="line">git status --ignored</span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-add">git add</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[+--] 强制添加某个文件或文件夹, 忽略 .gitignore 中的设置</span> </span><br><span class="line">git add --force protected/ext/SpecificFolder</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-rm">git rm</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[+++] 删除某次 add, 比如不小心 add 某个文件 又想取消掉</span></span><br><span class="line">git rm --cached xxx</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-diff">git diff</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[+++] 查看未已经更改但是未 add 的内容</span></span><br><span class="line">git diff</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[+++] 查看已经 add 到缓存的内容</span></span><br><span class="line">git diff --cached</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-log">git log</h3>
<p>log 可以显示有哪些文件更改了, 更改了多少,
但是没没法看具体的更改内容</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[+++] 查看提交信息</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[+++] 提交信息并显示具体文件修改记录</span></span><br><span class="line">git log --stat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[++-] 以表格形式显示</span></span><br><span class="line">git log --stat --graph</span><br></pre></td></tr></tbody></table></figure>
<h1 id="git-show">git show</h1>
<p>show 可用来显示具体的文件更改信息, 具体到每一行</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认显示 HEAD 的更改信息</span></span><br><span class="line">git show</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看某次 commit 的更改内容</span></span><br><span class="line">git show &lt;commit&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-submodule">git submodule</h3>
<p>submodule 允许外部存储库嵌入源代码树的专用子目录中</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将每个子项目添加到主项目</span></span><br><span class="line">git submodule add &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将项目添加到您的存储库后，您必须初始化并更新它</span></span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></tbody></table></figure>
<h3 id="本地仓库">本地仓库</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以克隆自本地的某个仓库, 比如</span></span><br><span class="line">git clone C:/Users/shino/Desktop/gogoanime</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以将远程仓库设置为本地某个地方</span></span><br><span class="line">git remote add origin C:/Users/shino/Desktop/gogoanime</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前远程仓库信息</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后就可以 pull , push</span></span><br><span class="line">git pull origin master  --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-clone">git clone</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆深度</span></span><br><span class="line">git <span class="built_in">clone</span> --depth [depth] [remote-url]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="git-filter-branch">git filter-branch</h4>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除不小心提交的文件</span></span><br><span class="line">git filter-branch --tree-filter <span class="string">'rm -rf path/to/spurious/asset/folder'</span> [commit]</span><br></pre></td></tr></tbody></table></figure>
<h1 id="常见问题">常见问题</h1>
<h3 id="home-目录更改">HOME 目录更改</h3>
<p>在提交时 git 会在当前用户的 HOME 目录下查找 .ssh 文件夹,
根据里面的内容来获取公钥和密钥，因此若出现</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">no matching host key type found. Their offer: ssh-rsa,ssh-dss</span><br></pre></td></tr></tbody></table></figure>
<p>有可能是安装其他软件时, HOME 目录被篡改成其他目录，导致 git 无法获取
.ssh 文件夹了</p>
<h3 id="合并另一个分支中的某个文件">合并另一个分支中的某个文件</h3>
<p>很多时候在另一个分支更改了, 但是不想合并全部, 可指定合并某个文件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout --patch 来源分支名称 文件路径</span><br></pre></td></tr></tbody></table></figure>
<h3 id="拉取远程分支">拉取远程分支</h3>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></tbody></table></figure>
<h3 id="暂存代码">暂存代码</h3>
<p>有时有突发工作，这时我们可先暂时存储当前代码, 转去做其他内容</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 暂存命令</span></span><br><span class="line">git stash save <span class="string">"暂存的备注"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看暂存记录</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回暂存代码</span></span><br><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回代码后删除某个缓存</span></span><br><span class="line">git stash drop stash@{0}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空全部缓存</span></span><br><span class="line">git stash clear </span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消【取消暂存代码】 (慎用)</span></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># git stash 冲突</span></span><br><span class="line">https://blog.csdn.net/jy692405180/article/details/78520251</span><br></pre></td></tr></tbody></table></figure>
<h3 id="对某个-commit-打标签">对某个 commit 打标签</h3>
<p>git tag -a v0.1.1 9fbc3d0</p>
<h3 id="对于-windows-下换行符自动转换">对于 Windows
下换行符自动转换</h3>
<p><a class="link" href="https://blog.csdn.net/Babylonxun/article/details/126598477">参考<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="修改之前提交的用户信息">修改之前提交的用户信息</h3>
<p><a class="link" href="https://zhuanlan.zhihu.com/p/455741996">参考<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="重新提交某个版本">重新提交某个版本</h3>
<p>有时候提交版本有问题，想做细微更改后重新提交；使用 commit --amend
就可以做到</p>
<p>回退到刚提交的版本, 修改后执行:</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></tbody></table></figure>
<h2 id="撤销最新提交并放回到缓存中">撤销最新提交并放回到缓存中</h2>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">git reset HEAD^</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Git/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GTK Base</title>
    <url>/2023/01/21/auto/26/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 <span id="more"></span></p>
<p>GTK 是一个小部件 (Widget) 工具包. GTK
创建的每个用户界面都由小部件组成. 这是使用 GObject 实现的，GObject 是 C
的一个面向对象的框架.</p>
<p>其中，窗口 (window) 小部件一般被作为主容器.
然后，通过向窗口添加按钮、下拉菜单、输入字段和其他小部件来构建用户界面.</p>
<p>如果你正在打算创建一个复杂的用户界面，建议使用 GtkBuilder
及其特定于的 GTK 的标记描述语言，而不是手动组装界面.</p>
<p>GTK 是事件驱动的.
该工具包侦听事件，如点击按钮，并将事件传递给您的应用程序.</p>
<p>为了开始我们对 GTK 的介绍，我们将从一个非常简单的应用程序开始.
该程序将创建一个空的 200×200 像素的窗口.</p>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;gtk/gtk.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">activate</span> <span class="params">(GtkApplication *app, gpointer user_data)</span></span><br><span class="line">{</span><br><span class="line">  GtkWidget *window;</span><br><span class="line"></span><br><span class="line">  window = gtk_application_window_new (app);</span><br><span class="line">  gtk_window_set_title (GTK_WINDOW (window), <span class="string">"Window"</span>);</span><br><span class="line">  gtk_window_set_default_size (GTK_WINDOW (window), <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">  gtk_widget_show (window);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">  GtkApplication *app;</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line">  app = gtk_application_new (<span class="string">"org.gtk.example"</span>, G_APPLICATION_DEFAULT_FLAGS);</span><br><span class="line">  g_signal_connect (app, <span class="string">"activate"</span>, G_CALLBACK (activate), <span class="literal">NULL</span>);</span><br><span class="line">  status = g_application_run (G_APPLICATION (app), argc, argv);</span><br><span class="line">  g_object_unref (app);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>编译 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc `pkg-config --cflags gtk4` main.c `pkg-config --libs gtk4`</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>所有 GTK 应用程序都将包括 gtk/gtk.h, 它声明 GTK
应用程序所需的函数、类型和宏. 即使 GTK
安装了多个头文件，第三方代码也只能直接包含顶级 gtk/gtk.h 头文件.
如果直接包含任何其他标头，则编译器将中止并返回错误.</p>
<p>在 GTK 应用程序中，main () 函数的作用是创建一个 GtkApplication
对象并运行它. 在本例中，声明了一个名为 app 的 GtkApplication
指针，然后使用 gtk_application_new () 对其进行初始化.</p>
<p>在创建 GtkApplication 时，您需要选择一个应用程序标识符 (名称),
并将其作为参数传递给 gtk_application_new () . 在本例中，使用了
org.gtk.Example</p>
<p>最后，GApplicationFlages 提供了应用程序功能标志. 其枚举值如下:
</p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">  G_APPLICATION_FLAGS_NONE <span class="title function_">GLIB_DEPRECATED_ENUMERATOR_IN_2_74_FOR</span> <span class="params">(G_APPLICATION_DEFAULT_FLAGS)</span>,</span><br><span class="line">  G_APPLICATION_DEFAULT_FLAGS GLIB_AVAILABLE_ENUMERATOR_IN_2_74 = <span class="number">0</span>,</span><br><span class="line">  G_APPLICATION_IS_SERVICE  =          (<span class="number">1</span> &lt;&lt; <span class="number">0</span>),</span><br><span class="line">  G_APPLICATION_IS_LAUNCHER =          (<span class="number">1</span> &lt;&lt; <span class="number">1</span>),</span><br><span class="line"></span><br><span class="line">  G_APPLICATION_HANDLES_OPEN =         (<span class="number">1</span> &lt;&lt; <span class="number">2</span>),</span><br><span class="line">  G_APPLICATION_HANDLES_COMMAND_LINE = (<span class="number">1</span> &lt;&lt; <span class="number">3</span>),</span><br><span class="line">  G_APPLICATION_SEND_ENVIRONMENT    =  (<span class="number">1</span> &lt;&lt; <span class="number">4</span>),</span><br><span class="line"></span><br><span class="line">  G_APPLICATION_NON_UNIQUE =           (<span class="number">1</span> &lt;&lt; <span class="number">5</span>),</span><br><span class="line"></span><br><span class="line">  G_APPLICATION_CAN_OVERRIDE_APP_ID =  (<span class="number">1</span> &lt;&lt; <span class="number">6</span>),</span><br><span class="line">  G_APPLICATION_ALLOW_REPLACEMENT   =  (<span class="number">1</span> &lt;&lt; <span class="number">7</span>),</span><br><span class="line">  G_APPLICATION_REPLACE             =  (<span class="number">1</span> &lt;&lt; <span class="number">8</span>)</span><br><span class="line">} GApplicationFlags;</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>接下来，将激活 (activate) 信号连接到 main () 函数上方的 activate ()
函数. 当您的应用程序在下面的行中使用 g_application_run
启动时，将发出激活信号. g_application_run () 调用还将命令行参数 (argc 和
argv 字符串数组) 作为参数.
您的应用程序可以覆盖命令行处理，例如打开在命令行上传递的文件.</p>
<p>在 g_application_run () 中发送激活信号，然后进入应用程序的 activate
() 函数. 这是我们构造 GTK 窗口的地方，以便在启动应用程序时显示一个窗口.
调用 gtk_application_window_new () 将创建一个新的 GtkApplicationWindow
并返回创建的窗口指针，根据平台的不同，窗口将具有 frame、标题栏 ( title
bar) 和窗口控制 (window controls) 等功能属性.</p>
<p>使用 gtk_window_set_title () 设置窗口标题. 此函数接受 GtkWindow
指针和字符串作为输入. 因为我们的窗口指针是 GtkWidget
指针，所以我们需要将其强制转换为 GtkWindow；不是通过典型的 C 强制转换
(GtkWindow*) 来转换窗口，而是使用宏 GTK_WINDOW () 来转换窗口. GTK_WINDOW
() 将在强制转换之前检查指针是否为 GtkWindow
类的实例，如果检查失败则发出警告.</p>
<p>最后，使用 gtk_window_set_default_size () 设置窗口大小，然后 GTK 通过
gtk_widget_show () 显示窗口.</p>
<p>当您关闭窗口时，例如，通过按下 [X] 按钮，g_application_run ()
调用返回一个数字，该数字保存在一个名为 Status 的整型变量中. 然后，使用
g_Object_unref () 从内存中释放 GtkApplication 对象.
最后，返回状态整数并退出应用程序.</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Lib/GTK/01Base/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>GTK</category>
      </categories>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>MSYS2 + VSCode 在 windows 上搭建 C/C++ 开发环境</title>
    <url>/2023/09/25/auto/41/MSYS2_VSCode_C_Cpp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何使用 MSYS + VSCode 在 windows 上搭建 C/C++ 开发环境
<span id="more"></span></p>
<h1 id="安装和配置-msys2">1. 安装和配置 MSYS2</h1>
<ul>
<li><p>官网下载并安装</p></li>
<li><p>启动脚本 msys.bat</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line">@C:\msys64\msys2_shell.<span class="built_in">cmd</span> -ucrt64 -defterm -no-<span class="built_in">start</span> -full-<span class="built_in">path</span>  -here</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>换镜像源</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">sed -i "s#https\?://mirror.msys2.org/#https://mirrors.tuna.tsinghua.edu.cn/msys2/#g" /etc/pacman.d/mirrorlist*</span><br></pre></td></tr></tbody></table></figure></li>
<li><p>安装编译器和调试器</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gdb</span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="安装-vscode-和配置">2. 安装 VSCode 和配置</h1>
<ul>
<li><p>官网下载</p></li>
<li><p>安装 C/C++ 插件</p></li>
<li><p>以下是在 user settings.json 中配置</p></li>
<li><p>设置 C_Cpp 编译器路径</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"C_Cpp.default.compilerPath"</span><span class="punctuation">:</span> <span class="string">"C:\\msys64\\ucrt64\\bin\\gcc.exe"</span></span><br></pre></td></tr></tbody></table></figure></li>
<li><p>设置默认终端为 MSYS2</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"terminal.integrated.defaultProfile.windows"</span><span class="punctuation">:</span> <span class="string">"MSYS2"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"terminal.integrated.profiles.windows"</span><span class="punctuation">:</span> <span class="punctuation">{</span>               </span><br><span class="line"><span class="attr">"MSYS2"</span><span class="punctuation">:</span> <span class="punctuation">{</span> </span><br><span class="line">        <span class="attr">"path"</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">"C:\\Library\\Command\\msys.bat"</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">""</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"icon"</span><span class="punctuation">:</span> <span class="string">"terminal-cmd"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="在-vscode-中调试程序">3. 在 VSCode 中调试程序</h1>
<ul>
<li><p>创建 launch.json</p></li>
<li><p>主要设置 program 和 miDebuggerPath</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.2.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurations"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"(gdb) 启动"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"cppdbg"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"launch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"program"</span><span class="punctuation">:</span> <span class="string">"${workspaceFolder}/helloworld/a.exe"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cwd"</span><span class="punctuation">:</span> <span class="string">"${fileDirname}"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"environment"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"externalConsole"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"MIMode"</span><span class="punctuation">:</span> <span class="string">"gdb"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"miDebuggerPath"</span><span class="punctuation">:</span> <span class="string">"C:\\msys64\\ucrt64\\bin\\gdb.exe"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"setupCommands"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure></li>
</ul>
<h1 id="基于第三方库开发">4. 基于第三方库开发</h1>
<h2 id="示例">示例</h2>
<p>安装 SDL2</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-ucrt-x86_64-SDL2 pkg-config</span><br></pre></td></tr></tbody></table></figure>
<p>demo.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL2/SDL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    SDL_Window *window = SDL_CreateWindow(<span class="string">"demo"</span>, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, <span class="number">640</span>, <span class="number">480</span>, SDL_WINDOW_SHOWN);</span><br><span class="line">    SDL_Renderer *renderer = SDL_CreateRenderer(window, <span class="number">-1</span>, SDL_RENDERER_ACCELERATED);</span><br><span class="line">    <span class="type">bool</span> quit = <span class="literal">false</span>;</span><br><span class="line">    SDL_Event event;</span><br><span class="line"></span><br><span class="line">    SDL_SetRenderDrawColor(renderer, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">while</span> (!quit) {</span><br><span class="line">        <span class="keyword">while</span> (SDL_PollEvent(&amp;event)) {</span><br><span class="line">            <span class="keyword">switch</span> (event.type) {</span><br><span class="line">            <span class="keyword">case</span> SDL_QUIT:</span><br><span class="line">                quit = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SDL_MOUSEMOTION:</span><br><span class="line">                <span class="keyword">if</span>(SDL_GetMouseState(<span class="literal">NULL</span>, <span class="literal">NULL</span>) &amp;SDL_BUTTON(<span class="number">1</span>))</span><br><span class="line">                    SDL_RenderDrawPoint(renderer, event.motion.x, event.motion.y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        SDL_RenderPresent(renderer);</span><br><span class="line">        SDL_Delay(<span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">    }</span><br><span class="line">    SDL_DestroyWindow(window);</span><br><span class="line">    SDL_DestroyRenderer(renderer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>编译</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc demo.c `pkg-config SDL2 --cflags --libs --static` -static</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/BiliBili/MSYS2/MSYS2_VSCode_C_Cpp环境搭建.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Bilibili</category>
        <category>MSYS2</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>MSYS2</tag>
      </tags>
  </entry>
  <entry>
    <title>Git bare 仓库测试</title>
    <url>/2023/02/15/auto/44/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何使用 Git 的 bare 仓库来实现 Git
仓库包含多个子仓库</p>
<span id="more"></span>
<h1 id="git-bare-仓库测试">Git bare 仓库测试</h1>
<p>我们假设有一个主项目 MainProject, 其下有多个子项目 SubProject1,
SubProject2</p>
<p>我们希望每个子项目中都有自己的 git 管理仓库, 但是又希望所有代码都放在
MainProject 目录中,</p>
<p>MainProject 是关联到远程仓库的, 我们希望 push 或 pull 的时候,
把子项目也加载一起,</p>
<p>如果单纯的在子项目中使用 <code>git init</code> 是行不通的,
因为主项目在提交 commit 时会忽略包含 .git 的文件</p>
<p>那该怎么办呢, 一般来说, 可以使用 submodule
的方式来实现一个项目中包含多个 git 仓库,
但是前提是要将那些子模块仓库放在其他远程仓库,</p>
<p>这样就比较麻烦, 因为如果子项目很多, 就要创建非常多的仓库来容纳他们,
但其实我希望的是所有代码都统一在主项目中,
而把他们分成多个子项目只是希望能对子项目单独进行 git 管理.</p>
<p>其实 git 的 bare 功能能够解决上面的问题, 下面看看如何实现:</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0. 创建主项目目录</span></span><br><span class="line">mkdir MainProject -p &amp;&amp; cd MainProject</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化主项目</span></span><br><span class="line">git init .</span><br><span class="line">echo Hello &gt; hello.txt</span><br><span class="line">git add . &amp;&amp; git commit -m "Add hello.txt"</span><br><span class="line">git remote add origin https://gitee.com/wjundong/test-git.git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 子项目1</span></span><br><span class="line">mkdir SubProject1 -p &amp;&amp; cd SubProject1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建子项目的 bare 仓库</span></span><br><span class="line">mkdir .git_bare -p &amp;&amp; cd .git_bare</span><br><span class="line">    git init --bare .</span><br><span class="line">cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">子项目的 git 管理仓库</span></span><br><span class="line">mkdir subproject -p &amp;&amp; cd subproject</span><br><span class="line">    git init .</span><br><span class="line">    echo "SubProject1" &gt; SubProject1.txt</span><br><span class="line">    git add . &amp;&amp; git commit -m "Add SubProject1.txt"</span><br><span class="line"></span><br><span class="line">    git remote add bare ../.git_bare</span><br><span class="line">    git push bare master</span><br><span class="line">cd ..</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主项目中添加 bare</span></span><br><span class="line">git add . &amp;&amp; git commit -m "add SubProject1"</span><br><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## X. 后面某个时间, 我们从远程仓库下载我们的主项目 (包含了子项目)</span></span></span><br><span class="line">mkdir TEST -p &amp;&amp; cd TEST</span><br><span class="line">git clone https://gitee.com/wjundong/test-git.git .</span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 subproject 从 bare 中解析出来</span></span><br><span class="line">cd SubProject1</span><br><span class="line">git clone .git_bare subproject</span><br><span class="line"></span><br><span class="line">cd subproject</span><br><span class="line">git log</span><br><span class="line">echo "Very Good" &gt; good.txt</span><br><span class="line">git add . &amp;&amp; git commit -m "add good.txt"</span><br><span class="line">git push</span><br></pre></td></tr></tbody></table></figure>
<p>.git_bare 相当于一个本地的仓库服务器,
它可以被主项目添加到源代码中</p>
<blockquote>
<p>注: 如果在已经存在的仓库文件夹创建 bare 发现即使该文件夹中没有 .git
也无法添加该文件夹, 可以使用 git rm --cached thisdir 来重新添加</p>
</blockquote>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Git/GitTest/bare/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex 入门 1</title>
    <url>/2023/01/16/auto/46/readme/</url>
    <content><![CDATA[<html><head></head><body><h1 id="latex-入门一">Latex 入门（一）</h1>
<h2 id="程序发展介绍">1. 程序发展介绍</h2>
<p>高德纳设计的 TeX 原本只是一个相对简单的程序, 命令 tex
就会调用最基本的 TeX 程序。它相对简单的格式 Plain TeX 进行排版。tex 读入
TeX 源文档, 输出一种称为 “设备无关” 的（DeVice Independent）格式, 即 DVI
文件, DVI 文件在过去是 TeX 的标准输出格式, 但功能比较受限,
不能嵌入字体和图形等, 在 PostScript 和 PDF 流行之后, DVI
格式就主要成为一种到 PS 或 PDF 格式的中间格式了。</p>
<p>程序 Dvips 将 DVI 文件转换为 PostScript 文件, 可以直接拿到支持
PostScript 的打印机上打印, 也可以通过 GhostScript 的 ps2pdf 或 Adobe
Acrobat 提供的 Distiller 等程序再从 PostScript 文件转换为 PDF 文件。PDF
流行以后又有了能把 DVI 文件直接转换为 PDF 文件的 dvipdf 程序,
之后出现了更为先进的 dvipdfm 和 dvipdfmx, 可以支持更丰富的 PDF
功能和东亚字体等, 现在新的发行版中主要还在使用的是 dvipdfmx（常写做
DVIPDFMx）。这类把 DVI 文件转换为其他实用格式的程序常被称为 TeX
输出的驱动（driver）。</p>
<p>除了最初的 TeX 程序, 后来有许多人对 TeX 进行了扩展。先是有了 eTeX,
后来在 eTeX 的基础上, Hàn Thế Thành 设计了能直接输出 PDF 格式的
pdfTeX。不过 pdfTeX 程序也保留了输出 DVI 格式的能力, 因而现在很多输出DVI
格式的命令内部也是使用的 pdfTeX 程序。pdfTeX 的后继是 LuaTeX,
这是一种把脚本语言 Lua 和 TeX 结合起来的程序。eTeX 的另一发展则是 XeTex
程序, 它将中间层 DVI 格式扩充为更强大的 xdv 格式, 一般会直接调用
dvipdfmx 的后继 xdvipdfmx, 直接输出 PDF 格式。LuaTeX和 XeTex 都将原来
TeX 支持的 ACSII 编码改为 UTF-8 编码, 并且可以更方便地使用各种字体。TeX
程序连同这些扩展常被称为不同的 TeX 引擎（engine）。</p>
<p>不同的引擎都可以编译 Plain TeX、LATeX 或是 ConTeXt 等不同格式的文 档,
不同的组合就使用不同的命令</p>
<table>
<thead>
<tr>
<th>引擎:命令:格式</th>
<th>Plain TeX</th>
<th>LaTex</th>
<th>ConTeXt</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>TeX/eTeX</td>
<td>tex / etex</td>
<td>不支持</td>
<td>不支持</td>
<td>DVI</td>
</tr>
<tr>
<td>pdfTeX</td>
<td>tex</td>
<td>latex</td>
<td>不支持</td>
<td>DVI</td>
</tr>
<tr>
<td>pdfTeX</td>
<td>pdftex</td>
<td>pdflatex</td>
<td>texexec</td>
<td>PDF</td>
</tr>
<tr>
<td>xeTex</td>
<td>xetex</td>
<td>xelatex</td>
<td>特殊参数</td>
<td>PDF</td>
</tr>
<tr>
<td>LuaTex</td>
<td>luatex</td>
<td>lualatex</td>
<td>context</td>
<td>PDF</td>
</tr>
</tbody>
</table>
<blockquote>
<p>用 latex 和 pdflatex 命令排版在处理中文时都使用 CJK 宏包的机制，而
xelatex 则使用新的 xeCJK 宏包的机制。功能上 xelatex
最为方便，尤其是在处理中文时；而用 pdflatex
编译，一些宏包的兼容性更好一些。</p>
</blockquote>
<h2 id="hello-latex">2. Hello LaTex</h2>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{article}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    Hello <span class="keyword">\LaTeX</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<p>对于中文, 可通过使用 ctexart 文档类型来支持:</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]{ctexart}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    你好 <span class="keyword">\LaTeX</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>UTF8 表明了中文所使用的编码, 其对应于 .tex 文本文档保存编码格式。</p>
</blockquote>
<p>编译 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">pdflatex demo.tex</span><br></pre></td></tr></tbody></table></figure><p></p>
<h2 id="基本文章框架">3. 基本文章框架</h2>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[UTF8]{ctexart}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>{杂谈勾股定理}</span><br><span class="line"><span class="keyword">\author</span>{张三}</span><br><span class="line"><span class="keyword">\date</span>{<span class="keyword">\today</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bibliographystyle</span>{plain}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{勾股定理在古代}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\section</span>{勾股定理在近代形式}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\bibliography</span>{math}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p><code>\bibliographystyle</code> 声明参考文献的格式
<code>\maketitle</code> 输出标题, 包含了三要素:标题，作者，日期
<code>\tableofcontents</code> 输出目录
<code>\bibliographystyle{math}</code> 则是提示 TeX 从文献数据库 math 中
获取文献信息，并输出参考文献列表</p>
</blockquote>
<p>在 <code>\begin{document}</code>
之前的部分称为导言区（preamble），导言区通常用来对文档的性质做一些设置，或自定义一些命令。</p>
<blockquote>
<p>注意这里要生成目录至少需要编译两次，让 LaTex
有机会读完整个论文来计算目录结构</p>
</blockquote>
<h2 id="正文内容">4. 正文内容</h2>
<h3 id="换行与空格">4.1 换行与空格</h3>
<p>需要注意一下几点</p>
<ul>
<li>使用空行分段。单个换行并不会使文字另起一段，而只是起到使源代码更易读的作用。并且,
空行只起分段作用，使用很多空行不会起任何增大段间距的作用；</li>
<li>段前不用打空格，LaTex 会自动完成文字的缩进；</li>
<li>通常汉字后面的空格会被忽略，其他符号后面的空格则保留。单个的换行就相当于一个空格，因此源代码中大段文字可以安全地分成短行。</li>
<li>空格只起分隔单词或符号的作用，使用很多空格并不起任何增大字词间距的作用。</li>
</ul>
<p>使用 xelatex 编译文档时，ctexart 文档类会调用 xeCJK
宏包，自动处理汉字与其他符号之间的距离，无论你有没有在它们之间加上正确的空格，这是十分方便的。不过，在源代码中仍然可以给汉字与其他符号之间加上一个空格，这会令代码更加清晰。</p>
<h3 id="命令与环境">4.2 命令与环境</h3>
<p>一个 LaTex 命令（宏）的格式为： * 无参数： <code>\command</code> * 有
n 个参数： <code>\comand&lt;arg1&gt;&lt;arg2&gt;...&lt;argn&gt;</code> *
有可选参数：
<code>\command[opt1, opt2...optn]&lt;arg1&gt;&lt;arg2&gt;...&lt;argn&gt;</code></p>
<p>如果命令的参数不止一个字符（不包括空格），就必须用花括号括起来。可选参数如果出现，则用方括号括起来。</p>
<p>常用命令: * <code>\footnote{内容}</code> 输出脚注 *
<code>\emph{内容}</code> 强调内容 * <code>\zihao{-5}</code>
设置后文字号小 5 ('-' 表示小) * <code>\kaishu</code>
设置后文字体字体楷书</p>
<p><code>\zihaoh{字体大小}</code> 与 <code>\kaishu</code>
命令会影响后面的所有文字，直到整个分组结束，这种命令又称为声明（declaration）。
分组限定了声明的作用范围。</p>
<p>一个 LaTex 环境就是一个分组（group）, 最大的分组是表示正文的 document
环境，也可以用成对的花括号 { } 产生一个分组。</p>
<p>环境格式: </p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{&lt;环境名&gt;}</span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{&lt;环境名&gt;}</span><br></pre></td></tr></tbody></table></figure> 有的环境也有参数或可选参数，格式为：
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{&lt;环境名&gt;}[&lt;可选参数&gt;]&lt;其他参数&gt;</span><br><span class="line"></span><br><span class="line">内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{&lt;环境名&gt;}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>常用环境: * 引用环境 quote * 摘要环境 abstract * 定理环境
定理环境是一类环境，在使用前需要先在导言区做定义： *
<code>\newtheorem{thm}{定理}</code> 这就定义了一个 thm 的环境。
定理环境可以有一个可选参数，就是定理的名字。 *
<code>\begin{thm}[勾股定理]</code></p>
<h3 id="数学公式">4.3 数学公式</h3>
<p>夹在行文中的公式称为“正文公式”（in-text formula）或“行内公式”（inline
formula），可用一对美元符号 $ $ 括起来表示。</p>
<p>对比较长或比较重要的公式，一般则单独居中写在一行；为了方便引用，经常还给公式编号。这种公式被称作
“显示公式” 或 “列表公式”（displayed formula），使用 equation
环境就可以方便地输入这种公式。</p>
<h3 id="使用图表">4.4 使用图表</h3>
<p>在 LaTex 中使用插图有两种途径，一是插入事先准备好的图片，二是使用
LaTex 代码直接在文档中画图。</p>
插图功能不是由 LaTex 的内核直接提供，而是由 graphicx 宏包提供的。要使用
graphicx 宏包的插图功能，需要在源文件的导言区使用
<p>命令引入宏包：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br></pre></td></tr></tbody></table></figure>
<p>引入 graphicx 宏包后，就可以使用 \includegraphics 命令插图了。
</p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\includegraphics</span>[width=3cm]{xiantu.pdf}</span><br></pre></td></tr></tbody></table></figure> &gt; 这里 \includegraphics 有两个参数，方括号中的可选参数
width=3cm 设置图形在文档中显示的宽度为 3 cm，而第二个参数 xiantu.pdf
则是图形的文件名（放在源文件所在目录） &gt; 可选参数还有
scale=&lt;缩放因子&gt;, height=&lt;高度&gt; 等。<p></p>
<p>插入的图形就是一个有内容的矩形盒子，在正文中和一个很大的字符没有多少区别。为了不影响文字的排版，除了一些很小的标志图形，我们很少把插图直接夹在文字之中，而是使用单独的环境列出。而且很大的图形如果固定位置，会给分页造成困难。因此，通常都把图形放在一个可以变动相对位置的环境中，称为浮动体（float）。</p>
<p>figure 环境就是插图使用的浮动体环境。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{figure}[ht]</span><br><span class="line"></span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[scale=0.6]{xiantu.pdf}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\caption</span>{宋赵爽在《周髀算经》注中作的弦图（仿制），该图给出了勾股定 理的一个极具对称美的证明。}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\label</span>{fig:xiantu}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
可选参数
[ht]，表示浮动体可以出现在环境周围的文本所在处（here）和一页的顶部（top）；
figure 环境内部相当于普通的段落（默认没有缩进）； 表示后面的内容居中；
令给插图加上自动编号和标题；
命令则给图形定义一个标签，使用这个标签就可以在文章的其他地方引用
<p>生的编号；</p>
</blockquote>
<h3 id="制作表格">4.5 制作表格</h3>
<p>制作表格，需要确定的是表格的行、列对齐模式和表格线，这是由 tabular
环境完成的：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{table}[H]</span><br><span class="line">    <span class="keyword">\begin</span>{tabular}{|rrr|}</span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        直角边 <span class="built_in">$</span>a<span class="built_in">$</span> <span class="built_in">&amp;</span> 直角边 <span class="built_in">$</span>b<span class="built_in">$</span> <span class="built_in">&amp;</span> 斜边 <span class="built_in">$</span>c<span class="built_in">$</span><span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        3 <span class="built_in">&amp;</span> 4 <span class="built_in">&amp;</span> 5 <span class="keyword">\\</span></span><br><span class="line">        5 <span class="built_in">&amp;</span> 12 <span class="built_in">&amp;</span> 13 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>{tabular}<span class="comment">%</span></span><br><span class="line">    <span class="keyword">\qquad</span></span><br><span class="line">    (<span class="built_in">$</span>a<span class="built_in">^</span>2 + b<span class="built_in">^</span>2 = c<span class="built_in">^</span>2<span class="built_in">$</span>)</span><br><span class="line"><span class="keyword">\end</span>{table}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>tabular 环境有一个参数，里面声明了表格中列的模式。 |rrr|
表示表格有三列，都是右对齐，且在第一列前面和第三列后面各有一条垂直的表格线。
在 tabular 环境内部，行与行之间用命令 \ 隔开，每行内部的表项则用符号
&amp; 隔开。 表格中的横线则是用命令 产生的</p>
</blockquote>
表格与 \includegraphics
命令得到的插图一样，都是一个比较大的盒子。一般也放在浮动环境中，即 table
环境, 参数与大体的使用格式也与 figure 环境差不多，只是
<p>令得到的标题是 “表” 而不是
“图”。不过这里并没有给表格加标题，也没有把内容居中，而是把表格和一个公式并排排开，中间使用一个
分隔。</p>
<blockquote>
<p>产生长为 2 em（大约两个 “M” 的宽度）的空白。</p>
</blockquote>
<p>因为我们已经使用 生成足够长度的空格了，所以再用 \end{tabular}
后的注释符 %
取消换行产生的一个多余的空格，这正好达到我们预想的效果。</p>
<blockquote>
<p>table 环境，在表示位置的参数处使用了 [H]，表示
“就放在这里，不浮动”。</p>
</blockquote>
[H] 选项并不是标准 LaTex 的 table 环境使用的参数，而是由 float
宏包提供的特殊功能。因此要让上面的代码正确运行，还要在导言区使用
<p>。在这种表格很小（不影响分页），行文又要求连贯的场合，float
宏包的这种不浮动的图表环境是很有用的。</p>
<h2 id="自动化工具">5. 自动化工具</h2>
<h3 id="参考文献处理工具">5.1 参考文献处理工具</h3>
<p>BibTex 是一个专用于处理 LaTex 文档文献列表的程序。 BibTex
使用的参考文献数据库其实就是一个后缀为 .bib 的文件。其内容格式如下:
</p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">@BOOK{Kline,</span><br><span class="line">    title = {古今数学思想},</span><br><span class="line">    publisher = {上海科学技术出版社},</span><br><span class="line">    year = {<span class="number">2002</span>},</span><br><span class="line">    author = {克莱因}</span><br><span class="line">}</span><br><span class="line">@ARTICLE{quanjing,</span><br><span class="line">    author = {曲安京},</span><br><span class="line">    title = {商高、赵爽与刘徽关于勾股定理的证明},</span><br><span class="line">    journal = {数学传播},</span><br><span class="line">    year = {<span class="number">1998</span>},</span><br><span class="line">    volume = {<span class="number">20</span>},</span><br><span class="line">    number = {<span class="number">3</span>}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">@BOOK{Shiye,</span><br><span class="line">    title = {几何的有名定理},</span><br><span class="line">    publisher = {上海科学技术出版社},</span><br><span class="line">    year = {<span class="number">1986</span>},</span><br><span class="line">    author = {矢野健太郎}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>一个文献数据库文件的格式并不复杂，每则文献包括类型、引用标签、标题、作者、出版年、出版社等信息，可以直接手工输入。在现实中，BibTeX
数据库经常并不需要我们自己录入，而可以从相关学科的网站直接下载或是从其他类型的文献数据库转换得到。即使是在需要我们自己录入的情况下，使用
JabRef 这种软件来管理也更方便，不易出错。</p>
<p>使用 BibTex 处理文献时, 编译步骤为:</p>
<figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">xelatex demo.tex</span><br><span class="line">bibtex demo.aux</span><br><span class="line">xelatex demo.tex</span><br><span class="line">xelatex demo.tex</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>第一次运行 xelatex 为 BibTex
准备好辅助文件，确定数据库中的哪些文献将被列出来。 然后 bibtex
处理辅助文件
gougu.aux，从文献数据库中选取文献，按指定的格式生成文献列表的 LaTex 代码
后面两次 xelatex 再读入文献列表代码并生成正确的引用信息。</p>
</blockquote>
<p>对文献数据库的引用如下:</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\cite{文献标签}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
文献标签是 .bib 中每个条目第一行出现的东西；
只有被引用的文献才会出现在参考文献列表中，如果要在列表中显示并不直接引用的文献，可以使用
命令，一般是把它放在
<p>之前。</p>
</blockquote>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\nocite</span>{Shiye}</span><br><span class="line"><span class="keyword">\bibliography</span>{math}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="目录和引用">5.2 目录和引用</h3>
<p>目录也是自动从章节命令中提取并写入目录文件中的，我们在提纲中就使用了
命令，它将在第二次 xelatex 编译时生效。</p>
<p>引用不仅限于参考文献。图表、公式的编号，只要事先设定了标签，同样可以通过辅助文件为中介引用。基本的交叉引用命令是
<span class="math inline">\(\ref{引用标签}\)</span>，它以标签为参数，得到被引用的编号。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">图 <span class="keyword">\ref</span>{fig:xiantu} 是我国古代对勾股定理的一种证明 <span class="keyword">\cite</span>{quanjing}。</span><br></pre></td></tr></tbody></table></figure>
<p>公式编号的引用也可照此办理，不过需要先在公式中定义标签。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{equation}<span class="keyword">\label</span>{eq:gougu}</span><br><span class="line">AB<span class="built_in">^</span>2 = BC<span class="built_in">^</span>2 + AC<span class="built_in">^</span>2.</span><br><span class="line"><span class="keyword">\end</span>{equation}</span><br></pre></td></tr></tbody></table></figure>
<p>而后在正文中以 (<span class="math inline">\(\ref{eq:gougu}\)</span>)
引用。实际中引用公式非常常用，数学宏包 amsmath 就定义了
命令，专门用于公式的引用，并能产生括号。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 导言区使用 \usepackage{amsmath}</span></span><br><span class="line">满足式 <span class="keyword">\eqref</span>{eq:gougu} 的整数称为<span class="keyword">\emph</span>{勾股数}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="设计文章的格式">6. 设计文章的格式</h2>
<p>绝大部分设计工作是在文章的导言区通过一些命令定义和参数设定来完成的，但往往相当复杂，好在其中的大多数工作可以通过使用一些宏包来简化，前面已经用到过
graphicx、float、amsmath 几种宏包完成一些工作，这里也要用到几种。</p>
<ul>
<li><p>设计页面尺寸可以使用 geometry 宏包: </p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{geometry}</span><br><span class="line"><span class="keyword">\geometry</span>{a6paper, centering, scale=0.8}</span><br></pre></td></tr></tbody></table></figure> &gt;
这是最简单的设定方式，定义页面使用 A6 纸大小，版心居中，长宽占页面的 0:8
倍。<p></p></li>
<li><p>改变图表标题格式可以使用 caption 宏包: </p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[format=hang,font=small,textfont=it]{caption}</span><br></pre></td></tr></tbody></table></figure> &gt;
设定图表所有标题使用悬挂对齐方式（即编号向左突出），整体用小字号，而标题文本使用斜体（对汉字来说就是楷书）。<p></p></li>
<li><p>增加目录的项目则可以用 tocbibind 宏包: </p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[nottoc]{tocbibind}</span><br></pre></td></tr></tbody></table></figure> &gt;
宏包默认会在目录中加入目录项本身、参考文献、索引等项目。这里使用 nottoc
选项取消了在目录中显示目录本身<p></p></li>
<li><p>标题和作者的字体可以直接在命令中设定 </p><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\title</span>{<span class="keyword">\heiti</span> 杂谈勾股定理}</span><br><span class="line"><span class="keyword">\author</span>{<span class="keyword">\kaishu</span> 张三}</span><br><span class="line"><span class="keyword">\date</span>{<span class="keyword">\today</span>}</span><br></pre></td></tr></tbody></table></figure> &gt; 其中
是和 类似的中文字体命令，把字体切换为黑体<p></p></li>
</ul>
<h3 id="自定义环境">6.1 自定义环境</h3>
<p>正文中表示引用的 quote
环境里面还夹杂着字体命令，这种散落在各处的格式设置很难看清，而且不方便修改。为了解决这个问题，可以利用
\newenvironment 命令定义一个新的环境，在原来 quote
的基础上再增加格式控制：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\newenvironment</span>{myquote} {</span><br><span class="line">    <span class="keyword">\begin</span>{quote}<span class="keyword">\kaishu</span><span class="keyword">\zihao</span>{-5}</span><br><span class="line">} {</span><br><span class="line"><span class="keyword">\end</span>{quote} </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>这里，\newenvironment
有三个参数，第一个参数是环境的名字，后两个参数分别是在环境开始和末尾处的代码，因此，就可以用新环境。</p>
</blockquote>
<h3 id="自定义命令">6.2 自定义命令</h3>
<p>原来数学公式中角度的单位 ^也很不直观，可以用 \newcommand
命令定义一个新的命令 ：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span><span class="keyword">\degree</span>{<span class="built_in">^</span><span class="keyword">\circ</span>}</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>\newcommand
命令的两个参数分别是新命令和新命令的定义，于是我们就可以用 $90$
来代替原来不直观的 $90^$ 了。</p>
</blockquote>
我们还是使用自定义的环境 myquote 和自定义的命令
代替了文中出现的特殊格式控制。类似地，在设定插图标题的字体时，并没有把字体、字号的命令塞进
<p>令的参数中，而是使用 caption 宏包统一设置。这样看起来比最 “直接”
的做法要多绕一道弯子，但好处是更清晰和更容易修改格式。这在只有一两页的内容上可能看不出什么特别的好处，但当你开始编写和维护几十上百页的长文档时，在设计阶段所付出的精力就会得到回报了。</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Latex/Latex入门/入门1/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Latex</category>
        <category>入门</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile解析</title>
    <url>/2023/01/18/auto/47/Makefile%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍Makefile的常用功能 <span id="more"></span></p>
<h4 id="最简约的">最简约的</h4>
<p>Makefile 文件如下 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SRCS = main.c src/add.c</span><br><span class="line"></span><br><span class="line">OBJS = $(SRCS:%.c=%.o)</span><br><span class="line"></span><br><span class="line">CFLAGS = -Iinc</span><br><span class="line"></span><br><span class="line">all: $(OBJS)</span><br><span class="line">	CC $(CFLAGS) $(OBJS) -o a.exe</span><br><span class="line"></span><br><span class="line">%.o: %.c</span><br><span class="line">	CC $(CFLAGS) -c $&lt; -o $@ </span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm $(OBJS)</span><br></pre></td></tr></tbody></table></figure><p></p>
<blockquote>
<p>只要列出详细的源文件路径, OBJ 直接从 SRC 替换 .c 得来,
然后直接在以OBJ作为依赖, 假设已经得到所有 OBJ文件, 即可直接使用 CC
进行链接即可, 而 OBJ 列表中的内容则由 %.o: %.c 一个一个匹配生成.
最后清除所有中间文件也十分的简单, 直接 rm $(OBJS) 即可.</p>
</blockquote>
<h4 id="改进版-把输出中间文件都放到指定目录">改进版,
把输出中间文件都放到指定目录</h4>
<p>Makefile 文件如下 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SRCS = main.c src/add.c</span><br><span class="line"></span><br><span class="line">OBJS = $(addprefix build/, $(SRCS:%.c=%.o))</span><br><span class="line"></span><br><span class="line">CFLAGS = -Iinc</span><br><span class="line"></span><br><span class="line">all: $(OBJS)</span><br><span class="line">	CC $(CFLAGS) $(OBJS) -o build/a.exe</span><br><span class="line"></span><br><span class="line">build/%.o: %.c</span><br><span class="line">	@mkdir -p $(dir $@)</span><br><span class="line">	CC $(CFLAGS) -c $&lt; -o $@ </span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm -fR build</span><br></pre></td></tr></tbody></table></figure><p></p>
<blockquote>
<p>使用addprefix命令将src列表转obj时在每一项添加build/, 当然,
在推导时不要忘了前缀 build/%.c:%.o</p>
</blockquote>
<h4 id="更进一步-自动扫描源文件">更进一步, 自动扫描源文件</h4>
<p>Makefile 文件如下 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SRCS +=  $(wildcard src/*.c *.c)</span><br><span class="line"></span><br><span class="line">OBJS = $(addprefix build/, $(SRCS:%.c=%.o))</span><br><span class="line"></span><br><span class="line">CFLAGS = -Iinc</span><br><span class="line"></span><br><span class="line">all: $(OBJS)</span><br><span class="line">	CC $(CFLAGS) $(OBJS) -o build/a.exe</span><br><span class="line"></span><br><span class="line">build/%.o: %.c</span><br><span class="line">	@mkdir -p $(dir $@)</span><br><span class="line">	CC $(CFLAGS) -c $&lt; -o $@ </span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm -fR build</span><br></pre></td></tr></tbody></table></figure><p></p>
<blockquote>
<p>使用 wildcard 命令可以帮我们自动收集指定目录下的源文件,
就不需要一个一个输入了</p>
</blockquote>
<h4 id="多文件构建">多文件构建</h4>
<p>这里以 LVGL 模拟器仿真工程为例, Makefile 文件如下 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">LVGL_DIR = .</span><br><span class="line">LVGL_DIR_NAME = lvgl</span><br><span class="line"></span><br><span class="line">include lv_drivers/lv_drivers.mk</span><br><span class="line">include lvgl/lvgl.mk</span><br><span class="line">include lv_examples/lv_demo.mk</span><br><span class="line"></span><br><span class="line">CSRCS +=  $(wildcard main/*.c *.c)</span><br><span class="line"></span><br><span class="line">INCS += -I. -Imain -Ilvgl </span><br><span class="line"></span><br><span class="line">OBJS = $(addprefix build/, $(CSRCS:%.c=%.o))</span><br><span class="line"></span><br><span class="line">CFLAGS += -DLV_CONF_INCLUDE_SIMPLE -DLV_LVGL_H_INCLUDE_SIMPLE -DLV_DEMO_CONF_INCLUDE_SIMPLE $(INCS)</span><br><span class="line"></span><br><span class="line">all: $(OBJS)</span><br><span class="line">	CC $(CFLAGS) $(OBJS) -o a.exe -lSDL2 -lm -mwindows</span><br><span class="line"></span><br><span class="line">build/%.o: %.c</span><br><span class="line">	@mkdir -p $(dir $@)</span><br><span class="line">	CC $(CFLAGS) -c $&lt; -o $@ </span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">	rm -fR build</span><br></pre></td></tr></tbody></table></figure> &gt;
需要用到3个模块, lv_drivers、lvgl、lv_examples
而这些模块的编译信息都在模块的根目录下.mk 文件里, 比如 lv_drivers.mk
文件内容如下： &gt; <figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line">LV_DRIVERS_DIR_NAME ?= lv_drivers</span><br><span class="line"></span><br><span class="line">CSRCS += <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(LVGL_DIR)</span>/<span class="variable">$(LV_DRIVERS_DIR_NAME)</span>/*.c)</span></span><br><span class="line">CSRCS += <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(LVGL_DIR)</span>/<span class="variable">$(LV_DRIVERS_DIR_NAME)</span>/wayland/*.c)</span></span><br><span class="line">CSRCS += <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(LVGL_DIR)</span>/<span class="variable">$(LV_DRIVERS_DIR_NAME)</span>/indev/*.c)</span></span><br><span class="line">CSRCS += <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(LVGL_DIR)</span>/<span class="variable">$(LV_DRIVERS_DIR_NAME)</span>/gtkdrv/*.c)</span></span><br><span class="line">CSRCS += <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(LVGL_DIR)</span>/<span class="variable">$(LV_DRIVERS_DIR_NAME)</span>/display/*.c)</span></span><br></pre></td></tr></tbody></table></figure> &gt; 它帮我们导入了该模块必要的 C
文件, 添加到全局变量 CSRCS 中, 同理 lvgl, lv_drivers 也一样, 我们只要
include 该make文件就可以了, 源文件有了, 头文件路径怎么解决呢？LVGL
的方案是在模块根目录有一个头文件, 该头文件 里面 #include
了必要的头各种必要的头文件, 因此要用到该模块时的任何函数接口, 只要
#include 模块的根头文件就可以了.
这样我们写程序只要关注自己的头文件路径就可以了。<p></p>
<h4 id="cubemx-生成的-stm32-项目">Cubemx 生成的 STM32 项目</h4>
<p>先列出所有源文件，再根据源文件生成目标文件列表,
对目标文件自动推导即可完成。但是需要注意的是,
这里的目标文件缺失了源文件的路径信息, 因此
<code>$(BUILD_DIR)/%.o : %.c</code> 这一句中, make 推导时
<code>%</code>.o 已经是非完整路径的文件名, 这导致相应的需求文档中
<code>%.c</code> 也没有路径信息,
那么make如何确定是哪个源文件生成的呢？没错,
<code>vpath %.c $(sort $(dir $(SOURCES)))</code> 起到了关键作用,
他将告诉make在哪些目录查找源文件。 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">BUILD_DIR = build</span><br><span class="line"></span><br><span class="line"># 1. 手工生成源文件列表</span><br><span class="line">SOURCES += src/add.c</span><br><span class="line">SOURCES += src/main.c</span><br><span class="line"></span><br><span class="line"># 2. 源文件列表 -&gt; 目标文件列表, 并且目标文件重定向到 build </span><br><span class="line">OBJECTS += $(addprefix $(BUILD_DIR)/, $(notdir $(SOURCES:.c=.o)))</span><br><span class="line"># 3. 设置 vpath, 对所有源文件的 '所在目录' 进行注册</span><br><span class="line">vpath %.c $(sort $(dir $(SOURCES)))</span><br><span class="line"></span><br><span class="line"># 4. $(OBJECTS) 作为需求, make 将自动推导如何生成</span><br><span class="line">all: $(OBJECTS)</span><br><span class="line">	cc $(OBJECTS)</span><br><span class="line"></span><br><span class="line">$(BUILD_DIR)/%.o : %.c | $(BUILD_DIR)</span><br><span class="line">	cc -c $&lt; -o $@ </span><br><span class="line"></span><br><span class="line">$(BUILD_DIR) :</span><br><span class="line">	@mkdir $@</span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">	rm -rf build</span><br></pre></td></tr></tbody></table></figure> &gt; make 自动推导原理,
先看目标文件是否匹配, 然后看需求文件是否匹配,
如果目标文件匹配OK，将目标文件的 % 带到需求文件中去，如果有文件能够匹配,
则可以顺利生成。<p></p>
<h4 id="lvgl-官方-example">LVGL 官方 Example</h4>
<p>其原理是利用 shell 命令 find 查找来获取所有源文件列表,
然后利用源文件生成目标文件列表，目标文件都放到build目录下，而且对源文件的目录信息进行保留。因为源文件和目标文件的名称只相差一个
build目录, 因此直接使用 <code>$(BUILD_DIR)/%.o : %.c</code> 让 make
自行推导生成。关于保留目录信息，只需对目标文件所在文件夹进行 -p 的 mkdir
即可实现。 </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SRC_DIR = src</span><br><span class="line">BUILD_DIR = build</span><br><span class="line"></span><br><span class="line"># 1. 递归查找 'SRC_DIR' 下所有源文件</span><br><span class="line">SOURCES 		:= $(shell find $(SRC_DIR) -type f -name '*.c' -not -path '*/\.*')</span><br><span class="line"># 2. 源文件列表 -&gt; 目标文件列表, 并且目标文件重定向到 build, SOURCES 是包含路径的</span><br><span class="line">OBJECTS    	:= $(addprefix $(BUILD_DIR)/, $(SOURCES:.c=.o))</span><br><span class="line"></span><br><span class="line"># 3. $(OBJECTS) 作为需求, make 将自动推导如何生成</span><br><span class="line">all: $(OBJECTS)</span><br><span class="line">	@echo $(OBJECTS)</span><br><span class="line"></span><br><span class="line">$(BUILD_DIR)/%.o : %.c</span><br><span class="line">	@mkdir -p $(dir $@)</span><br><span class="line">	cc -c $&lt; -o $@ </span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">	rm -rf build</span><br></pre></td></tr></tbody></table></figure> &gt; 值得注意的是, 上面的 SRC_DIR
变量是可以多目录指定的, 并且还可以精确控制参加编译的目录。 &gt;
可以看到，这里不需要指定 vpath 是因为需求文件的路径是完整的,
也就是顺利匹配的。<p></p>
<h1 id="多-makefile-文件">多 Makefile 文件</h1>
<h2 id="include">include</h2>
<p>有很多项目的构建框架都是使用 include 的方式来实现 SDK 与应用分离,
其原理是在应用代码处的 Makefile 通过 include SDK_PATH 下的 Makefile
框架来提供统一的构建功能，从而实现在应用目录下进行的代码编译。</p>
<h3 id="tinyusb">1) TinyUSB</h3>
<p>TinyUSB 的每一个 example 就相当于一个完整的工程项目，每个 example 的
Makefile 基本内容如下:</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> ../../make.mk</span><br><span class="line"></span><br><span class="line">INC += \</span><br><span class="line">	src \</span><br><span class="line">	<span class="variable">$(TOP)</span>/hw \</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example source</span></span><br><span class="line">EXAMPLE_SOURCE += <span class="variable">$(<span class="built_in">wildcard</span> src/*.c)</span></span><br><span class="line">SRC_C += <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(CURRENT_PATH)</span>/, <span class="variable">$(EXAMPLE_SOURCE)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> ../../rules.mk</span><br></pre></td></tr></tbody></table></figure>
<p>在开头处添加一个 include 来导入一些环境和变量,
然后对给出当前工程的相关编译信息, 这里主要是向变量 INC
中添加头文件路径，向 SRC_C 中添加源文件信息， 这其中包含了 main
函数。</p>
<p>最后在结尾处添加一个 include 来完成真正的编译。</p>
<h1 id="模板">模板</h1>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line">TARGET = awa_pc</span><br><span class="line">BUILD_DIR = build</span><br><span class="line"></span><br><span class="line">SRCS +=  <span class="variable">$(<span class="built_in">wildcard</span> src/*.c port/*.c test/*.c)</span></span><br><span class="line">SRCS +=  cJSON/cJSON.c</span><br><span class="line"></span><br><span class="line">OBJS = <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(BUILD_DIR)</span>/, $(<span class="built_in">notdir</span> $(SRCS:.c=.o)</span>))</span><br><span class="line"><span class="keyword">vpath</span> %.c <span class="variable">$(<span class="built_in">sort</span> $(<span class="built_in">dir</span> <span class="variable">$(SRCS)</span>)</span>)</span><br><span class="line"></span><br><span class="line">CFLAGS += -Isrc -IcJSON -Iport -Itest</span><br><span class="line">CFLAGS += -g -O0 -Werror -Wall</span><br><span class="line"></span><br><span class="line">LDFLAGS += -lpthread -static</span><br><span class="line"></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span>/<span class="variable">$(TARGET)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">	@gcc <span class="variable">$(OBJS)</span> <span class="variable">$(LDFLAGS)</span> -o <span class="variable">$@</span> </span><br><span class="line">	@echo Output <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span>/%.o: %.c | <span class="variable">$(BUILD_DIR)</span></span><br><span class="line">	@gcc <span class="variable">$(CFLAGS)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line">	@echo CC <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	cd build &amp;&amp; start awa_pc.exe</span><br><span class="line"></span><br><span class="line"><span class="variable">$(BUILD_DIR)</span> :</span><br><span class="line">	@mkdir <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -fR build</span><br></pre></td></tr></tbody></table></figure>
<h2 id="vpath-的使用">VPATH 的使用</h2>
<p>VPATH 直接指定一个搜索目录, 而 vpath
可以对搜索路径加入指定的过滤器，用于筛选指定文件名</p>
<p>src/Makefile</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">SRCS += a.c</span><br></pre></td></tr></tbody></table></figure>
<p>顶层 Makefile</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> src/Makefile</span><br><span class="line"></span><br><span class="line"><span class="comment"># VPATH = ./src</span></span><br><span class="line"><span class="keyword">vpath</span> %.c ./src</span><br><span class="line"></span><br><span class="line">SRCS += main.c</span><br><span class="line">OBJS = $(SRCS:%.c=%.o)</span><br><span class="line"></span><br><span class="line">CFLAGS += -I./src</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span></span></span><br><span class="line">	CC <span class="variable">$(OBJS)</span> -o a.exe</span><br></pre></td></tr></tbody></table></figure>
<p>OBJS 中的对象由 Makefile 自动推导，自动推导时 CFLAGS 可用于指定生成
.o 文件时的编译器参数</p>
<p>当然也可以自定义生成 OBJS 目标, 这时 CFLAGS 就可有可无了</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> src/Makefile</span><br><span class="line"></span><br><span class="line"><span class="comment"># VPATH = ./src</span></span><br><span class="line"><span class="keyword">vpath</span> %.c ./src</span><br><span class="line"></span><br><span class="line">SRCS += main.c</span><br><span class="line">OBJS = $(SRCS:%.c=%.o)</span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span></span></span><br><span class="line">	CC <span class="variable">$(OBJS)</span> -o a.exe</span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -I./src -c <span class="variable">$&lt;</span></span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Makefile/Makefile解析.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>构建工具</category>
        <category>Makefile</category>
      </categories>
      <tags>
        <tag>构建工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Cmake 模板</title>
    <url>/2023/01/17/auto/42/readme/</url>
    <content><![CDATA[<html><head></head><body><p>Cmake 模板 <span id="more"></span></p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.10</span>)</span><br><span class="line">project(temp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_C_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)</span><br><span class="line"></span><br><span class="line"># 源文件</span><br><span class="line">file(GLOB_RECURSE SOURCES  </span><br><span class="line">  <span class="string">"src/*.c"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 头文件路径</span><br><span class="line">include_directories(${SDL2_INCLUDE_DIRS})</span><br><span class="line">include_directories(${PROJECT_SOURCE_DIR})</span><br><span class="line"></span><br><span class="line"># 特定头文件</span><br><span class="line">file(GLOB_RECURSE INCLUDES </span><br><span class="line">    </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 环境变量</span><br><span class="line"><span class="built_in">set</span>(LIBS_SYSTEM ws2_32)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_C_FLAGS <span class="string">"-static"</span> )</span><br><span class="line"><span class="built_in">set</span>(CMAKE_BUILD_TYPE <span class="string">"Debug"</span>)   </span><br><span class="line"># SET(CMAKE_BUILD_TYPE <span class="string">"Release"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 可执行文件</span><br><span class="line">add_executable(a ${SOURCES} ${INCLUDES})</span><br><span class="line"></span><br><span class="line"># 链接库和依赖</span><br><span class="line"># find_package(SDL2 REQUIRED SDL2)</span><br><span class="line"># target_link_libraries(a PRIVATE SDL2::SDL2-<span class="type">static</span> paho-mqtt3c-<span class="type">static</span> ws2_32 winpthread)</span><br><span class="line"></span><br><span class="line"># 自定义目标</span><br><span class="line"># add_custom_target (run COMMAND ${EXECUTABLE_OUTPUT_PATH}/main)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1/">Effective
Modern CMake<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Cmake/模板/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Cmake</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>Cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>博客模板</title>
    <url>/2023/01/17/auto/48/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 <span id="more"></span></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Template/BlogTemp/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>博客模板</category>
      </categories>
      <tags>
        <tag>博客模板</tag>
      </tags>
  </entry>
  <entry>
    <title>模板</title>
    <url>/2023/01/15/auto/45/readme/</url>
    <content><![CDATA[<html><head></head><body><p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Latex/Demo/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂记, 文章</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言相关博客模板</title>
    <url>/2023/01/17/auto/49/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 <span id="more"></span></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Other/Template/C语言相关博客模板/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>模板</category>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows作为服务器远程控制</title>
    <url>/2023/01/16/auto/51/readme/</url>
    <content><![CDATA[<html><head></head><body><h2 id="开启-ssh-服务">开启 SSH 服务</h2>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查询是否安装</span></span><br><span class="line">Get-WindowsCapability -Online | ? Name -like <span class="string">'OpenSSH*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">Add-WindowsCapability -Online -Name OpenSSH.Server*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，或者 net start sshd</span></span><br><span class="line">Start-Service sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">Set-Service -Name sshd -StartupType <span class="string">'Automatic'</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="安装-ssh-和-wsl">安装 SSH 和 WSL</h4>
<p>修改 C:/ProgramData/ssh/sshd_config </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许公钥授权访问，确保条目不被注释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PubkeyAuthentication <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">授权文件存放位置，确保条目不被注释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">AuthorizedKeysFile	.ssh/authorized_keys</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选，关闭密码登录，提高安全性</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PasswordAuthentication no</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注释掉默认授权文件位置，确保以下条目被注释</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Match Group administrators</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys</span></span><br><span class="line"></span><br><span class="line">type C:/ProgramData/ssh/sshd_config</span><br><span class="line">echo PubkeyAuthentication yes &gt;&gt; C:\ProgramData\ssh\sshd_config</span><br><span class="line">echo ssh公钥 &gt; C:/ProgramData/ssh/administrators_authorized_keys</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入 powershell 重启sshd，需要管理员权限</span></span><br><span class="line">powershell</span><br><span class="line">Restart-Service sshd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如何设置环境变量, 例如</span></span><br><span class="line">set BAT_HOME=c:\bat</span><br><span class="line">setx PATH "%PATH%;D:\modules"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用适用于 Linux 的 Windows 子系统：打开powershell并输入：</span></span><br><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line"></span><br><span class="line">wsl --status </span><br><span class="line">wsl --set-default-version 2</span><br><span class="line">wsl --list --online</span><br><span class="line">wsl --install -d Ubuntu-20.04</span><br><span class="line"></span><br><span class="line">wget https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</span><br><span class="line">msiexec /package </span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="远程连接-wsl">远程连接 WSL</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install xrdp openssh-server</span><br><span class="line">service xrdp start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可查看端口和地址</span></span><br><span class="line">cat /var/log/xrdp.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有用户有效</span></span><br><span class="line">cd /usr/share/xsessions</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前用户</span></span><br><span class="line">vim ~/.xsession</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可在 xsession 中写入要启动的程序</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fluxbox, openbox, dwm, i3wm, fvwm, xterm, xclock</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于 xfce4</span></span><br><span class="line">echo xfce4-session &gt; ~/.xsession</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认打开浏览器</span></span><br><span class="line">xinit chromium-browser $* -- :0 vt$XDG_VTNR </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试 libdrm</span> </span><br><span class="line">apt-get install libdrm-tests</span><br><span class="line">export DISPLAY=localhost:10.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="通过脚本控制-进入-x11-后执行的脚本">通过脚本控制, 进入 x11
后执行的脚本</h4>
<p>vim ~/.xinitrc </p><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">HOST=`uname -n | sed 's/\..*$//'`</span><br><span class="line"></span><br><span class="line">xv -root -rmode 5 $HOME/misc/millennium/theme/Wallpaper.gif -quit &amp;</span><br><span class="line"></span><br><span class="line">xterm -geometry 80x24+0+85 \#52x71-104+0 -n $HOST -T $HOST &amp;</span><br><span class="line">xterm -geometry 80x24+510+429 \#52x71-52+0  -n $HOST -T $HOST &amp;</span><br><span class="line">xclock -digital -update 1 -geometry +1059+982 &amp;</span><br><span class="line">xscreensaver -nosplash &amp;</span><br><span class="line">exec /usr/local/lib/X11/fvwm/fvwm</span><br><span class="line"></span><br><span class="line">DISPLAY=:21</span><br><span class="line">vncserver -localhost -geometry 1920x1080  -SecurityTypes None $DISPLAY &amp;</span><br><span class="line">ssvnc $DISPLAY</span><br><span class="line">xterm &amp;</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="win-上的操作">WIN 上的操作</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要windowss 放行端口 https://blog.csdn.net/weixin_54227557/article/details/126836097</span></span><br><span class="line">netsh advfirewall firewall add rule name=WSL2 dir=in action=allow protocol=TCP localport=2202</span><br><span class="line">netsh advfirewall firewall add rule name=WSL2 dir=in action=allow protocol=TCP localport=3389</span><br><span class="line">netsh advfirewall firewall add rule name=WSL2 dir=in action=allow protocol=TCP localport=8888</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">端口映射</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=[win10端口] listenaddress=0.0.0.0 connectport=[虚拟机的端口] connectaddress=[虚拟机的ip]</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=2202 listenaddress=0.0.0.0 connectport=22 connectaddress=localhost</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=3389 listenaddress=0.0.0.0 connectport=3389 connectaddress=172.30.24.38</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=8888 listenaddress=0.0.0.0 connectport=8888 connectaddress=172.30.24.38</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看映射的端口</span></span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除端口映射</span></span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=[监听地址] listenport=[监听端口]</span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=3389</span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=2202</span><br><span class="line">netsh interface portproxy delete v4tov4 listenaddress=0.0.0.0 listenport=8888</span><br></pre></td></tr></tbody></table></figure>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Windows/Windows作为服务器远程控制/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Windows</category>
        <category>实践</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>远程控制</tag>
      </tags>
  </entry>
  <entry>
    <title>QEMU ARM64 仿真</title>
    <url>/2023/01/18/auto/50/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何通过 QEMU 仿真 ARM64 板子 <span id="more"></span></p>
<h1 id="qemu-arm64a">QEMU ARM64A</h1>
<p>测试环境 Win10 VMWare: Ubuntu18.04</p>
<h3 id="创建工作目录">1. 创建工作目录</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/lfs -p</span><br><span class="line"><span class="built_in">export</span> LFS=~/lfs</span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">$LFS</span>/src <span class="variable">$LFS</span>/rootfs <span class="variable">$LFS</span>/dst -p</span><br></pre></td></tr></tbody></table></figure>
<h3 id="构建-kernel">2. 构建 Kernel</h3>
<h5 id="下载源码">2.1 下载源码</h5>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$LFS</span>/src</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.18.2.tar.xz</span><br><span class="line">tar -xvf linux-5.18.2.tar.xz</span><br><span class="line"><span class="built_in">cd</span> linux-5.18.2</span><br></pre></td></tr></tbody></table></figure>
<h5 id="内核配置">2.2 内核配置</h5>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ARCH=arm64 </span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=aarch64-linux-gnu-</span><br><span class="line"></span><br><span class="line">make defconfig</span><br><span class="line">make menuconfig</span><br></pre></td></tr></tbody></table></figure>
<p>Linux arm 和 arm64 的 “defconfig” 应该包括 virtio 和 PCI
控制器的正确设备驱动程序；一些较旧的内核版本，尤其是 32 位
Arm，默认情况下并未启用所有功能。如果您没有看到您期望的 PCI
设备，请检查您的配置是否具有： </p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">CONFIG_PCI=y</span><br><span class="line">CONFIG_VIRTIO_PCI=y</span><br><span class="line">CONFIG_PCI_HOST_GENERIC=y</span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="虚拟机图形支持">2.3 虚拟机图形支持</h5>
<p>图形也可用，但与 x86 不同，没有启用默认显示设备：您应该从 “-device ?”
的显示设备部分选择打开。一个好的选择是使用： </p><figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">-device virtio-gpu-pci</span><br></pre></td></tr></tbody></table></figure> 并启用以下
Linux 内核选项（以及前面列出的通用 “virtio PCI for the virt machine”
选项）： <figure class="highlight php"><table><tbody><tr><td class="code"><pre><span class="line">CONFIG_DRM=y </span><br><span class="line">CONFIG_DRM_VIRTIO_GPU=y</span><br></pre></td></tr></tbody></table></figure><p></p>
<h5 id="编译导出内核镜像">2.4 编译导出内核镜像</h5>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> <span class="built_in">arch</span>/arm64/boot/Image <span class="variable">$LFS</span>/dst</span><br></pre></td></tr></tbody></table></figure>
<h3 id="制作根文件系统">3. 制作根文件系统</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 工具下载</span></span><br><span class="line">sudo apt-get install arch-install-scripts binfmt-support qemu-system-arm qemu-user-binfmt qemu-user-static</span><br><span class="line"></span><br><span class="line"><span class="comment"># 制作镜像</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=<span class="variable">$LFS</span>/dst/rootfs.img bs=1G count=4</span><br><span class="line">mkfs.ext4 <span class="variable">$LFS</span>/dst/rootfs.img</span><br><span class="line">sudo mount -o loop <span class="variable">$LFS</span>/dst/rootfs.img /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压 Ubuntu base</span></span><br><span class="line">wget -P <span class="variable">$LFS</span>/src -c https://cdimage.ubuntu.com/ubuntu-base/releases/18.04/release/ubuntu-base-18.04.5-base-armhf.tar.gz</span><br><span class="line">sudo tar -pxf <span class="variable">$LFS</span>/src/ubuntu-base-18.04.5-base-armhf.tar.gz -C /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 chroot &gt;&gt;&gt;</span></span><br><span class="line">sudo arch-chroot /mnt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必备软件下载</span></span><br><span class="line">sed -i <span class="string">'s/ports.ubuntu.com/mirrors.ustc.edu.cn/g'</span> /etc/apt/sources.list</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install systemd vim net-tools dhcpcd5 kmod </span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选下载 (可在启动后再安装)</span></span><br><span class="line">apt-get install qt5-defeault libsdl2-dev libsdl-dev libdrm-tests git gcc make openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加串口服务</span></span><br><span class="line"><span class="built_in">ln</span> -s /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@ttyAMA0.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认登录用户为 root 且免密登录</span></span><br><span class="line">vim /lib/systemd/system/getty@.service</span><br><span class="line"><span class="comment"># 替换该行 ExecStart=-/sbin/agetty --autologin root --noclear %I $TERM</span></span><br><span class="line"></span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment"># 127.0.0.1     localhost</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 离开 chroot &lt;&lt;&lt;</span></span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></tbody></table></figure>
<h3 id="启动参数">4. 启动参数</h3>
<p>基本启动参数</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">qemu-system-aarch64         \</span><br><span class="line">    -M  virt                \</span><br><span class="line">    -cpu cortex-a53         \</span><br><span class="line">    -smp 2                  \</span><br><span class="line">    -m 4096M                \</span><br><span class="line">    -kernel <span class="variable">$LFS</span>/dst/Image  \</span><br><span class="line">    -nographic              \</span><br><span class="line">    -net nic -net user,hostfwd=tcp::10021-:22 \</span><br><span class="line">    -append <span class="string">"root=/dev/vda rw rootfstype=ext4 console=ttyAMA0 ignore_loglevel"</span> \</span><br><span class="line">    -drive <span class="keyword">if</span>=none,file=<span class="variable">$LFS</span>/dst/rootfs.img,<span class="built_in">id</span>=hd0 \</span><br><span class="line">    -device virtio-blk-device,drive=hd0</span><br></pre></td></tr></tbody></table></figure>
<p>可选参数 </p><figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要连接网络或通过 ssh 远程操作时</span></span><br><span class="line">-net nic -net user,hostfwd=tcp::10021-:22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动图形时, 将当前终端作为模拟串口</span></span><br><span class="line">-serial stdio</span><br><span class="line"></span><br><span class="line">-usb</span><br><span class="line">-device nec-usb-xhci</span><br><span class="line">-device usb-host,hostbus=2,hostaddr=1</span><br><span class="line">-device usb-mouse</span><br><span class="line">-device usb-kbd</span><br><span class="line">-show-cursor</span><br><span class="line">-fsdev <span class="built_in">local</span>,security_model=passthrough,<span class="built_in">id</span>=fsdev0,path=/nfsroot</span><br><span class="line">-device virtio-9p-pci,<span class="built_in">id</span>=fs0,fsdev=fsdev0,mount_tag=hostshare</span><br></pre></td></tr></tbody></table></figure><p></p>
<h3 id="远程登录">5. 远程登录</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保 QEMU 启动时带如下参数, 并且 root 设置了密码 passwd</span></span><br><span class="line">-net nic -net user,hostfwd=tcp::10021-:22</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 openssh-server 和配置 sshd</span></span><br><span class="line">apt-get install openssh-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 PermitRootLogin 改成 <span class="built_in">yes</span></span></span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后重启 sshd, 如果出错使用 sshd -T 查看原因</span></span><br><span class="line">service sshd restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">远程登录</span></span><br><span class="line">ssh root@localhost -p 10021</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传文件</span></span><br><span class="line">scp -P 10021 xxx root@localhost:/root</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">免密登录 <span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span></span><br><span class="line">ssh-keygen</span><br><span class="line">vim authorized_keys</span><br></pre></td></tr></tbody></table></figure>
<h3 id="本机模块编译">6. 本机模块编译</h3>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 要在本机编译模块, 需拷贝整个源码 (此方法待商榷)</span></span><br><span class="line">sudo mount -o loop <span class="variable">$LFS</span>/dst/rootfs.img /mnt</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$LFS</span>/src/linux-5.18.2</span><br><span class="line">make modules</span><br><span class="line">make modules_install INSTALL_MOD_PATH=./outlib</span><br><span class="line">make headers_install INSTALL_HDR_PATH=./outheader</span><br><span class="line">sudo <span class="built_in">cp</span> -a outlib/lib/modules /mnt/lib</span><br><span class="line">sudo <span class="built_in">cp</span> -a outheader/include /mnt/usr/include</span><br><span class="line">make clean</span><br><span class="line">sudo <span class="built_in">cp</span> -r <span class="variable">$LFS</span>/src/linux-5.18.2 /mnt/usr/src</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; 在新的 host 中重新生成脚本</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/src/linux-5.18.2 /lib/modules/`<span class="built_in">uname</span> -r`/build</span><br><span class="line">apt-get install flex bison bc</span><br><span class="line">make scripts</span><br><span class="line"><span class="comment"># 还是需要 make 一下的, 要生成一些 hostcc 的东西, scripts 执行生成不全. 执行到内核源码编译时就可以直接停止掉了</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接从源代码中执行, 但是需要从之前编译中获取 .config 和 Module.symvers 放在源码目录中</span></span><br><span class="line"><span class="comment"># 参考 https://unix.stackexchange.com/questions/270123/how-to-create-usr-src-linux-headers-version-files</span></span><br><span class="line"><span class="comment"># 然后执行</span></span><br><span class="line">make modules_prepare</span><br></pre></td></tr></tbody></table></figure>
<h3 id="测试图形">7. 测试图形</h3>
<h5 id="测试-libdrm">1. 测试 libdrm</h5>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install libdrm-tests</span><br><span class="line">modetest -M virtio_gpu -s 36@35:640x480</span><br></pre></td></tr></tbody></table></figure>
<h5 id="测试-frambuffer">2. 测试 frambuffer</h5>
<p>fbtest.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i, j, fd, var;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fb_var_screeninfo</span> <span class="title">vinfo</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fb_fix_screeninfo</span> <span class="title">finfo</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Example: %s /dev/fb0\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_RDWR);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Can't open file %s: %s\n"</span>, argv[<span class="number">1</span>], strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get variable screen information */</span></span><br><span class="line">    <span class="keyword">if</span> (ioctl(fd, FBIOGET_VSCREENINFO, &amp;vinfo))</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"Can't get FBIOGET_VSCREENINFO"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Get fixed screen information */</span></span><br><span class="line">    <span class="keyword">if</span> (ioctl(fd, FBIOGET_FSCREENINFO, &amp;finfo))</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"Can't get FBIOGET_VSCREENINFO"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* show these information*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"vinfo.xres          = %d\n"</span>, vinfo.xres);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"vinfo.yres          = %d\n"</span>, vinfo.yres);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"vinfo.bits_per_bits = %d\n"</span>, vinfo.bits_per_pixel);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"vinfo.xoffset       = %d\n"</span>, vinfo.xoffset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"vinfo.yoffset       = %d\n"</span>, vinfo.yoffset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"finfo.line_length   = %d\n"</span>, finfo.line_length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Figure out the size of the screen in bytes */</span></span><br><span class="line">    <span class="type">int</span> screensize = vinfo.xres * vinfo.yres * vinfo.bits_per_pixel / <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Map the device to memory */</span></span><br><span class="line">    <span class="type">char</span> *fbp = mmap(<span class="number">0</span>, screensize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fbp == MAP_FAILED)</span><br><span class="line">    {</span><br><span class="line">        perror(<span class="string">"mmap error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(fbp, <span class="number">0xff</span>, screensize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Where we are going to put the pixel */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; vinfo.xres; x++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">0</span>; y &lt; vinfo.yres; y++)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> location = (x + vinfo.xoffset) * (vinfo.bits_per_pixel / <span class="number">8</span>) +</span><br><span class="line">                       (y + vinfo.yoffset) * finfo.line_length;</span><br><span class="line"></span><br><span class="line">            *(fbp + location) = <span class="number">0xff</span>; <span class="comment">/*  blue */</span></span><br><span class="line">            *(fbp + location + <span class="number">1</span>) = <span class="number">0x00</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* release the memory */</span></span><br><span class="line">    munmap(fbp, screensize); </span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"all ok\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>编译运行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install gcc</span><br><span class="line">gcc fbtest.c</span><br><span class="line">./a.out</span><br></pre></td></tr></tbody></table></figure>
<h5 id="测试-qt-基于-frambuffer">3. 测试 QT (基于 frambuffer)</h5>
<p>main.cpp</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span><br><span class="line">{</span><br><span class="line">    QApplication <span class="title function_">a</span><span class="params">(argc, argv)</span>;</span><br><span class="line">    </span><br><span class="line">    QLabel *label = new QLabel(<span class="string">"Hello, world!"</span>);</span><br><span class="line">    label-&gt;show();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>demo.pro</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">QT += core gui widgets</span><br><span class="line">TARGET = qtdemo</span><br><span class="line">SOURCES += main.cpp</span><br></pre></td></tr></tbody></table></figure>
<p>编译运行</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install qt5-default g++ make</span><br><span class="line">qmake &amp;&amp; make -j8</span><br><span class="line">export QT_QPA_PLATFORM=linuxfb:tty=/dev/fb0</span><br><span class="line">export QT_QPA_GENERIC_PLUGINS=evdevmouse:/dev/input/event2,evdevkeyboard:/dev/input/event1</span><br><span class="line">./qtdemo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更多 QT 选项</span></span><br><span class="line">export QTDIR=/usr/lib/qt5</span><br><span class="line">export QT_QPA_PLATFORM_PLUGIN_PATH=$QTDIR/plugins</span><br><span class="line">export QT_QPA_PLATFORM=eglfs:fb=/dev/fb0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">触摸设备支持 evdevtouch 或 tslib</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">evdevtouch:/dev/input/event1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tslib:/dev/input/ts0</span></span><br><span class="line">export QT_QPAFONTDIR=/usr/lib/fonts</span><br><span class="line">export QML2_IMPORT_PATH=$QTDIR/qml</span><br></pre></td></tr></tbody></table></figure>
<h2 id="参考文献">参考文献</h2>
<ul>
<li>https://wiki.qemu.org/Documentation/Platforms/ARM</li>
<li>https://www.cnblogs.com/pengdonglin137/p/6431234.html</li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Virtual/Qemu/ARM64/01UbuntuBase/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>QEMU</category>
        <category>ARM64</category>
      </categories>
      <tags>
        <tag>QEMU</tag>
        <tag>仿真</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows自动查找程序dll依赖</title>
    <url>/2023/02/18/auto/52/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍在Windows开发中如何自动查找程序的dll依赖
<span id="more"></span></p>
<p>Windows 程序在发布的时候往往需要很多第三方 dll 依赖,
而这些依赖一般都在开发环境中, 需要一个一个拷贝到程序目录中, 比较的麻烦.
有一些开发平台会提供程序的打包命令,
当用户执行打包命令时会自动将所有依赖拷贝到程序所在目录中, 例如: QT 的
<code>windeployqt.exe</code> 工具, 但你会发现 windeployqt
有时候并没有能够给出所有依赖, 它只是给出了与 QT 自身相关的依赖,
如果你使用了非 QT 的第三方库, 则 windeployqt 可能也找不到.</p>
<p>不过有一个较为实用的技巧是直接将开发环境中bin目录下的所有文件都拷贝到程序目录中，然后运行该程序,
程序运行后选择所有之前拷贝的文件并将其删除,
能够删掉的说明不是该程序的依赖, 最后留下的一定就是当前程序的依赖了,
如此一来程序的所有依赖就都凑齐了.</p>
<p>当然上面的技巧是一种比较笨的办法,
下面介绍的脚本可以较为方便地尽量凑齐所有依赖,
当然除了个别比较特殊难找的依赖外, 如果实在找不到那就只能手动复制了.</p>
<p>find_dll.sh</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!bash</span></span><br><span class="line"></span><br><span class="line">notfounddlls='KERNEL32.dll'</span><br><span class="line">dllbase=/mingw64/bin/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@breif 对给定路径下的可执行文件进行依赖查找和拷贝</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@param <span class="variable">$1</span> 可执行文件所在的路径</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">@<span class="built_in">return</span> none</span></span><br><span class="line">function find_dll</span><br><span class="line">{</span><br><span class="line">    if [ "$1" == "" ]; then</span><br><span class="line">        return</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    local path=$1</span><br><span class="line"></span><br><span class="line">    nc=1</span><br><span class="line">    while [ $nc -gt 0 ]; do</span><br><span class="line">        nc=0</span><br><span class="line">        # 遍历给定目录下的所有 .exe 和 .dll 文件</span><br><span class="line">        for f in $path/*.exe $path/*.dll; do</span><br><span class="line">            # 遍历当前 .exe 和 .dll 文件的所有 dll 依赖</span><br><span class="line">            for dep in $(strings $f | grep -i '\.dll$'); do</span><br><span class="line">                # 当前路径下还没有该 dll 依赖, 则进行处理</span><br><span class="line">                if [ ! -e $path/$dep ]; then</span><br><span class="line">                    # 判断当前依赖是否是在 notfounddlls 列表中</span><br><span class="line">                    # 在列表中就说明之前找过, 但是没有找打, 因此也不必再找了</span><br><span class="line">                    echo $notfounddlls | grep -iw $dep &gt;/dev/null</span><br><span class="line">                    if [ $? -ne 0 ]; then</span><br><span class="line">                        # 查找 dll 库是否有该 dll 依赖, 有则拷贝到给定目录下</span><br><span class="line">                        # 没有就放到 notfounddlls 列表</span><br><span class="line">                        dllloc=$(find $dllbase -iname $dep)</span><br><span class="line">                        if [ ! -z "$dllloc" ]; then</span><br><span class="line">                            cp $dllloc $path</span><br><span class="line">                            echo "Copying "$(basename $dllloc)</span><br><span class="line">                            nc=$(($nc + 1))</span><br><span class="line">                        else</span><br><span class="line">                            notfounddlls="$notfounddlls $dep"</span><br><span class="line">                        fi</span><br><span class="line">                    fi</span><br><span class="line">                fi</span><br><span class="line">            done</span><br><span class="line">        done</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    echo "System DLLS: "$notfounddlls</span><br><span class="line">}</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">main 函数</span></span><br><span class="line">function main</span><br><span class="line">{</span><br><span class="line">    local path=$PWD</span><br><span class="line"></span><br><span class="line">    if [ "$1" == "-h" ]; then</span><br><span class="line">        echo "Usage: $0 [path]"</span><br><span class="line">        echo "    Find all dll dependencies of an executable file under a given &lt;path&gt;."</span><br><span class="line">        echo "    If no path parameter is given, the current call path is used."</span><br><span class="line">        return</span><br><span class="line">    elif [ "$1" != "" ]; then</span><br><span class="line">        path=$path/$1</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    find_dll $path</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">main $@</span><br></pre></td></tr></tbody></table></figure>
<h4 id="参考文献">参考文献</h4>
<p><a class="link" href="https://stackoverflow.com/questions/11703000/finding-dlls-required-of-a-win-exe-on-linux-cross-compiled-with-mingw">Finding
DLLs required of a Win exe on Linux (cross-compiled with mingw)?<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Windows/Windows自动查找程序dll依赖/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>在终端中获取鼠标</title>
    <url>/2023/01/17/auto/53/readme/</url>
    <content><![CDATA[<html><head></head><body><p>介绍如何在 Windows 中通过 C 实现终端获取鼠标坐标</p>
<span id="more"></span>
<blockquote>
<p>注: 编译后需要右击最上面的边框-&gt;属性-&gt;选项,
去掉快速编辑模式(可能需要重新启动程序?)</p>
</blockquote>
<p>main.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gotoxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setcolor</span><span class="params">(WORD color)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setForeGroundAndBackGroundColor</span><span class="params">(<span class="type">int</span> ForeGroundColor, <span class="type">int</span> BackGroundColor)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clearscreen</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawpixel</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y, <span class="type">unsigned</span> <span class="type">char</span> Color)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawpixel2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y, <span class="type">unsigned</span> <span class="type">char</span> Color, <span class="type">char</span> character)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawcircle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> color)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawline</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> color)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawfilledrectangle</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x1, <span class="type">unsigned</span> <span class="type">char</span> y1, <span class="type">unsigned</span> <span class="type">char</span> x2, <span class="type">unsigned</span> <span class="type">char</span> y2, <span class="type">unsigned</span> <span class="type">char</span> bkcol)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawframe</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y, <span class="type">unsigned</span> sx, <span class="type">unsigned</span> sy, <span class="type">unsigned</span> <span class="type">char</span> col, <span class="type">unsigned</span> <span class="type">char</span> col2, <span class="type">char</span> text_[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">drawwindow</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y, <span class="type">unsigned</span> sx, <span class="type">unsigned</span> sy, <span class="type">unsigned</span> <span class="type">char</span> col, <span class="type">unsigned</span> <span class="type">char</span> col2, <span class="type">unsigned</span> <span class="type">char</span> bkcol, <span class="type">char</span> text_[])</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    gotoxy(<span class="number">1</span>, <span class="number">23</span>);</span><br><span class="line">    setcolor(<span class="number">7</span>);</span><br><span class="line">    clearscreen();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"click anywhere in console window to write - hello world -\n\n\n\n\n\n\n\n\n\n\n\n\n"</span></span><br><span class="line">           <span class="string">"Press Ctrl+C to Exit"</span>);</span><br><span class="line"></span><br><span class="line">    HANDLE hout = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    HANDLE hin = GetStdHandle(STD_INPUT_HANDLE);</span><br><span class="line">    INPUT_RECORD InputRecord;</span><br><span class="line">    DWORD Events;</span><br><span class="line">    COORD coord;</span><br><span class="line">    CONSOLE_CURSOR_INFO cci;</span><br><span class="line">    cci.dwSize = <span class="number">25</span>;</span><br><span class="line">    cci.bVisible = FALSE;</span><br><span class="line">    SetConsoleCursorInfo(hout, &amp;cci);</span><br><span class="line">    SetConsoleMode(hin, ENABLE_PROCESSED_INPUT | ENABLE_MOUSE_INPUT);</span><br><span class="line">    <span class="type">bool</span> EXITGAME = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> buttonX = <span class="number">1</span>, buttonY = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    drawpixel(buttonX, buttonY, <span class="number">1</span>);</span><br><span class="line">    gotoxy(buttonX + <span class="number">2</span>, buttonY);</span><br><span class="line">    setcolor(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&lt;----- a button \n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!EXITGAME)</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        ReadConsoleInput(hin, &amp;InputRecord, <span class="number">1</span>, &amp;Events);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (InputRecord.EventType)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> KEY_EVENT: <span class="comment">// keyboard input</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (InputRecord.Event.KeyEvent.wVirtualKeyCode)</span><br><span class="line">            {</span><br><span class="line">            <span class="keyword">case</span> VK_ESCAPE:</span><br><span class="line">                EXITGAME = TRUE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> VK_SPACE:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> VK_RETURN:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> VK_LEFT:</span><br><span class="line">                <span class="comment">// left key   move player left</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"VK_LEFT   = %d\n"</span>, InputRecord.Event.KeyEvent.wVirtualKeyCode);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> VK_RIGHT:</span><br><span class="line">                <span class="comment">// right key   move player right</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"VK_RIGHT   = %d\n"</span>, InputRecord.Event.KeyEvent.wVirtualKeyCode);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> VK_UP:</span><br><span class="line">                <span class="comment">// up key   move player up</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"VK_UP   = %d\n"</span>, InputRecord.Event.KeyEvent.wVirtualKeyCode);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> VK_DOWN:</span><br><span class="line">                <span class="comment">// up key   move player down</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"VK_DOWN   = %d\n"</span>, InputRecord.Event.KeyEvent.wVirtualKeyCode);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            } <span class="comment">// switch</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//---------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MOUSE_EVENT: <span class="comment">// mouse input</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (InputRecord.Event.MouseEvent.dwButtonState == FROM_LEFT_1ST_BUTTON_PRESSED)</span><br><span class="line">            {</span><br><span class="line">                coord.X = InputRecord.Event.MouseEvent.dwMousePosition.X;</span><br><span class="line">                coord.Y = InputRecord.Event.MouseEvent.dwMousePosition.Y;</span><br><span class="line">                SetConsoleCursorPosition(hout, coord);</span><br><span class="line">                SetConsoleTextAttribute(hout, rand() % <span class="number">7</span> + <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((InputRecord.Event.MouseEvent.dwMousePosition.X == buttonX) &amp;&amp;</span><br><span class="line">                    (InputRecord.Event.MouseEvent.dwMousePosition.Y == buttonY))</span><br><span class="line">                {</span><br><span class="line"></span><br><span class="line">                    clearscreen();</span><br><span class="line">                    gotoxy(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                    setcolor(<span class="number">7</span>);</span><br><span class="line">                    drawpixel(buttonX, buttonY, <span class="number">1</span>);</span><br><span class="line">                    setcolor(<span class="number">3</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">" mybutton was pressed \n"</span>);</span><br><span class="line">                    setcolor(<span class="number">7</span>);</span><br><span class="line">                    Sleep(<span class="number">500</span>);</span><br><span class="line">                    drawpixel(buttonX, buttonY, <span class="number">1</span>);</span><br><span class="line">                    gotoxy(buttonX + <span class="number">2</span>, buttonY);</span><br><span class="line">                    setcolor(<span class="number">3</span>);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"&lt;----- a button      \n"</span>);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Hello world at %d x %d"</span>, InputRecord.Event.MouseEvent.dwMousePosition.X,</span><br><span class="line">                    InputRecord.Event.MouseEvent.dwMousePosition.Y);</span><br><span class="line">                </span><br><span class="line">            } <span class="comment">// mouse</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> WINDOW_BUFFER_SIZE_EVENT: <span class="comment">// scrn buf. resizing</span></span><br><span class="line">            ;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> FOCUS_EVENT: <span class="comment">// disregard focus events</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> MENU_EVENT: <span class="comment">// disregard menu events</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Unknown event type \n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        FlushConsoleInputBuffer(hin);</span><br><span class="line">    }</span><br><span class="line">    gotoxy(<span class="number">1</span>, <span class="number">23</span>);</span><br><span class="line">    setcolor(<span class="number">7</span>);</span><br><span class="line">    clearscreen();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">gotoxy</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">{</span><br><span class="line">    COORD coord;</span><br><span class="line">    coord.X = x;</span><br><span class="line">    coord.Y = y;</span><br><span class="line">    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setcolor</span><span class="params">(WORD color)</span></span><br><span class="line">{</span><br><span class="line">    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     colors:</span></span><br><span class="line"><span class="comment">//     0 = Black</span></span><br><span class="line"><span class="comment">//     1 = Blue</span></span><br><span class="line"><span class="comment">//     2 = Green</span></span><br><span class="line"><span class="comment">//     3 = Cyan</span></span><br><span class="line"><span class="comment">//     4 = Red</span></span><br><span class="line"><span class="comment">//     5 = Magenta</span></span><br><span class="line"><span class="comment">//     6 = Yellow</span></span><br><span class="line"><span class="comment">//     7 = LightGray</span></span><br><span class="line"><span class="comment">//     8 = DarkGray</span></span><br><span class="line"><span class="comment">//     9 = LightBlue</span></span><br><span class="line"><span class="comment">//     10 = LightGreen</span></span><br><span class="line"><span class="comment">//     11 = LightCyan</span></span><br><span class="line"><span class="comment">//     12 = LightRed</span></span><br><span class="line"><span class="comment">//     13 = LightMagenta</span></span><br><span class="line"><span class="comment">//     14 = LightYellow</span></span><br><span class="line"><span class="comment">//     15 = White</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setForeGroundAndBackGroundColor</span><span class="params">(<span class="type">int</span> ForeGroundColor, <span class="type">int</span> BackGroundColor)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> color = <span class="number">16</span> * BackGroundColor + ForeGroundColor;</span><br><span class="line">    setcolor(color);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearscreen</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    COORD coordScreen = {<span class="number">0</span>, <span class="number">0</span>};</span><br><span class="line">    DWORD cCharsWritten;</span><br><span class="line">    CONSOLE_SCREEN_BUFFER_INFO csbi;</span><br><span class="line">    DWORD dwConSize;</span><br><span class="line">    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line"></span><br><span class="line">    GetConsoleScreenBufferInfo(hConsole, &amp;csbi);</span><br><span class="line">    dwConSize = csbi.dwSize.X * csbi.dwSize.Y;</span><br><span class="line">    FillConsoleOutputCharacter(hConsole, TEXT(<span class="string">' '</span>), dwConSize, coordScreen, &amp;cCharsWritten);</span><br><span class="line">    GetConsoleScreenBufferInfo(hConsole, &amp;csbi);</span><br><span class="line">    FillConsoleOutputAttribute(hConsole, csbi.wAttributes, dwConSize, coordScreen, &amp;cCharsWritten);</span><br><span class="line">    SetConsoleCursorPosition(hConsole, coordScreen);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawpixel</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y, <span class="type">unsigned</span> <span class="type">char</span> Color)</span></span><br><span class="line">{</span><br><span class="line">    setcolor(Color);</span><br><span class="line">    gotoxy(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Û"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawpixel2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y, <span class="type">unsigned</span> <span class="type">char</span> Color, <span class="type">char</span> character)</span></span><br><span class="line">{</span><br><span class="line">    setcolor(Color);</span><br><span class="line">    gotoxy(x, y);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, character);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawcircle</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> color)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> wx, wy;</span><br><span class="line">    <span class="type">int</span> thresh;</span><br><span class="line">    <span class="type">int</span> asq = a * a;</span><br><span class="line">    <span class="type">int</span> bsq = b * b;</span><br><span class="line">    <span class="type">int</span> xa, ya;</span><br><span class="line"></span><br><span class="line">    drawpixel(x, y + b, color);</span><br><span class="line">    drawpixel(x, y - b, color);</span><br><span class="line"></span><br><span class="line">    wx = <span class="number">0</span>;</span><br><span class="line">    wy = b;</span><br><span class="line">    xa = <span class="number">0</span>;</span><br><span class="line">    ya = asq * <span class="number">2</span> * b;</span><br><span class="line">    thresh = asq / <span class="number">4</span> - asq * b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    {</span><br><span class="line">        thresh += xa + bsq;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (thresh &gt;= <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            ya -= asq * <span class="number">2</span>;</span><br><span class="line">            thresh -= ya;</span><br><span class="line">            wy--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        xa += bsq * <span class="number">2</span>;</span><br><span class="line">        wx++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (xa &gt;= ya)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        drawpixel(x + wx, y - wy, color);</span><br><span class="line">        drawpixel(x - wx, y - wy, color);</span><br><span class="line">        drawpixel(x + wx, y + wy, color);</span><br><span class="line">        drawpixel(x - wx, y + wy, color);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    drawpixel(x + a, y, color);</span><br><span class="line">    drawpixel(x - a, y, color);</span><br><span class="line"></span><br><span class="line">    wx = a;</span><br><span class="line">    wy = <span class="number">0</span>;</span><br><span class="line">    xa = bsq * <span class="number">2</span> * a;</span><br><span class="line"></span><br><span class="line">    ya = <span class="number">0</span>;</span><br><span class="line">    thresh = bsq / <span class="number">4</span> - bsq * a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    {</span><br><span class="line">        thresh += ya + asq;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (thresh &gt;= <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            xa -= bsq * <span class="number">2</span>;</span><br><span class="line">            thresh = thresh - xa;</span><br><span class="line">            wx--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        ya += asq * <span class="number">2</span>;</span><br><span class="line">        wy++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ya &gt; xa)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        drawpixel(x + wx, y - wy, color);</span><br><span class="line">        drawpixel(x - wx, y - wy, color);</span><br><span class="line">        drawpixel(x + wx, y + wy, color);</span><br><span class="line">        drawpixel(x - wx, y + wy, color);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawline</span><span class="params">(<span class="type">int</span> x0, <span class="type">int</span> y0, <span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> color)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> pix = color;</span><br><span class="line">    <span class="type">int</span> dy = y1 - y0;</span><br><span class="line">    <span class="type">int</span> dx = x1 - x0;</span><br><span class="line">    <span class="type">int</span> stepx, stepy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dy &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        dy = -dy;</span><br><span class="line">        stepy = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        stepy = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (dx &lt; <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        dx = -dx;</span><br><span class="line">        stepx = <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        stepx = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    dy &lt;&lt;= <span class="number">1</span>; <span class="comment">// dy is now 2*dy</span></span><br><span class="line">    dx &lt;&lt;= <span class="number">1</span>; <span class="comment">// dx is now 2*dx</span></span><br><span class="line"></span><br><span class="line">    drawpixel(x0, y0, pix);</span><br><span class="line">    <span class="keyword">if</span> (dx &gt; dy)</span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> fraction = dy - (dx &gt;&gt; <span class="number">1</span>); <span class="comment">// same as 2*dy - dx</span></span><br><span class="line">        <span class="keyword">while</span> (x0 != x1)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (fraction &gt;= <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                y0 += stepy;</span><br><span class="line">                fraction -= dx; <span class="comment">// same as fraction -= 2*dx</span></span><br><span class="line">            }</span><br><span class="line">            x0 += stepx;</span><br><span class="line">            fraction += dy; <span class="comment">// same as fraction -= 2*dy</span></span><br><span class="line">            drawpixel(x0, y0, pix);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="type">int</span> fraction = dx - (dy &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (y0 != y1)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (fraction &gt;= <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                x0 += stepx;</span><br><span class="line">                fraction -= dy;</span><br><span class="line">            }</span><br><span class="line">            y0 += stepy;</span><br><span class="line">            fraction += dx;</span><br><span class="line">            drawpixel(x0, y0, pix);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawframe</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y, <span class="type">unsigned</span> sx, <span class="type">unsigned</span> sy, <span class="type">unsigned</span> <span class="type">char</span> col, <span class="type">unsigned</span> <span class="type">char</span> col2, <span class="type">char</span> text_[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> i, j, m;</span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        m = (sx - x); <span class="comment">// differential</span></span><br><span class="line">        j = m / <span class="number">8</span>;    <span class="comment">// adjust</span></span><br><span class="line">        j = j - <span class="number">1</span>;    <span class="comment">// more adjustment</span></span><br><span class="line">        gotoxy(x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"É"</span>); <span class="comment">// Top left corner of drawframe</span></span><br><span class="line">        gotoxy(sx, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"»"</span>); <span class="comment">// Top right corner of drawframe</span></span><br><span class="line">        gotoxy(x, sy);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"È"</span>); <span class="comment">// Bottom left corner of drawframe</span></span><br><span class="line">        gotoxy(sx, sy);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"¼"</span>); <span class="comment">// Bottom right corner of drawframe</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = x + <span class="number">1</span>; i &lt; sx; i++)</span><br><span class="line">        {</span><br><span class="line">            gotoxy(i, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Í"</span>); <span class="comment">// Top horizontol line</span></span><br><span class="line">            gotoxy(i, sy);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Í"</span>); <span class="comment">// Bottom Horizontal line</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = y + <span class="number">1</span>; i &lt; sy; i++)</span><br><span class="line">        {</span><br><span class="line">            gotoxy(x, i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"º"</span>); <span class="comment">// Left Vertical line</span></span><br><span class="line">            gotoxy(sx, i);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"º"</span>); <span class="comment">// Right Vertical Line</span></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        gotoxy(x + j, y);</span><br><span class="line">        <span class="built_in">printf</span>(text_); <span class="comment">// put Title</span></span><br><span class="line">        gotoxy(<span class="number">1</span>, <span class="number">24</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawfilledrectangle</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x1, <span class="type">unsigned</span> <span class="type">char</span> y1, <span class="type">unsigned</span> <span class="type">char</span> x2, <span class="type">unsigned</span> <span class="type">char</span> y2, <span class="type">unsigned</span> <span class="type">char</span> bkcol)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    setcolor(bkcol); <span class="comment">// Set to color bkcol</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (y = y1; y &lt; y2; y++)</span><br><span class="line">    { <span class="comment">// Fill Y Region Loop</span></span><br><span class="line">        <span class="keyword">for</span> (x = x1; x &lt; x2; x++)</span><br><span class="line">        { <span class="comment">// Fill X region Loop</span></span><br><span class="line">            gotoxy(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">" "</span>); <span class="comment">// Draw Solid space</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawwindow</span><span class="params">(<span class="type">unsigned</span> x, <span class="type">unsigned</span> y, <span class="type">unsigned</span> sx, <span class="type">unsigned</span> sy,</span></span><br><span class="line"><span class="params">                <span class="type">unsigned</span> <span class="type">char</span> col, <span class="type">unsigned</span> <span class="type">char</span> col2, <span class="type">unsigned</span> <span class="type">char</span> bkcol, <span class="type">char</span> text_[])</span></span><br><span class="line">{</span><br><span class="line">    drawfilledrectangle(x, y, sx, sy, bkcol);</span><br><span class="line">    drawframe(x, y, sx, sy, col, col2, text_);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//*****************************************************************************</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">drawcolorpalette</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            setForeGroundAndBackGroundColor(i, j);</span><br><span class="line">            gotoxy(i * <span class="number">4</span>, j);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, (i * j) + <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Windows/在终端中获取鼠标/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Windows</category>
        <category>终端</category>
      </categories>
      <tags>
        <tag>终端， 小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>终端串口打印程序</title>
    <url>/2023/01/16/auto/54/readme/</url>
    <content><![CDATA[<html><head></head><body><p>实现一个终端串口打印程序</p>
<p>serial.c </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libserialport.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sp_port</span> *<span class="title">port</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> connected = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">serialport_connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *port_name)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span>(port != <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        sp_close(port);</span><br><span class="line">        sp_free_port(port);</span><br><span class="line">        port = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    sp_get_port_by_name(port_name, &amp;port);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = sp_open(port, SP_MODE_READ_WRITE);</span><br><span class="line">    <span class="keyword">if</span>(res != SP_OK)</span><br><span class="line">    {</span><br><span class="line">        sp_free_port(port);</span><br><span class="line">        port = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    sp_set_baudrate(port, <span class="number">115200</span>);</span><br><span class="line">    sp_set_bits(port, <span class="number">8</span>);</span><br><span class="line">    sp_set_parity(port, SP_PARITY_NONE);</span><br><span class="line">    sp_set_stopbits(port, <span class="number">1</span>);</span><br><span class="line">    sp_set_flowcontrol(port, SP_FLOWCONTROL_NONE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 连接到第一个扫描到的串口 */</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> <span class="title function_">serialport_connect_to_available</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sp_port</span> **<span class="title">port_list</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">sp_return</span> <span class="title">result</span> =</span> sp_list_ports(&amp;port_list);</span><br><span class="line">	<span class="keyword">if</span> (result != SP_OK) {</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; port_list[i] != <span class="literal">NULL</span>; i++) </span><br><span class="line">    {</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">sp_port</span> *<span class="title">port</span> =</span> port_list[i];</span><br><span class="line">		<span class="type">char</span> *port_name = sp_get_port_name(port);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> r = serialport_connect(port_name);</span><br><span class="line">        <span class="keyword">if</span>(r == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n连接到串口 %s\n\n"</span>, port_name);</span><br><span class="line">            </span><br><span class="line">            sp_free_port_list(port_list);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">    sp_free_port_list(port_list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">serial_write_task</span><span class="params">(<span class="type">void</span> * arg)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">8192</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        gets(buf);</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        buf[n++] = <span class="string">'\r'</span>;</span><br><span class="line">        buf[n++] = <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span>(connected)</span><br><span class="line">        {</span><br><span class="line">            sp_blocking_write(port, buf, n, <span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">    SetConsoleOutputCP(<span class="number">65001</span>);</span><br><span class="line">    <span class="comment">// HANDLE hInput = GetStdHandle(STD_INPUT_HANDLE);</span></span><br><span class="line">    <span class="comment">// SetConsoleMode(hInput, ENABLE_VIRTUAL_TERMINAL_INPUT);</span></span><br><span class="line">    HANDLE hOutput = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">    SetConsoleMode(hOutput, ENABLE_PROCESSED_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = serialport_connect_to_available();</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n未找到串口, 请将设备插入USB口\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        connected = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4096</span>];</span><br><span class="line">    <span class="type">int</span> buf_len = <span class="keyword">sizeof</span>(buf);</span><br><span class="line"></span><br><span class="line">    gets(buf);</span><br><span class="line"></span><br><span class="line">    <span class="type">pthread_t</span> t;</span><br><span class="line">    pthread_create(&amp;t, <span class="literal">NULL</span>, serial_write_task, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span>(connected == <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> n = sp_blocking_read(port, buf, buf_len, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(n &lt; <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n串口连接断开了!\n"</span>);</span><br><span class="line">                connected = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.*s"</span>, n, buf);</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(serialport_connect_to_available() == <span class="number">0</span>)</span><br><span class="line">        {</span><br><span class="line">            connected = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>其中 </p><figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">HANDLE hOutput = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">SetConsoleMode(hOutput, ENABLE_PROCESSED_OUTPUT | ENABLE_VIRTUAL_TERMINAL_PROCESSING);</span><br></pre></td></tr></tbody></table></figure> 的作用是输出 ANSI 格式彩色文本 <figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">HANDLE hInput = GetStdHandle(STD_INPUT_HANDLE);</span><br><span class="line">SetConsoleMode(hInput, ENABLE_VIRTUAL_TERMINAL_INPUT);</span><br></pre></td></tr></tbody></table></figure>
的作用是自行处理输入，即键盘输入的每一个字符不通过缓冲区,
直接发送给程序, Ctrl+C 等组合键也会被接收,
可自行处理。但上面程序简单起见，不使用这一功能, 而是直接使用 gets
即从缓冲区接收字符串。<p></p>
<p>编译运行 (MSYS2环境) </p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gcc serial.c -lserialport -lpthread</span><br></pre></td></tr></tbody></table></figure><p></p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Windows/终端串口打印程序/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>串口通信</tag>
      </tags>
  </entry>
  <entry>
    <title>RTThread 开发环境</title>
    <url>/2023/02/17/auto/8/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何搭建 RTThread 开发的开发环境 <span id="more"></span></p>
<p>RTThread 开发支持裸机移植, Env 工具移植, 和 RTThread Studio
直接开发。一般裸机移植只适用于 RTThread Nano, 因为 Nano
不需要各种组件包, 很简洁适用于系统资源十分有限的MCU中, 但这样就发挥不了
RTThread 组件生态的好处了, 通过 Env 工具和 RTThread Studio
开发可以直接获取网络的官方或第三方成熟的组件,
加快开发流程。下面将主要讨论使用 Env 工具开发的基本流程。</p>
<h4 id="准备工作">准备工作</h4>
<p>到<a class="link" href="https://www.rt-thread.org/page/download.html">官网下载<i class="fas fa-external-link-alt"></i></a>:</p>
<ul>
<li>RTThread 标准版源码</li>
<li>Env 工具</li>
</ul>
<h4 id="env-工具的基本使用">Env 工具的基本使用</h4>
<p>参考官方<a class="link" href="https://www.rt-thread.org/document/site/#/development-tools/env/env">使用介绍<i class="fas fa-external-link-alt"></i></a></p>
<p>安装完成后打开 env.exe, 为了能随时随地打开env.exe方便使用,
将工具添加到注册表(标题栏右击-&gt;Settings-&gt;Integration-&gt;Register)</p>
<p>Env 中携带了 Python &amp; scons 以及 gcc 工具链,
安装完就可以直接编译.</p>
<h5 id="编译-bsp">1. 编译 BSP</h5>
<p>在源码的 bsp 目录找到适合自己板子的工程模板, 在模板目录下打开 env.exe
输入 <code>scons</code> 即可开始编译当前板子的工程代码.</p>
<h5 id="生成工程文件">2.生成工程文件</h5>
<p>如果使用 mdk/iar 来进行项目开发, 可以直接使用 BSP
中的工程文件或者使用以下命令中的其中一种，重新生成工程.
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">scons --target=iar</span><br><span class="line">scons --target=mdk4</span><br><span class="line">scons --target=mdk5</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="menuconfig">3. menuconfig</h4>
<p>输入 <code>menuconfig</code> 进行配置, 配置完后后自动生成 rtconfig.h
文件。此时再次使用 scons 命令就会根据新的 rtconfig.h
文件重新编译工程了</p>
<h4 id="pkg-包管理器官方包地址">4. pkg 包管理器(<a class="link" href="https://github.com/RT-Thread-packages">官方包地址<i class="fas fa-external-link-alt"></i></a>)</h4>
<p>package 工具作为 Env
的组成部分，为开发者提供了软件包的下载、更新、删除等管理功能.</p>
<p>在下载、更新软件包前，需要先在 menuconfig 中 开启 你想要操作的软件包,
这些软件包位于 RT-Thread online packages 菜单下.
找到你需要的软件包然后选中开启，保存并退出 menuconfig
。此时软件包已被标记选中，但是还没有下载到本地，所以还无法使用。</p>
<p>这时候使用 pkg 命令进行下载、更新、删除软件包</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果软件包在 menuconfig 已被选中，但是未下载，此时输入如下命令, 该软件包自动下载；</span></span><br><span class="line">pkgs --update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 更新</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果选中的软件包在服务器端有更新，并且版本号在 menuconfig 中选择的是 latest. 输入如下指令, 该软件包将会进行更新；</span></span><br><span class="line">pkgs --update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 删除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要先在 menuconfig 中取消其的选中状态，然后再执行如下指令 。此时本地已下载但未被选中的软件包将会被删除。</span></span><br><span class="line">pkgs --update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 升级本地软件包信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个命令不仅会对本地的包信息进行更新同步，还会对 Env 的功能脚本进行升级，建议定期使用</span></span><br><span class="line">pkgs --upgrade</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="scons-更多功能">5. scons 更多功能</h4>
<p>参考<a class="link" href="https://www.rt-thread.org/document/site/#/development-tools/scons/scons">官方说明<i class="fas fa-external-link-alt"></i></a></p>
<p>SCons 基本功能</p>
<p>RT-Thread 构建系统支持多种编译器, 可以阅读该 BSP 目录下的 rtconfig.py
里的 CROSS_TOOL 选项查看当前支持的编译器。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scons --target=mdk5     # 生成 mdk5 的工程</span><br><span class="line">scons -c                # 清除构建内容</span><br><span class="line">scons -s                # 不输出内部命令信息, 可以连着用比如 scons --target=mdk5 -s</span><br><span class="line">scons -jN               # 多线程编译</span><br><span class="line">scons --dist            # 输出BSP相关工程, 所有 bsp 相关源码都拷贝到 dist 目录下</span><br><span class="line">scons --verbose         # 显示编译参数</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注：要生成 MDK 或者 IAR 的工程文件，前提条件是 BSP
目录存在一个工程模版文件，然后 scons
才会根据这份模版文件加入相关的源码，头文件搜索路径，编译参数，链接参数等。而至于这个工程是针对哪颗芯片的，则直接由这份工程模版文件指定。所以大多数情况下，这个模版文件是一份空的工程文件，用于辅助
SCons 生成 project.uvprojx 或者 project.eww。</p>
</blockquote>
<h4 id="env-高级用法">Env 高级用法</h4>
<p>该用法是我独自探索出来的, 实用性还是不错的.</p>
<p>我发现下载的 env 包里面有一个 env.bat, 运行后直接开启一个 ConEmu.exe
终端程序, 其关键内容正是这段启动脚本</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">start  .\tools\ConEmu\ConEmu.exe </span><br></pre></td></tr></tbody></table></figure>
<p>ConEmu.exe 是随包下载放在 tools 目录下的. ConEmu.exe
是一个开源的终端模拟器, RTT 官方默认让用户使用该终端来承载他们提供的 env
环境.</p>
<p>然而一般来说我习惯在 VSCode 中使用 VSCode
自带的终端模拟器或者直接使用 Windows Terminal, 但是当我在 VSCode 或 cmd
中启动 RTT env 时, 不论我是使用 env.bat 还是 直接运行 ..exe
它总是开启一个新的窗口, 有没有办法直接在 Windows Terminal 中进入 RTT env
环境呢?</p>
<p>我想 ConEmu.exe 作为一个终端模拟器, 和 Windows Terminal 本质是一样的,
只是作为承载开发环境的工具, 在进入 ConEmu.exe 的同时,
一定有环境导出的相关脚本，要不然就是官方更改了 ConEmu.exe 源码,
将环境导出内置了, 但这可能性不大。</p>
<p>最终果然在 <code>.\tools\ConEmu\ConEmu</code> 目录下找到初始化脚本
<code>CmdInit.cmd</code>, 这样一来就方便多了。</p>
<p>例如我可以写一个 <code>rtt.bat</code> 放入 Windows 的 PATH 中,
不论我是使用 VSCode 自带的终端模拟器还是 Windows Terminal, 只需输入 rtt
即可进入 RTT env 环境, 或者如果不想进入 RTT env
只是临时调用一下来编译程序只需输入 <code>rtt scons</code>, 这一点通过
<code>CmdInit.cmd &amp; %* &amp; exit"</code> 来实现, %* 在bat
脚本中是获取所有的输入参数, 即运行 CmdInit.cmd 脚本进入环境后后立刻运行
rtt.bat 其后的参数, 比如 scons, 最后运行完后执行 exit 退出环境.</p>
<p>rtt.bat 的实现如下:</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">@REM 如果输入参数不为空, 就按需执行, 执行完后立刻退出, 否则直接进入 RTT Env 环境</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">if</span> <span class="keyword">not</span> "%*" == "" (</span><br><span class="line">    <span class="built_in">cmd</span> /k "C:\ProgramFiles\Library\RTThread-env-tools-v1.<span class="number">3</span>.<span class="number">5</span>\tools\ConEmu\ConEmu\CmdInit.<span class="built_in">cmd</span> &amp; %* &amp; <span class="keyword">exit</span>"</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">cmd</span> /k "C:\ProgramFiles\Library\RTThread-env-tools-v1.<span class="number">3</span>.<span class="number">5</span>\tools\ConEmu\ConEmu\CmdInit.<span class="built_in">cmd</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="rtthread-vscode-插件">RTThread VSCode 插件</h4>
<p>最后, 我发现 RTThread 官方已经提供 VSCode 的开发插件,
使用起来更简单了.</p>
<h2 id="官方教程">官方教程</h2>
<p><a class="link" href="https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/README">官方教程<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="note">Note</h2>
<p>scons 使用的是 python 2.7, 里面的命令无法支持长路径复制, 因此 scons
--dist 如果路径过长就会导出失败, 真的坑...</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/OS/RTThread/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>RTThread</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>RTThread</tag>
      </tags>
  </entry>
  <entry>
    <title>02原理图绘制</title>
    <url>/2023/03/14/auto/5/02%E5%8E%9F%E7%90%86%E5%9B%BE%E7%BB%98%E5%88%B6/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 OrCad Capture CIS 中原理图绘制 <span id="more"></span></p>
<h1 id="界面默认布局">界面默认布局</h1>
<p>最顶层是一个菜单栏，菜单栏下面是一个个独立的小工具栏。</p>
<p>再往下左边是项目管理窗口集合，右边较大的窗口就是一个个文件的窗口集合，文件窗口下方是包含各种信息输出和命令窗口集合。</p>
<p>最右边有一个工具栏窗口，在原理图绘制时可执行一些快捷命令。</p>
<figure>
<img src="/2023/03/14/auto/5/02%E5%8E%9F%E7%90%86%E5%9B%BE%E7%BB%98%E5%88%B6/默认主界面.PNG" alt="默认主界面">
<figcaption aria-hidden="true">默认主界面</figcaption>
</figure>
<h2 id="原理图绘制">2. 原理图绘制</h2>
<p>放置功能有三种使用方法:</p>
<ul>
<li>第一种是在菜单栏中选择
<code>Place</code>，然后在下拉框中选中要放置的内容</li>
<li>第二种是直接在左侧工具栏种选中要放置的内容</li>
<li>第三种是直接使用快捷键进行放置，根据快捷键的不同，放置的内容不同</li>
</ul>
<p>放置功能在原理图绘制中占据非常重要的地位，以至于很多单字母的快捷键都是为它们准备的。</p>
<h5 id="放置元件-part">1) 放置元件 (Part)</h5>
<p>快捷键 P,
放置元件命令执行后会弹出一个选择框，需要从元件库中选中一个元件然后放到原理图中。可在
Libraries 栏中新增或删除一个元件库。</p>
<p><img src="/2023/03/14/auto/5/02%E5%8E%9F%E7%90%86%E5%9B%BE%E7%BB%98%E5%88%B6/PlacePart.png" width="20%" height="20%"></p>
<h6 id="内置库">内置库</h6>
<p>一般来说放置一些常规的如电容电阻元件，电源和地符号等，直接使用内置的元件库就可以了，内置的元件库有很多，一般放置在安装目录下的
<code>tools\capture\library</code>
文件夹中。选择添加元件库时，默认打开的文件路径就是该文件夹，因此可以非常方便地选择添加内置库文件。</p>
<p>以下是列出 <code>tools\capture\library</code>
文件夹中包含的一些常用的内置元件或符号库:</p>
<table>
<colgroup>
<col style="width: 22%">
<col style="width: 7%">
<col style="width: 69%">
</colgroup>
<thead>
<tr>
<th>库名</th>
<th>零件个数</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>capsym.olb</td>
<td>35 个</td>
<td>存放一些常用的电源和地符号 (注: 电源、地仅是一些电气符号,
不属于真实元件)</td>
</tr>
<tr>
<td>Discrete.olb</td>
<td>872个</td>
<td>存放分立式元件，如电阻，电容，电感，开关，变压器等常用零件</td>
</tr>
<tr>
<td>Counter.olb</td>
<td>816个</td>
<td>存放连接器，如4 HEADER，CON AT62，RCA JACK等</td>
</tr>
<tr>
<td>Transistor.olb</td>
<td>210个</td>
<td>存放晶体管（含FET，UJT，PUT等），如 2N2222A，2N2905等</td>
</tr>
<tr>
<td>Amplifier.olb</td>
<td>182个</td>
<td>存放模拟放大器IC，如CA3280，TL027C，EL4093等</td>
</tr>
<tr>
<td>Arithmetic.olb</td>
<td>182个</td>
<td>存放逻辑运算IC，如TC4032B，74LS85等</td>
</tr>
<tr>
<td>ATOD.OLB</td>
<td>618个</td>
<td>存放A/D转换IC，如ADC0804，TC7109等</td>
</tr>
<tr>
<td>BusDriverTransceiver.olb</td>
<td>632个</td>
<td>存放汇流排驱动IC，如74LS244，74LS373等数字IC</td>
</tr>
<tr>
<td>Counter.olb</td>
<td>182个</td>
<td>存放计数器IC，如74LS90，CD4040B</td>
</tr>
<tr>
<td>DRAM.OLB</td>
<td>623个</td>
<td>存放动态存储器，如TMS44C256，MN41100-10等</td>
</tr>
<tr>
<td>ElectroMechanical.olb</td>
<td>6个</td>
<td>存放马达，断路器等电机类元件。 MICROPHONE，蜂鸣器也在里面</td>
</tr>
<tr>
<td>FIFO.OLB</td>
<td>177个</td>
<td>存放先进先出资料暂存器，如40105，SN74LS232</td>
</tr>
<tr>
<td>Filter.olb</td>
<td>80个</td>
<td>存放滤波器类元件，如MAX270，LTC1065等</td>
</tr>
<tr>
<td>FPGA.OLB</td>
<td></td>
<td>存放可编程逻辑器件，如XC6216/LCC</td>
</tr>
<tr>
<td>Gate.olb</td>
<td>691个</td>
<td>存放逻辑门（含CMOS和TLL）</td>
</tr>
<tr>
<td>Latch.olb</td>
<td>305个</td>
<td>存放锁存器，如4013，74LS73，74LS76等</td>
</tr>
<tr>
<td>LineDriverReceiver.olb</td>
<td>380个</td>
<td>共380个零件，存放线控驱动与接收器。如SN75125，DS275等</td>
</tr>
<tr>
<td>Mechanical.olb</td>
<td>110个</td>
<td>共110个零件，存放机构图件，如M HOLE 2，PGASOC-15-F等</td>
</tr>
<tr>
<td>MicroController.olb</td>
<td>523个</td>
<td>存放单晶片微处理器，如68HC11，AT89C51等</td>
</tr>
<tr>
<td>MicroProcessor.olb</td>
<td>288个</td>
<td>存放微处理器，如80386，Z80180等</td>
</tr>
<tr>
<td>Misc.olb</td>
<td>1567个</td>
<td>存放杂项图件，如电表（METER
MA），微处理器周边（Z80-DMA）等未分类的零件</td>
</tr>
<tr>
<td>Misc2.olb</td>
<td>772个</td>
<td>存放杂项图件，如TP3071，ZSD100等未分类零件</td>
</tr>
<tr>
<td>Misc3.olb</td>
<td>365个</td>
<td>存放线性杂项图件（未分类），如14573，4127，VFC32等</td>
</tr>
<tr>
<td>MiscMemory.olb</td>
<td>278个</td>
<td>存放记忆体杂项图件（未分类），如28F020，X76F041等</td>
</tr>
<tr>
<td>MiscPower.olb</td>
<td>222个</td>
<td>存放高功率杂项图件（未分类），如REF-01，PWR505，TPS67341等</td>
</tr>
<tr>
<td>MuxDecoder.olb</td>
<td>449个</td>
<td>存放解码器，如4511，4555，74AC157等</td>
</tr>
<tr>
<td>OPAmp.olb</td>
<td>610个</td>
<td>存放运放，如101，1458，UA741等</td>
</tr>
<tr>
<td>PassiveFilter.olb</td>
<td>14个</td>
<td>存放被动式滤波器，如DIGNSFILTER，RS1517T，LINE FILTER等</td>
</tr>
<tr>
<td>PLD.OLB</td>
<td>355个</td>
<td>存放可编程逻辑器件，如22V10，10H8等</td>
</tr>
<tr>
<td>PROM.OLB</td>
<td>811个</td>
<td>存放只读记忆体运算放大器，如18SA46，XL93C46等</td>
</tr>
<tr>
<td>Regulator.olb</td>
<td>549个</td>
<td>存放稳压IC，如78xxx，79xxx等</td>
</tr>
<tr>
<td>ShiftRegister.olb</td>
<td>610个</td>
<td>存放移位寄存器，如4006，SNLS91等</td>
</tr>
<tr>
<td>SRAM.OLB</td>
<td>691个</td>
<td>存放静态存储器，如MCM6164，P4C116等</td>
</tr>
</tbody>
</table>
<h6 id="design-cache">Design Cache</h6>
<p>Design Cache
列出当前放置到原理图中的所有元件，使用起来非常方便。即使导入的元件库都清空了，Design
Cache 中的元件依然存在。</p>
<h6 id="从元件库中筛查元件技巧">从元件库中筛查元件技巧</h6>
<ul>
<li><p>当在 Libraries 栏里选中一个元件库，在 Part
栏中就会只列出当前选中的元件库，在输入栏中输入想要查找的元件即可筛查。</p></li>
<li><p>可以通过在 Libraries 栏中按 Ctrl
进行复选多个库，如果要选中全部，则按 <code>Ctrl + A</code>，这时 Part
栏中就会列出所有选中的库元件，并且以 <code>元件名/库名</code>
的形式列出。</p></li>
<li><p>输入栏支持通配符查找，例如要查找 51 单片机, 输入
<code>*89*51*</code>，若库中有，则将可匹配出 <code>AT89C51</code> 或者
<code>STC89S51</code> 等。</p></li>
<li><p>在最下方有一个 <code>+ Search for</code>,
点击加号展开后可用用于在指定的库文件夹中查找某个元件，并将元件所在的库列出来，非常方便。</p></li>
</ul>
<blockquote>
<p>放置完后可以直接把元件选择框 ×
掉的，因为下次再点放置还会弹出，不用担心找不到</p>
</blockquote>
<h5 id="放置基本">2) 放置基本</h5>
<p>选择菜单栏的 Place 可以看到每一种放置的快捷键, 以下只是列出...</p>
<table>
<colgroup>
<col style="width: 13%">
<col style="width: 6%">
<col style="width: 80%">
</colgroup>
<thead>
<tr>
<th>放置类型</th>
<th>快捷键</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>连线</td>
<td>W</td>
<td>默认走直角。若想走任意角度，画线过程按 Shitf, 也可以在画完后拖动时按
Shitf</td>
</tr>
<tr>
<td>连接点</td>
<td>J</td>
<td>要去除某个连接点，再点一次放置连接点即可</td>
</tr>
<tr>
<td>网络</td>
<td>N</td>
<td>放置网络 (Net Alias 只在同一个原理图中有效?)</td>
</tr>
<tr>
<td>不连接</td>
<td>X</td>
<td>放置 NC (从而识别该引脚悬空，电气检查时就不会报错)</td>
</tr>
<tr>
<td>电源</td>
<td>F</td>
<td></td>
</tr>
<tr>
<td>地</td>
<td>G</td>
<td></td>
</tr>
<tr>
<td>总线</td>
<td>B</td>
<td>放置总线, 总线网络标签可使用 NAME[0..7] 或 NAME[0:7] 或
NAME[0-7]</td>
</tr>
<tr>
<td>总线入口</td>
<td>E</td>
<td>放置总线引出线, 总线引出线必须使用 Entry 不能直接使用 NET Alias</td>
</tr>
<tr>
<td>跨原理图网络</td>
<td>无</td>
<td>跨原理图不能直接使用 Net Alias 连接, 需使用 Off-page connector</td>
</tr>
</tbody>
</table>
<h6 id="画线技巧">画线技巧</h6>
<ul>
<li>一个引脚引出网络已经绘制完成, 可按住 Ctrl
并选中该网络往下拖会自带复制线和网络,
如果网络以数字结尾，则会自动递增数字</li>
<li><strong>F4
可复刻上一个步骤所进行的操作</strong>，因此在拖动完后可直接按 F4
重复上一次操作，这样就可以快速添加网络
例如添加总线入口时只需添加第一个，然后按Ctrl +
拖动入口线到第二个，随后按F4，系统会自动添加入口线</li>
<li>画线没有设置网络系统会默认分配网络,
可通过鼠标悬停在线上查看实际某根线连接到的网络</li>
</ul>
<h2 id="编辑原理图">3. 编辑原理图</h2>
<p>绘制完原理图后可能需要进行修改和检查。</p>
<p>菜单栏下的 Edit 选项有很多</p>
<h3 id="edit-browse">1) Edit-&gt;Browse</h3>
<p>Browse 功能可对原理图整体进行概览 (先在工程栏中选中要预览的 dsn 文件,
否则该功能可能为灰色),
包括所有元器件，网络等。可通过对原理图的概览中快速发现问题, 例如</p>
<ul>
<li><p>Parts 可对元件进行概览,
将列出所有元件，发现未命名元件可直接双击，软件会自动转到该元件。</p></li>
<li><p>Nets 可对网络概览,
将列出所有网络，包括软件自动命名的。通过浏览，可以很快发现比如电源网络没设置问题
(这在电气检查不出, 因为默认 电源 VCC_BAR,
它本身也是一个合法的网络，只是我们根本没在那个网络连接电源)</p></li>
<li><p>FlatNetlist：扁平的网络连接，包括不用页面的连接，在平坦式原理图中，所有的网络都是Flat
Netlist，只有在层次化原理图中，部分的网络才是Schematic Net；</p></li>
<li><p>Port与Off-page：这两个都是查看原理图中的分页连接符；</p></li>
<li><p>TitleBlocks：浏览原理图中的的标题栏；</p></li>
<li><p>Bookmarks：浏览原理图中的的书签标记；</p></li>
<li><p>DRCMarkers：浏览原理图中的DRC的标记符号；可定位 DRC
检查中的错误.</p></li>
<li><p>Powerpins：浏览原理图中的电源管脚管脚。</p></li>
</ul>
<p>常规操作:</p>
<ul>
<li><p>重新设置所有元件标号为 ?: 只需在 Tools-&gt;Annotate 选中 Reset
part reference to "?" 全部设为 ？ 后再在同样的设置界面选中 Unconditional
reference update 即可更新元件标号.</p></li>
<li><p>DRC 检查, 对原理图进行 DRC 检查 17.4 版本后怎么放在 PCB
菜单栏下了?</p></li>
</ul>
<h3 id="edit-find">2) Edit-&gt;Find</h3>
<p>快捷键直接 <code>Ctrl + F</code></p>
<p>可在多个原理图 (弹出查找窗口后可选中工程栏中的多个原理图进行多个查找)
中快速查找某个元件，网络，Text 等内容。</p>
<p>支持正则表达式, 非常不错. 比如查找 xxV 电源, 那么只需输入
<code>[0-9].*V</code>，下面查找类型为 Power/GND 则可以查找如 3.3V, 3V3,
12V 等电源网络.</p>
<p>Flat Net
会列出和该网络相连的引脚都高亮，这样可以有一个整体的概念，知道该网络都连接到哪个地方...</p>
<h3 id="design-cache-操作">3) Design Cache 操作</h3>
<p><strong>替换</strong>: 可通过对 Cache
中列出的元件进行替换来实现对整个工程一些元件的批量替换，例如将 R
电阻的风格 (默认美标）全部替换成国标的, 只需替换 Cache 中 R 为 R2。</p>
<p>此外替换还可以改变元件和原理图库的连接关系。</p>
<p><strong>更新</strong> 在原理图库中更改了元件可通过 update
来进行更新</p>
<p>注意替换时更新属性和不更新属性的区别, 如果需要更新元件的 PCB 封装,
不能通过更新来完成，而是需要使用替换并更新属性?
我感觉直接更改元件的封装并更新后是可以更改封装的。</p>
<p><strong>Cleanup</strong> (右击Designe Cache 文件夹)
没放一个元件都会在 Cache 中创建副本,
即在原理与中删除了也依然存在，CLeanup
可以清除哪些在原理中已经被删除的元件副本。</p>
<h3 id="原理图编辑的一些小技巧">4) 原理图编辑的一些小技巧</h3>
<ul>
<li>拖动元件时一般都会粘连网络连接，要拖动时断开这种连接，可按 Alt</li>
<li>点击对象后按 R 旋转</li>
<li>点击对象后按 V 垂直镜像，H 水平镜像, 两个方向都同时镜像
Edit-&gt;Mirror-&gt;Both (文本对象无法镜像操作)</li>
<li>拖动时按 Ctrl 可直接拷贝出副本</li>
</ul>
<h2 id="编辑元件属性">编辑元件属性</h2>
<h3 id="pcb-封装属性">PCB 封装属性</h3>
<h4 id="原理图中单个添加或更改">1) 原理图中单个添加或更改</h4>
<p>双击原理图后会弹出属性编辑界面 (如果是横排的, 可以右击属性栏，选择
Piovt)， 然后更改封装属性</p>
<h4 id="通过更改元件库来添加或更改">2）通过更改元件库来添加或更改</h4>
<p>对元件库中元件的封装信息进行更改，然后在原理图 Cache
中更新即可添加或更改封装信息，但是 Replace 才行 ?</p>
<h4 id="原理图中选中后批量修改">3) 原理图中选中后批量修改</h4>
<p>原理图中框选多个元件(可按 Ctrl 重复框选)
右击修改属性。(单击一个元件后，再按住 Shift 单机另一个元件可完成多选)
。</p>
<p>注意在属性栏列表下面可以选择 Object 类型，如果直接框选会带有很多
Object, 选择 part 对象即可。</p>
<h4 id="右击原理图文件后通过-edit-object-properties-来批量修改">4)
右击原理图文件后通过 Edit Object Properties 来批量修改</h4>
<p>整个原理图肯定包含多个对象，元件只是其中一个，可以在下方选择 part
来显示所有元件对象，这时就可以批量修改了。</p>
<p>可以单独查看和检查某一个原理图元件的封装情况，也可以整个工程所有元件一起检查...</p>
<p>封装添加完后检查 DRC 就不会报错了，至于封装实际是否存在 DRC
并不检查这些。因为添加封装属性只是为了导出网表时包含有元件的封装属性。</p>
<p>绘制 PCB 时，PCB
绘制工具通过网表中的封装信息，从封装库中导入实际的封装。而 PCB 工具可是
AD, PADS 或其他第三方工具。因此原理图 DRC
确实没必要检查封装是否存在。只要有个封装的名字即可。</p>
<h2 id="生成网表">生成网表</h2>
<p>原理图最终目的就是要生成网表给 PCB 绘制软件。</p>
<p>原理图 DRC 检查 OK 后菜单栏中选择 Tools-&gt;Create NetList
来生成网表。</p>
<p>网表类型有很多选择，可生成 PCB, Verilog，SPICE
网表，这也是为什么很多人都喜欢用 OrCad 绘制原理图的原因。</p>
<h2 id="生成元器件清单-bom">生成元器件清单 (BOM)</h2>
<p>导出功能居然要选择 OrCad + CIS 功能才有，否则 Report 选项.</p>
<p>选中dsn 文件后，在菜单中选择 Report--&gt;CIS Bill of Materials</p>
<p>弹出的对话框中，有一个输出选择栏，左边选择想要选择输出哪些属性，右边是哪些属性已经被选择。</p>
<p>Tools下面的 Bill of Materials 也可以生成 BOM 有什么不同?</p>
<h2 id="打印原理图">打印原理图</h2>
<p>设置原理图属性页面属性, 点击单张原理图， 右击--&gt;原理图属性</p>
<p>在这里可以设置纸张大小, 打印属性等</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/Hardware/Tools/Candence/02原理图绘制/02原理图绘制.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Tools</category>
        <category>Candence</category>
      </categories>
      <tags>
        <tag>Candence</tag>
      </tags>
  </entry>
  <entry>
    <title>JTAG接口知识</title>
    <url>/2023/03/04/auto/7/JTAG%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍JTAG接口知识 <span id="more"></span></p>
<p>ARM JTAG 20Pin 定义:</p>
<ul>
<li>VTREF 参考电压, 决定 JTAG 接口使用的逻辑电平</li>
<li>nTRST (可选) 复位信号, 只对当前连接到JTAG的 TAG Controller 进行复位,
对* 于系统的其他部分, 比如电源模块等是不可见的, 通过 TMS
也可以发送该复位信号</li>
<li>TDI 输出输入</li>
<li>TMS 模式选择信号，用于控制TAP状态机的转换, 测试模式选择</li>
<li>RTCK (可选) 反馈信号, 由目标端反馈给仿真器的时钟信号,
用来同步TCK信号的* 产生, 不使用时直接接地</li>
<li>TDO 数据输出</li>
<li>TCK 时钟信号</li>
<li>nSRST (可选) 系统复位信号,
与目标板上的系统复位信号相连,对目标系统所有模块进行复位, 等同于按下
RESET 键</li>
</ul>
<p>对于 SWD 模式, 除电源和地, 只有两根线</p>
<ul>
<li>SWDIO 对应到 TMS</li>
<li>SWDCLK 对应到 TCK</li>
</ul>
<p>JTAG接口</p>
<figure>
<img src="/2023/03/04/auto/7/JTAG%E6%8E%A5%E5%8F%A3/JTAG接口.jpg" alt="JTAG接口">
<figcaption aria-hidden="true">JTAG接口</figcaption>
</figure>
<p>STLink</p>
<figure>
<img src="/2023/03/04/auto/7/JTAG%E6%8E%A5%E5%8F%A3/STLink.png" alt="STLink">
<figcaption aria-hidden="true">STLink</figcaption>
</figure>
<p>ARM20Pin_SWD</p>
<figure>
<img src="/2023/03/04/auto/7/JTAG%E6%8E%A5%E5%8F%A3/ARM20Pin_SWD.jpg" alt="ARM20Pin_SWD">
<figcaption aria-hidden="true">ARM20Pin_SWD</figcaption>
</figure>
<p>参考文献</p>
<p>https://blog.csdn.net/weixin_60713230/article/details/122691494</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/OpenOCD/JTAG接口知识/JTAG接口.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>Embedded</category>
        <category>OpenOCD</category>
      </categories>
      <tags>
        <tag>JTAG</tag>
      </tags>
  </entry>
  <entry>
    <title>RTThread 开发环境</title>
    <url>/2023/02/17/auto/9/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍如何搭建 RTThread 开发的开发环境 <span id="more"></span></p>
<p>RTThread 开发支持裸机移植, Env 工具移植, 和 RTThread Studio
直接开发。一般裸机移植只适用于 RTThread Nano, 因为 Nano
不需要各种组件包, 很简洁适用于系统资源十分有限的MCU中, 但这样就发挥不了
RTThread 组件生态的好处了, 通过 Env 工具和 RTThread Studio
开发可以直接获取网络的官方或第三方成熟的组件,
加快开发流程。下面将主要讨论使用 Env 工具开发的基本流程。</p>
<h4 id="准备工作">准备工作</h4>
<p>到<a class="link" href="https://www.rt-thread.org/page/download.html">官网下载<i class="fas fa-external-link-alt"></i></a>:</p>
<ul>
<li>RTThread 标准版源码</li>
<li>Env 工具</li>
</ul>
<h4 id="env-工具的基本使用">Env 工具的基本使用</h4>
<p>参考官方<a class="link" href="https://www.rt-thread.org/document/site/#/development-tools/env/env">使用介绍<i class="fas fa-external-link-alt"></i></a></p>
<p>安装完成后打开 env.exe, 为了能随时随地打开env.exe方便使用,
将工具添加到注册表(标题栏右击-&gt;Settings-&gt;Integration-&gt;Register)</p>
<p>Env 中携带了 Python &amp; scons 以及 gcc 工具链,
安装完就可以直接编译.</p>
<h5 id="编译-bsp">1. 编译 BSP</h5>
<p>在源码的 bsp 目录找到适合自己板子的工程模板, 在模板目录下打开 env.exe
输入 <code>scons</code> 即可开始编译当前板子的工程代码.</p>
<h5 id="生成工程文件">2.生成工程文件</h5>
<p>如果使用 mdk/iar 来进行项目开发, 可以直接使用 BSP
中的工程文件或者使用以下命令中的其中一种，重新生成工程.
</p><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">scons --target=iar</span><br><span class="line">scons --target=mdk4</span><br><span class="line">scons --target=mdk5</span><br></pre></td></tr></tbody></table></figure><p></p>
<h4 id="menuconfig">3. menuconfig</h4>
<p>输入 <code>menuconfig</code> 进行配置, 配置完后后自动生成 rtconfig.h
文件。此时再次使用 scons 命令就会根据新的 rtconfig.h
文件重新编译工程了</p>
<h4 id="pkg-包管理器官方包地址">4. pkg 包管理器(<a class="link" href="https://github.com/RT-Thread-packages">官方包地址<i class="fas fa-external-link-alt"></i></a>)</h4>
<p>package 工具作为 Env
的组成部分，为开发者提供了软件包的下载、更新、删除等管理功能.</p>
<p>在下载、更新软件包前，需要先在 menuconfig 中 开启 你想要操作的软件包,
这些软件包位于 RT-Thread online packages 菜单下.
找到你需要的软件包然后选中开启，保存并退出 menuconfig
。此时软件包已被标记选中，但是还没有下载到本地，所以还无法使用。</p>
<p>这时候使用 pkg 命令进行下载、更新、删除软件包</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. 下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果软件包在 menuconfig 已被选中，但是未下载，此时输入如下命令, 该软件包自动下载；</span></span><br><span class="line">pkgs --update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. 更新</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果选中的软件包在服务器端有更新，并且版本号在 menuconfig 中选择的是 latest. 输入如下指令, 该软件包将会进行更新；</span></span><br><span class="line">pkgs --update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3. 删除</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要先在 menuconfig 中取消其的选中状态，然后再执行如下指令 。此时本地已下载但未被选中的软件包将会被删除。</span></span><br><span class="line">pkgs --update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4. 升级本地软件包信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个命令不仅会对本地的包信息进行更新同步，还会对 Env 的功能脚本进行升级，建议定期使用</span></span><br><span class="line">pkgs --upgrade</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h4 id="scons-更多功能">5. scons 更多功能</h4>
<p>参考<a class="link" href="https://www.rt-thread.org/document/site/#/development-tools/scons/scons">官方说明<i class="fas fa-external-link-alt"></i></a></p>
<p>SCons 基本功能</p>
<p>RT-Thread 构建系统支持多种编译器, 可以阅读该 BSP 目录下的 rtconfig.py
里的 CROSS_TOOL 选项查看当前支持的编译器。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">scons --target=mdk5     # 生成 mdk5 的工程</span><br><span class="line">scons -c                # 清除构建内容</span><br><span class="line">scons -s                # 不输出内部命令信息, 可以连着用比如 scons --target=mdk5 -s</span><br><span class="line">scons -jN               # 多线程编译</span><br><span class="line">scons --dist            # 输出BSP相关工程, 所有 bsp 相关源码都拷贝到 dist 目录下</span><br><span class="line">scons --verbose         # 显示编译参数</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>注：要生成 MDK 或者 IAR 的工程文件，前提条件是 BSP
目录存在一个工程模版文件，然后 scons
才会根据这份模版文件加入相关的源码，头文件搜索路径，编译参数，链接参数等。而至于这个工程是针对哪颗芯片的，则直接由这份工程模版文件指定。所以大多数情况下，这个模版文件是一份空的工程文件，用于辅助
SCons 生成 project.uvprojx 或者 project.eww。</p>
</blockquote>
<h4 id="env-高级用法">Env 高级用法</h4>
<p>该用法是我独自探索出来的, 实用性还是不错的.</p>
<p>我发现下载的 env 包里面有一个 env.bat, 运行后直接开启一个 ConEmu.exe
终端程序, 其关键内容正是这段启动脚本</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">start  .\tools\ConEmu\ConEmu.exe </span><br></pre></td></tr></tbody></table></figure>
<p>ConEmu.exe 是随包下载放在 tools 目录下的. ConEmu.exe
是一个开源的终端模拟器, RTT 官方默认让用户使用该终端来承载他们提供的 env
环境.</p>
<p>然而一般来说我习惯在 VSCode 中使用 VSCode
自带的终端模拟器或者直接使用 Windows Terminal, 但是当我在 VSCode 或 cmd
中启动 RTT env 时, 不论我是使用 env.bat 还是 直接运行 ..exe
它总是开启一个新的窗口, 有没有办法直接在 Windows Terminal 中进入 RTT env
环境呢?</p>
<p>我想 ConEmu.exe 作为一个终端模拟器, 和 Windows Terminal 本质是一样的,
只是作为承载开发环境的工具, 在进入 ConEmu.exe 的同时,
一定有环境导出的相关脚本，要不然就是官方更改了 ConEmu.exe 源码,
将环境导出内置了, 但这可能性不大。</p>
<p>最终果然在 <code>.\tools\ConEmu\ConEmu</code> 目录下找到初始化脚本
<code>CmdInit.cmd</code>, 这样一来就方便多了。</p>
<p>例如我可以写一个 <code>rtt.bat</code> 放入 Windows 的 PATH 中,
不论我是使用 VSCode 自带的终端模拟器还是 Windows Terminal, 只需输入 rtt
即可进入 RTT env 环境, 或者如果不想进入 RTT env
只是临时调用一下来编译程序只需输入 <code>rtt scons</code>, 这一点通过
<code>CmdInit.cmd &amp; %* &amp; exit"</code> 来实现, %* 在bat
脚本中是获取所有的输入参数, 即运行 CmdInit.cmd 脚本进入环境后后立刻运行
rtt.bat 其后的参数, 比如 scons, 最后运行完后执行 exit 退出环境.</p>
<p>rtt.bat 的实现如下:</p>
<figure class="highlight bat"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">@REM 如果输入参数不为空, 就按需执行, 执行完后立刻退出, 否则直接进入 RTT Env 环境</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">if</span> <span class="keyword">not</span> "%*" == "" (</span><br><span class="line">    <span class="built_in">cmd</span> /k "C:\ProgramFiles\Library\RTThread-env-tools-v1.<span class="number">3</span>.<span class="number">5</span>\tools\ConEmu\ConEmu\CmdInit.<span class="built_in">cmd</span> &amp; %* &amp; <span class="keyword">exit</span>"</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">cmd</span> /k "C:\ProgramFiles\Library\RTThread-env-tools-v1.<span class="number">3</span>.<span class="number">5</span>\tools\ConEmu\ConEmu\CmdInit.<span class="built_in">cmd</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="rtthread-vscode-插件">RTThread VSCode 插件</h4>
<p>最后, 我发现 RTThread 官方已经提供 VSCode 的开发插件,
使用起来更简单了.</p>
<h2 id="官方教程">官方教程</h2>
<p><a class="link" href="https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/README">官方教程<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="note">Note</h2>
<p>scons 使用的是 python 2.7, 里面的命令无法支持长路径复制, 因此 scons
--dist 如果路径过长就会导出失败, 真的坑...</p>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/RTOS/RTThread/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>RTThread</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>RTThread</tag>
      </tags>
  </entry>
  <entry>
    <title>LVGL 快速 demo</title>
    <url>/2023/01/17/auto/6/readme/</url>
    <content><![CDATA[<html><head></head><body><p>本文主要介绍 LVGL 的快速仿真示例 <span id="more"></span></p>
<p>首先写一个通用的 main.c 调用 LVGL</p>
<p>src/main.c</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="comment">// #define SDL_MAIN_HANDLED</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL2/SDL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"lvgl/lvgl.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"lvgl/examples/lv_examples.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"lvgl/demos/lv_demos.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"lv_drivers/sdl/sdl.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">hal_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">{</span><br><span class="line">  (<span class="type">void</span>)argc; <span class="comment">/*Unused*/</span></span><br><span class="line">  (<span class="type">void</span>)argv; <span class="comment">/*Unused*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Initialize LVGL*/</span></span><br><span class="line">  lv_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Initialize the HAL (display, input devices, tick) for LVGL*/</span></span><br><span class="line">  hal_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  lv_example_switch_1();</span></span><br><span class="line"><span class="comment">//  lv_example_calendar_1();</span></span><br><span class="line"><span class="comment">//  lv_example_btnmatrix_2();</span></span><br><span class="line"><span class="comment">//  lv_example_checkbox_1();</span></span><br><span class="line"><span class="comment">//  lv_example_colorwheel_1();</span></span><br><span class="line"><span class="comment">//  lv_example_chart_6();</span></span><br><span class="line"><span class="comment">//  lv_example_table_2();</span></span><br><span class="line"><span class="comment">//  lv_example_scroll_2();</span></span><br><span class="line"><span class="comment">//  lv_example_textarea_1();</span></span><br><span class="line"><span class="comment">//  lv_example_msgbox_1();</span></span><br><span class="line"><span class="comment">//  lv_example_dropdown_2();</span></span><br><span class="line"><span class="comment">//  lv_example_btn_1();</span></span><br><span class="line"><span class="comment">//  lv_example_scroll_1();</span></span><br><span class="line"><span class="comment">//  lv_example_tabview_1();</span></span><br><span class="line"><span class="comment">//  lv_example_tabview_1();</span></span><br><span class="line"><span class="comment">//  lv_example_flex_3();</span></span><br><span class="line"><span class="comment">//  lv_example_label_1();</span></span><br><span class="line"></span><br><span class="line">    lv_demo_widgets();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) {</span><br><span class="line">      <span class="comment">/* Periodically call the lv_task handler.</span></span><br><span class="line"><span class="comment">       * It could be done in a timer interrupt or an OS task too.*/</span></span><br><span class="line">      lv_timer_handler();</span><br><span class="line">      usleep(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">hal_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">  <span class="comment">/* Use the 'monitor' driver which creates window on PC's monitor to simulate a display*/</span></span><br><span class="line">  sdl_init();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Create a display buffer*/</span></span><br><span class="line">  <span class="type">static</span> <span class="type">lv_disp_draw_buf_t</span> disp_buf1;</span><br><span class="line">  <span class="type">static</span> <span class="type">lv_color_t</span> buf1_1[SDL_HOR_RES * <span class="number">100</span>];</span><br><span class="line">  lv_disp_draw_buf_init(&amp;disp_buf1, buf1_1, <span class="literal">NULL</span>, SDL_HOR_RES * <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Create a display*/</span></span><br><span class="line">  <span class="type">static</span> <span class="type">lv_disp_drv_t</span> disp_drv;</span><br><span class="line">  lv_disp_drv_init(&amp;disp_drv); <span class="comment">/*Basic initialization*/</span></span><br><span class="line">  disp_drv.draw_buf = &amp;disp_buf1;</span><br><span class="line">  disp_drv.flush_cb = sdl_display_flush;</span><br><span class="line">  disp_drv.hor_res = SDL_HOR_RES;</span><br><span class="line">  disp_drv.ver_res = SDL_VER_RES;</span><br><span class="line"></span><br><span class="line">  <span class="type">lv_disp_t</span> * disp = lv_disp_drv_register(&amp;disp_drv);</span><br><span class="line"></span><br><span class="line">  <span class="type">lv_theme_t</span> * th = lv_theme_default_init(disp, lv_palette_main(LV_PALETTE_BLUE), lv_palette_main(LV_PALETTE_RED), LV_THEME_DEFAULT_DARK, LV_FONT_DEFAULT);</span><br><span class="line">  lv_disp_set_theme(disp, th);</span><br><span class="line"></span><br><span class="line">  <span class="type">lv_group_t</span> * g = lv_group_create();</span><br><span class="line">  lv_group_set_default(g);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Add the mouse as input device</span></span><br><span class="line"><span class="comment">   * Use the 'mouse' driver which reads the PC's mouse*/</span></span><br><span class="line">  <span class="type">static</span> <span class="type">lv_indev_drv_t</span> indev_drv_1;</span><br><span class="line">  lv_indev_drv_init(&amp;indev_drv_1); <span class="comment">/*Basic initialization*/</span></span><br><span class="line">  indev_drv_1.type = LV_INDEV_TYPE_POINTER;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*This function will be called periodically (by the library) to get the mouse position and state*/</span></span><br><span class="line">  indev_drv_1.read_cb = sdl_mouse_read;</span><br><span class="line">  <span class="type">lv_indev_t</span> *mouse_indev = lv_indev_drv_register(&amp;indev_drv_1);</span><br><span class="line"></span><br><span class="line">  <span class="type">static</span> <span class="type">lv_indev_drv_t</span> indev_drv_2;</span><br><span class="line">  lv_indev_drv_init(&amp;indev_drv_2); <span class="comment">/*Basic initialization*/</span></span><br><span class="line">  indev_drv_2.type = LV_INDEV_TYPE_KEYPAD;</span><br><span class="line">  indev_drv_2.read_cb = sdl_keyboard_read;</span><br><span class="line">  <span class="type">lv_indev_t</span> *kb_indev = lv_indev_drv_register(&amp;indev_drv_2);</span><br><span class="line">  lv_indev_set_group(kb_indev, g);</span><br><span class="line"></span><br><span class="line">  <span class="type">static</span> <span class="type">lv_indev_drv_t</span> indev_drv_3;</span><br><span class="line">  lv_indev_drv_init(&amp;indev_drv_3); <span class="comment">/*Basic initialization*/</span></span><br><span class="line">  indev_drv_3.type = LV_INDEV_TYPE_ENCODER;</span><br><span class="line">  indev_drv_3.read_cb = sdl_mousewheel_read;</span><br><span class="line">  <span class="type">lv_indev_t</span> * enc_indev = lv_indev_drv_register(&amp;indev_drv_3);</span><br><span class="line">  lv_indev_set_group(enc_indev, g);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Set a cursor for the mouse*/</span></span><br><span class="line">  LV_IMG_DECLARE(mouse_cursor_icon); <span class="comment">/*Declare the image file.*/</span></span><br><span class="line">  <span class="type">lv_obj_t</span> * cursor_obj = lv_img_create(lv_scr_act()); <span class="comment">/*Create an image object for the cursor */</span></span><br><span class="line">  lv_img_set_src(cursor_obj, &amp;mouse_cursor_icon);           <span class="comment">/*Set the image source*/</span></span><br><span class="line">  lv_indev_set_cursor(mouse_indev, cursor_obj);             <span class="comment">/*Connect the image  object to the driver*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>然后写参照官方仿真例子写 CMakeLists.txt </p><figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(lvgl)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_STANDARD <span class="number">11</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(SDL2 REQUIRED SDL2)</span><br><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">        <span class="variable">${SDL2_INCLUDE_DIRS}</span></span><br><span class="line">        <span class="variable">${SDL2_INCLUDE_DIRS}</span>/../</span><br><span class="line">        <span class="variable">${PROJECT_SOURCE_DIR}</span></span><br><span class="line">        <span class="string">"src"</span></span><br><span class="line">        <span class="string">"lvgl"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE SOURCES  </span><br><span class="line">  <span class="string">"src/*.c"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE INCLUDES </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_subdirectory</span>(lvgl/lvgl)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(lvgl/lv_drivers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_C_FLAGS <span class="string">"-static"</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main lvgl/mouse_cursor_icon.c <span class="variable">${SOURCES}</span> <span class="variable">${INCLUDES}</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main PRIVATE lvgl lvgl::examples lvgl::demos lvgl::drivers </span><br><span class="line">  SDL2::SDL2main SDL2::SDL2-static -lserialport -lpthread)</span><br></pre></td></tr></tbody></table></figure><p></p>
<p>最后写一个 Makefile 作为自动构建工具</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># [MyProject]</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">    <span class="keyword">ifeq</span> (<span class="string">"$(wildcard lvgl)"</span>, <span class="string">""</span>)</span><br><span class="line">	@echo <span class="string">"lvgl sim does not exist."</span></span><br><span class="line">	@echo <span class="string">"Perform download..."</span></span><br><span class="line">	@git clone https://github.com/lvgl/lv_port_pc_eclipse.git lvgl</span><br><span class="line">	@cd lvgl &amp;&amp; git submodule init &amp;&amp; git submodule update</span><br><span class="line">    <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">	make cmake_build</span><br><span class="line"></span><br><span class="line"><span class="section">cmake_build:</span></span><br><span class="line">	mkdir -p build</span><br><span class="line">	cd build &amp;&amp; cmake .. -G <span class="string">"MSYS Makefiles"</span> &amp;&amp; make -j8 </span><br><span class="line"></span><br><span class="line"><span class="section">run:</span></span><br><span class="line">	cd build &amp;&amp; make -j8 &amp;&amp; start main.exe</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm  build -rf 2&gt; /dev/null || true</span><br></pre></td></tr></tbody></table></figure>
<p>可以将 lvgl 下的 <code>lv_conf.h</code> 和 <code>lv_drv_conf.h</code>
复制到 src 下而不用对 lvgl 源码进行任何修改</p>
<h3 id="使用方法">使用方法</h3>
<p>复制 quicksim 文件夹并重命名, 执行 make 即可.</p>
<p>lv_config.h 中设置一些常用配置</p>
<ul>
<li><code>LV_USE_MEM_MONITOR</code> 是否显示内存统计</li>
<li><code>LV_USE_PERF_MONITOR</code> 是否显示帧率</li>
</ul>
<p><a class="link" href="https://gitee.com/wjundong/code/blob/master/./Embedded/Lib/LVGL/quicksim/readme.md">源文件来自于<i class="fas fa-external-link-alt"></i></a></p>
</body></html>]]></content>
      <categories>
        <category>开源库</category>
        <category>LVGL</category>
        <category>仿真</category>
      </categories>
      <tags>
        <tag>LVGL</tag>
      </tags>
  </entry>
</search>
